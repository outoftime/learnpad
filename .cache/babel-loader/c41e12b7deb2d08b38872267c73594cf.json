{
  "ast": null,
  "code": "import { connect } from 'react-redux';\nimport every from 'lodash-es/every';\nimport Workspace from '../components/Workspace';\nimport { getCurrentProject, isCurrentlyValidating, isDraggingColumnDivider, isEditingInstructions, getCurrentProjectPreviewTitle, getHiddenAndVisibleLanguages, getHiddenUIComponents, getOpenTopBarMenu, isCurrentProjectSyntacticallyValid, isUserTyping } from '../selectors';\nimport { toggleComponent, applicationLoaded, startDragColumnDivider, stopDragColumnDivider, startEditingInstructions } from '../actions';\nimport resizableFlex from '../higherOrderComponents/resizableFlex';\nimport { RIGHT_COLUMN_COMPONENTS } from '../util/ui';\n\nfunction mapStateToProps(state) {\n  var _getHiddenAndVisibleL = getHiddenAndVisibleLanguages(state),\n      hiddenLanguages = _getHiddenAndVisibleL.hiddenLanguages;\n\n  var isCurrentProjectValid = isCurrentProjectSyntacticallyValid(state);\n  var isCurrentProjectValidating = isCurrentlyValidating(state);\n  var hiddenUIComponents = getHiddenUIComponents(state);\n  var areAllRightColumnComponentsCollapsed = every(RIGHT_COLUMN_COMPONENTS, function (component) {\n    return hiddenUIComponents.includes(component);\n  });\n  var shouldRenderOutput = !areAllRightColumnComponentsCollapsed || !isCurrentProjectValid && !isCurrentProjectValidating && !isUserTyping(state);\n  return {\n    currentProject: getCurrentProject(state),\n    hasErrors: !isCurrentProjectValid,\n    isAnyTopBarMenuOpen: Boolean(getOpenTopBarMenu(state)),\n    isDraggingColumnDivider: isDraggingColumnDivider(state),\n    isEditingInstructions: isEditingInstructions(state),\n    hiddenLanguages: hiddenLanguages,\n    shouldRenderOutput: shouldRenderOutput,\n    title: getCurrentProjectPreviewTitle(state)\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onApplicationLoaded: function onApplicationLoaded(payload) {\n      dispatch(applicationLoaded(payload));\n    },\n    onComponentToggle: function onComponentToggle(projectKey, componentName) {\n      dispatch(toggleComponent(projectKey, componentName));\n    },\n    onStartDragColumnDivider: function onStartDragColumnDivider() {\n      dispatch(startDragColumnDivider());\n    },\n    onStopDragColumnDivider: function onStopDragColumnDivider() {\n      dispatch(stopDragColumnDivider());\n    },\n    onClickInstructionsEditButton: function onClickInstructionsEditButton(projectKey) {\n      dispatch(startEditingInstructions(projectKey));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(resizableFlex(2)(Workspace));",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/containers/Workspace.js"
    ],
    "names": [
      "connect",
      "every",
      "Workspace",
      "getCurrentProject",
      "isCurrentlyValidating",
      "isDraggingColumnDivider",
      "isEditingInstructions",
      "getCurrentProjectPreviewTitle",
      "getHiddenAndVisibleLanguages",
      "getHiddenUIComponents",
      "getOpenTopBarMenu",
      "isCurrentProjectSyntacticallyValid",
      "isUserTyping",
      "toggleComponent",
      "applicationLoaded",
      "startDragColumnDivider",
      "stopDragColumnDivider",
      "startEditingInstructions",
      "resizableFlex",
      "RIGHT_COLUMN_COMPONENTS",
      "mapStateToProps",
      "state",
      "hiddenLanguages",
      "isCurrentProjectValid",
      "isCurrentProjectValidating",
      "hiddenUIComponents",
      "areAllRightColumnComponentsCollapsed",
      "component",
      "includes",
      "shouldRenderOutput",
      "currentProject",
      "hasErrors",
      "isAnyTopBarMenuOpen",
      "Boolean",
      "title",
      "mapDispatchToProps",
      "dispatch",
      "onApplicationLoaded",
      "payload",
      "onComponentToggle",
      "projectKey",
      "componentName",
      "onStartDragColumnDivider",
      "onStopDragColumnDivider",
      "onClickInstructionsEditButton"
    ],
    "mappings": "AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SACEC,iBADF,EAEEC,qBAFF,EAGEC,uBAHF,EAIEC,qBAJF,EAKEC,6BALF,EAMEC,4BANF,EAOEC,qBAPF,EAQEC,iBARF,EASEC,kCATF,EAUEC,YAVF,QAWO,cAXP;AAYA,SACEC,eADF,EAEEC,iBAFF,EAGEC,sBAHF,EAIEC,qBAJF,EAKEC,wBALF,QAMO,YANP;AAOA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,SAAQC,uBAAR,QAAsC,YAAtC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,8BACJb,4BAA4B,CAACa,KAAD,CADxB;AAAA,MACvBC,eADuB,yBACvBA,eADuB;;AAE9B,MAAMC,qBAAqB,GAAGZ,kCAAkC,CAACU,KAAD,CAAhE;AACA,MAAMG,0BAA0B,GAAGpB,qBAAqB,CAACiB,KAAD,CAAxD;AACA,MAAMI,kBAAkB,GAAGhB,qBAAqB,CAACY,KAAD,CAAhD;AACA,MAAMK,oCAAoC,GAAGzB,KAAK,CAChDkB,uBADgD,EAEhD,UAAAQ,SAAS;AAAA,WAAIF,kBAAkB,CAACG,QAAnB,CAA4BD,SAA5B,CAAJ;AAAA,GAFuC,CAAlD;AAIA,MAAME,kBAAkB,GACtB,CAACH,oCAAD,IACC,CAACH,qBAAD,IACC,CAACC,0BADF,IAEC,CAACZ,YAAY,CAACS,KAAD,CAJjB;AAKA,SAAO;AACLS,IAAAA,cAAc,EAAE3B,iBAAiB,CAACkB,KAAD,CAD5B;AAELU,IAAAA,SAAS,EAAE,CAACR,qBAFP;AAGLS,IAAAA,mBAAmB,EAAEC,OAAO,CAACvB,iBAAiB,CAACW,KAAD,CAAlB,CAHvB;AAILhB,IAAAA,uBAAuB,EAAEA,uBAAuB,CAACgB,KAAD,CAJ3C;AAKLf,IAAAA,qBAAqB,EAAEA,qBAAqB,CAACe,KAAD,CALvC;AAMLC,IAAAA,eAAe,EAAfA,eANK;AAOLO,IAAAA,kBAAkB,EAAlBA,kBAPK;AAQLK,IAAAA,KAAK,EAAE3B,6BAA6B,CAACc,KAAD;AAR/B,GAAP;AAUD;;AAED,SAASc,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,mBADK,+BACeC,OADf,EACwB;AAC3BF,MAAAA,QAAQ,CAACtB,iBAAiB,CAACwB,OAAD,CAAlB,CAAR;AACD,KAHI;AAKLC,IAAAA,iBALK,6BAKaC,UALb,EAKyBC,aALzB,EAKwC;AAC3CL,MAAAA,QAAQ,CAACvB,eAAe,CAAC2B,UAAD,EAAaC,aAAb,CAAhB,CAAR;AACD,KAPI;AASLC,IAAAA,wBATK,sCASsB;AACzBN,MAAAA,QAAQ,CAACrB,sBAAsB,EAAvB,CAAR;AACD,KAXI;AAaL4B,IAAAA,uBAbK,qCAaqB;AACxBP,MAAAA,QAAQ,CAACpB,qBAAqB,EAAtB,CAAR;AACD,KAfI;AAiBL4B,IAAAA,6BAjBK,yCAiByBJ,UAjBzB,EAiBqC;AACxCJ,MAAAA,QAAQ,CAACnB,wBAAwB,CAACuB,UAAD,CAAzB,CAAR;AACD;AAnBI,GAAP;AAqBD;;AAED,eAAexC,OAAO,CACpBoB,eADoB,EAEpBe,kBAFoB,CAAP,CAGbjB,aAAa,CAAC,CAAD,CAAb,CAAiBhB,SAAjB,CAHa,CAAf",
    "sourcesContent": [
      "import {connect} from 'react-redux';\nimport every from 'lodash-es/every';\n\nimport Workspace from '../components/Workspace';\nimport {\n  getCurrentProject,\n  isCurrentlyValidating,\n  isDraggingColumnDivider,\n  isEditingInstructions,\n  getCurrentProjectPreviewTitle,\n  getHiddenAndVisibleLanguages,\n  getHiddenUIComponents,\n  getOpenTopBarMenu,\n  isCurrentProjectSyntacticallyValid,\n  isUserTyping,\n} from '../selectors';\nimport {\n  toggleComponent,\n  applicationLoaded,\n  startDragColumnDivider,\n  stopDragColumnDivider,\n  startEditingInstructions,\n} from '../actions';\nimport resizableFlex from '../higherOrderComponents/resizableFlex';\nimport {RIGHT_COLUMN_COMPONENTS} from '../util/ui';\n\nfunction mapStateToProps(state) {\n  const {hiddenLanguages} = getHiddenAndVisibleLanguages(state);\n  const isCurrentProjectValid = isCurrentProjectSyntacticallyValid(state);\n  const isCurrentProjectValidating = isCurrentlyValidating(state);\n  const hiddenUIComponents = getHiddenUIComponents(state);\n  const areAllRightColumnComponentsCollapsed = every(\n    RIGHT_COLUMN_COMPONENTS,\n    component => hiddenUIComponents.includes(component),\n  );\n  const shouldRenderOutput =\n    !areAllRightColumnComponentsCollapsed ||\n    (!isCurrentProjectValid &&\n      !isCurrentProjectValidating &&\n      !isUserTyping(state));\n  return {\n    currentProject: getCurrentProject(state),\n    hasErrors: !isCurrentProjectValid,\n    isAnyTopBarMenuOpen: Boolean(getOpenTopBarMenu(state)),\n    isDraggingColumnDivider: isDraggingColumnDivider(state),\n    isEditingInstructions: isEditingInstructions(state),\n    hiddenLanguages,\n    shouldRenderOutput,\n    title: getCurrentProjectPreviewTitle(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onApplicationLoaded(payload) {\n      dispatch(applicationLoaded(payload));\n    },\n\n    onComponentToggle(projectKey, componentName) {\n      dispatch(toggleComponent(projectKey, componentName));\n    },\n\n    onStartDragColumnDivider() {\n      dispatch(startDragColumnDivider());\n    },\n\n    onStopDragColumnDivider() {\n      dispatch(stopDragColumnDivider());\n    },\n\n    onClickInstructionsEditButton(projectKey) {\n      dispatch(startEditingInstructions(projectKey));\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(resizableFlex(2)(Workspace));\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

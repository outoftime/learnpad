{
  "ast": null,
  "code": "var _marked =\n/*#__PURE__*/\nregeneratorRuntime.mark(toggleLibrary),\n    _marked2 =\n/*#__PURE__*/\nregeneratorRuntime.mark(updateProjectSource),\n    _marked3 =\n/*#__PURE__*/\nregeneratorRuntime.mark(validateCurrentProject),\n    _marked4 =\n/*#__PURE__*/\nregeneratorRuntime.mark(validateSource),\n    _marked5 =\n/*#__PURE__*/\nregeneratorRuntime.mark(errors);\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { all, call, cancel, fork, join, put, select, takeEvery } from 'redux-saga/effects';\nimport Analyzer from '../analyzers';\nimport { getCurrentProject } from '../selectors';\nimport { validatedSource } from '../actions/errors';\nimport retryingFailedImports from '../util/retryingFailedImports';\nexport function importValidations() {\n  return _importValidations.apply(this, arguments);\n}\n\nfunction _importValidations() {\n  _importValidations = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", retryingFailedImports(function () {\n              return import(\n              /* webpackChunkName: \"mainAsync\" */\n              '../validations');\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _importValidations.apply(this, arguments);\n}\n\nexport function toggleLibrary(tasks) {\n  return regeneratorRuntime.wrap(function toggleLibrary$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(validateCurrentProject, tasks);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function updateProjectSource(tasks, _ref) {\n  var _ref$payload, language, newValue, state, analyzer;\n\n  return regeneratorRuntime.wrap(function updateProjectSource$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref$payload = _ref.payload, language = _ref$payload.language, newValue = _ref$payload.newValue;\n          _context2.next = 3;\n          return select();\n\n        case 3:\n          state = _context2.sent;\n          analyzer = new Analyzer(getCurrentProject(state));\n          _context2.next = 7;\n          return call(validateSource, tasks, {\n            payload: {\n              language: language,\n              source: newValue,\n              projectAttributes: analyzer\n            }\n          });\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function validateCurrentProject(tasks) {\n  var state, currentProject, analyzer, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, language, source;\n\n  return regeneratorRuntime.wrap(function validateCurrentProject$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return select();\n\n        case 2:\n          state = _context3.sent;\n          currentProject = getCurrentProject(state);\n          analyzer = new Analyzer(currentProject);\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context3.prev = 8;\n          _iterator = Reflect.ownKeys(currentProject.sources)[Symbol.iterator]();\n\n        case 10:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context3.next = 18;\n            break;\n          }\n\n          language = _step.value;\n          source = currentProject.sources[language];\n          _context3.next = 15;\n          return fork(validateSource, tasks, {\n            payload: {\n              language: language,\n              source: source,\n              projectAttributes: analyzer\n            }\n          });\n\n        case 15:\n          _iteratorNormalCompletion = true;\n          _context3.next = 10;\n          break;\n\n        case 18:\n          _context3.next = 24;\n          break;\n\n        case 20:\n          _context3.prev = 20;\n          _context3.t0 = _context3[\"catch\"](8);\n          _didIteratorError = true;\n          _iteratorError = _context3.t0;\n\n        case 24:\n          _context3.prev = 24;\n          _context3.prev = 25;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 27:\n          _context3.prev = 27;\n\n          if (!_didIteratorError) {\n            _context3.next = 30;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 30:\n          return _context3.finish(27);\n\n        case 31:\n          return _context3.finish(24);\n\n        case 32:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[8, 20, 24, 32], [25,, 27, 31]]);\n}\nexport function validateSource(tasks, _ref2) {\n  var _ref2$payload, language, source, projectAttributes, validations, task, validationErrors;\n\n  return regeneratorRuntime.wrap(function validateSource$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, language = _ref2$payload.language, source = _ref2$payload.source, projectAttributes = _ref2$payload.projectAttributes;\n\n          if (!tasks.has(language)) {\n            _context4.next = 4;\n            break;\n          }\n\n          _context4.next = 4;\n          return cancel(tasks.get(language));\n\n        case 4:\n          _context4.next = 6;\n          return call(importValidations);\n\n        case 6:\n          validations = _context4.sent;\n          _context4.next = 9;\n          return fork(validations[language], source, projectAttributes);\n\n        case 9:\n          task = _context4.sent;\n          tasks.set(language, task);\n          _context4.next = 13;\n          return join(task);\n\n        case 13:\n          validationErrors = _context4.sent;\n          tasks.delete(language);\n          _context4.next = 17;\n          return put(validatedSource(language, validationErrors));\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport default function errors() {\n  var tasks;\n  return regeneratorRuntime.wrap(function errors$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          tasks = new Map();\n          _context5.next = 3;\n          return all([takeEvery('CHANGE_CURRENT_PROJECT', validateCurrentProject, tasks), takeEvery('GIST_IMPORTED', validateCurrentProject, tasks), takeEvery('SNAPSHOT_IMPORTED', validateCurrentProject, tasks), takeEvery('PROJECT_RESTORED_FROM_LAST_SESSION', validateCurrentProject, tasks), takeEvery('UPDATE_PROJECT_SOURCE', updateProjectSource, tasks), takeEvery('TOGGLE_LIBRARY', toggleLibrary, tasks)]);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/sagas/errors.js"],
    "names": [
      "toggleLibrary",
      "updateProjectSource",
      "validateCurrentProject",
      "validateSource",
      "errors",
      "all",
      "call",
      "cancel",
      "fork",
      "join",
      "put",
      "select",
      "takeEvery",
      "Analyzer",
      "getCurrentProject",
      "validatedSource",
      "retryingFailedImports",
      "importValidations",
      "tasks",
      "payload",
      "language",
      "newValue",
      "state",
      "analyzer",
      "source",
      "projectAttributes",
      "currentProject",
      "Reflect",
      "ownKeys",
      "sources",
      "has",
      "get",
      "validations",
      "task",
      "set",
      "validationErrors",
      "delete",
      "Map"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {\n  all,\n  call,\n  cancel,\n  fork,\n  join,\n  put,\n  select,\n  takeEvery,\n} from 'redux-saga/effects';\nimport Analyzer from '../analyzers';\nimport {getCurrentProject} from '../selectors';\nimport {validatedSource} from '../actions/errors';\nimport retryingFailedImports from '../util/retryingFailedImports';\n\nexport async function importValidations() {\n  return retryingFailedImports(() =>\n    import(\n      /* webpackChunkName: \"mainAsync\" */\n      '../validations'\n    ),\n  );\n}\n\nexport function* toggleLibrary(tasks) {\n  yield call(validateCurrentProject, tasks);\n}\n\nexport function* updateProjectSource(tasks, {payload: {language, newValue}}) {\n  const state = yield select();\n  const analyzer = new Analyzer(getCurrentProject(state));\n  yield call(validateSource, tasks, {\n    payload: {language, source: newValue, projectAttributes: analyzer},\n  });\n}\n\nexport function* validateCurrentProject(tasks) {\n  const state = yield select();\n  const currentProject = getCurrentProject(state);\n  const analyzer = new Analyzer(currentProject);\n\n  for (const language of Reflect.ownKeys(currentProject.sources)) {\n    const source = currentProject.sources[language];\n    yield fork(validateSource, tasks, {\n      payload: {language, source, projectAttributes: analyzer},\n    });\n  }\n}\n\nexport function* validateSource(\n  tasks,\n  {payload: {language, source, projectAttributes}},\n) {\n  if (tasks.has(language)) {\n    yield cancel(tasks.get(language));\n  }\n  const validations = yield call(importValidations);\n  const task = yield fork(validations[language], source, projectAttributes);\n  tasks.set(language, task);\n  const validationErrors = yield join(task);\n  tasks.delete(language);\n  yield put(validatedSource(language, validationErrors));\n}\n\nexport default function* errors() {\n  const tasks = new Map();\n\n  yield all([\n    takeEvery('CHANGE_CURRENT_PROJECT', validateCurrentProject, tasks),\n    takeEvery('GIST_IMPORTED', validateCurrentProject, tasks),\n    takeEvery('SNAPSHOT_IMPORTED', validateCurrentProject, tasks),\n    takeEvery(\n      'PROJECT_RESTORED_FROM_LAST_SESSION',\n      validateCurrentProject,\n      tasks,\n    ),\n    takeEvery('UPDATE_PROJECT_SOURCE', updateProjectSource, tasks),\n    takeEvery('TOGGLE_LIBRARY', toggleLibrary, tasks),\n  ]);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _marked =\n/*#__PURE__*/\nregeneratorRuntime.mark(openAssignmentCreator),\n    _marked2 =\n/*#__PURE__*/\nregeneratorRuntime.mark(createAssignment),\n    _marked3 =\n/*#__PURE__*/\nregeneratorRuntime.mark(assignments);\n\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects';\nimport { getCourses, createClassroomAssignment } from '../clients/googleClassroom';\nimport { createProjectSnapshot } from '../clients/firebase';\nimport { assignmentCreated, assignmentNotCreated } from '../actions/assignments';\nimport { coursesLoaded, coursesFullyLoaded } from '../actions/ui';\nimport { getCourse, getCurrentProject } from '../selectors';\nimport { generateTextPreview } from '../util/compileProject';\nimport { createSnapshotUrl } from '../util/exportUrls';\nexport function openAssignmentCreator() {\n  var pageToken, _ref, courses, nextPageToken;\n\n  return regeneratorRuntime.wrap(function openAssignmentCreator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(getCourses, pageToken);\n\n        case 2:\n          _ref = _context.sent;\n          courses = _ref.courses;\n          nextPageToken = _ref.nextPageToken;\n          _context.next = 7;\n          return put(coursesLoaded(courses));\n\n        case 7:\n          pageToken = nextPageToken;\n\n        case 8:\n          if (pageToken) {\n            _context.next = 0;\n            break;\n          }\n\n        case 9:\n          _context.next = 11;\n          return put(coursesFullyLoaded());\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function createAssignment(_ref2) {\n  var _ref2$payload, selectedCourseId, dueDate, assignmentState, project, snapshotKey, _ref3, _ref4, url, title, assignmentData, assignment, course;\n\n  return regeneratorRuntime.wrap(function createAssignment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2$payload = _ref2.payload, selectedCourseId = _ref2$payload.selectedCourseId, dueDate = _ref2$payload.dueDate, assignmentState = _ref2$payload.assignmentState;\n          _context2.next = 3;\n          return select(getCurrentProject);\n\n        case 3:\n          project = _context2.sent;\n          _context2.next = 6;\n          return call(createProjectSnapshot, project);\n\n        case 6:\n          snapshotKey = _context2.sent;\n          _context2.next = 9;\n          return all([call(createSnapshotUrl, snapshotKey), call(generateTextPreview, project)]);\n\n        case 9:\n          _ref3 = _context2.sent;\n          _ref4 = _slicedToArray(_ref3, 2);\n          url = _ref4[0];\n          title = _ref4[1];\n          assignmentData = {\n            courseId: selectedCourseId,\n            dueDate: dueDate,\n            url: url,\n            title: title,\n            state: assignmentState\n          };\n          _context2.prev = 14;\n          _context2.next = 17;\n          return call(createClassroomAssignment, assignmentData);\n\n        case 17:\n          assignment = _context2.sent;\n\n          if (!assignment.alternateLink) {\n            _context2.next = 23;\n            break;\n          }\n\n          _context2.next = 21;\n          return put(assignmentCreated({\n            url: assignment.alternateLink,\n            exportType: 'assignment'\n          }));\n\n        case 21:\n          _context2.next = 28;\n          break;\n\n        case 23:\n          _context2.next = 25;\n          return select(getCourse, selectedCourseId);\n\n        case 25:\n          course = _context2.sent;\n          _context2.next = 28;\n          return put(assignmentCreated({\n            url: course.alternateLink,\n            exportType: 'assignment-draft'\n          }));\n\n        case 28:\n          _context2.next = 34;\n          break;\n\n        case 30:\n          _context2.prev = 30;\n          _context2.t0 = _context2[\"catch\"](14);\n          _context2.next = 34;\n          return put(assignmentNotCreated());\n\n        case 34:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[14, 30]]);\n}\nexport default function assignments() {\n  return regeneratorRuntime.wrap(function assignments$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery('OPEN_ASSIGNMENT_CREATOR', openAssignmentCreator), takeEvery('CREATE_ASSIGNMENT', createAssignment)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/sagas/assignments.js"],
    "names": [
      "openAssignmentCreator",
      "createAssignment",
      "assignments",
      "all",
      "call",
      "put",
      "select",
      "takeEvery",
      "getCourses",
      "createClassroomAssignment",
      "createProjectSnapshot",
      "assignmentCreated",
      "assignmentNotCreated",
      "coursesLoaded",
      "coursesFullyLoaded",
      "getCourse",
      "getCurrentProject",
      "generateTextPreview",
      "createSnapshotUrl",
      "pageToken",
      "courses",
      "nextPageToken",
      "payload",
      "selectedCourseId",
      "dueDate",
      "assignmentState",
      "project",
      "snapshotKey",
      "url",
      "title",
      "assignmentData",
      "courseId",
      "state",
      "assignment",
      "alternateLink",
      "exportType",
      "course"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {all, call, put, select, takeEvery} from 'redux-saga/effects';\n\nimport {\n  getCourses,\n  createClassroomAssignment,\n} from '../clients/googleClassroom';\nimport {createProjectSnapshot} from '../clients/firebase';\nimport {assignmentCreated, assignmentNotCreated} from '../actions/assignments';\nimport {coursesLoaded, coursesFullyLoaded} from '../actions/ui';\nimport {getCourse, getCurrentProject} from '../selectors';\nimport {generateTextPreview} from '../util/compileProject';\nimport {createSnapshotUrl} from '../util/exportUrls';\n\nexport function* openAssignmentCreator() {\n  let pageToken;\n  do {\n    const {courses, nextPageToken} = yield call(getCourses, pageToken);\n    yield put(coursesLoaded(courses));\n    pageToken = nextPageToken;\n  } while (pageToken);\n  yield put(coursesFullyLoaded());\n}\n\nexport function* createAssignment({\n  payload: {selectedCourseId, dueDate, assignmentState},\n}) {\n  const project = yield select(getCurrentProject);\n  const snapshotKey = yield call(createProjectSnapshot, project);\n  const [url, title] = yield all([\n    call(createSnapshotUrl, snapshotKey),\n    call(generateTextPreview, project),\n  ]);\n  const assignmentData = {\n    courseId: selectedCourseId,\n    dueDate,\n    url,\n    title,\n    state: assignmentState,\n  };\n  try {\n    const assignment = yield call(createClassroomAssignment, assignmentData);\n    if (assignment.alternateLink) {\n      yield put(\n        assignmentCreated({\n          url: assignment.alternateLink,\n          exportType: 'assignment',\n        }),\n      );\n    } else {\n      const course = yield select(getCourse, selectedCourseId);\n      yield put(\n        assignmentCreated({\n          url: course.alternateLink,\n          exportType: 'assignment-draft',\n        }),\n      );\n    }\n  } catch (e) {\n    yield put(assignmentNotCreated());\n  }\n}\n\nexport default function* assignments() {\n  yield all([\n    takeEvery('OPEN_ASSIGNMENT_CREATOR', openAssignmentCreator),\n    takeEvery('CREATE_ASSIGNMENT', createAssignment),\n  ]);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

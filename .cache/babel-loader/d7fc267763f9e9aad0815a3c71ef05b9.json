{
  "ast": null,
  "code": "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport Slowparse from '../../util/slowparse';\nimport Validator from '../Validator';\nvar errorMap = {\n  ATTRIBUTE_IN_CLOSING_TAG: function ATTRIBUTE_IN_CLOSING_TAG(error) {\n    return {\n      reason: 'attribute-in-closing-tag',\n      payload: {\n        tag: error.closeTag.name\n      }\n    };\n  },\n  CLOSE_TAG_FOR_VOID_ELEMENT: function CLOSE_TAG_FOR_VOID_ELEMENT(error) {\n    return {\n      reason: 'close-tag-for-void-element',\n      payload: {\n        tag: error.closeTag.name\n      }\n    };\n  },\n  EMPTY_TITLE_ELEMENT: function EMPTY_TITLE_ELEMENT() {\n    return {\n      reason: 'empty-title-element',\n      suppresses: ['missing-title']\n    };\n  },\n  HTML_CODE_IN_CSS_BLOCK: function HTML_CODE_IN_CSS_BLOCK() {\n    return {\n      reason: 'html-in-css-block'\n    };\n  },\n  INVALID_ATTR_NAME: function INVALID_ATTR_NAME(error) {\n    return {\n      reason: 'invalid-attribute-name',\n      payload: {\n        attribute: error.attribute.name.value\n      },\n      suppresses: ['lower-case-attribute-name']\n    };\n  },\n  INVALID_TAG_NAME: function INVALID_TAG_NAME(error, source) {\n    var tagName = error.openTag.name;\n\n    if (tagName === '') {\n      var tagMatch = /^<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+([\\x2D0-9A-Za-z]+)/.exec(source.slice(error.openTag.start));\n\n      if (tagMatch) {\n        return {\n          reason: 'space-before-tag-name',\n          payload: {\n            tag: tagMatch[1]\n          },\n          suppresses: ['unexpected-close-tag']\n        };\n      }\n    }\n\n    return {\n      reason: 'invalid-tag-name',\n      payload: {\n        tag: error.openTag.name\n      }\n    };\n  },\n  UNSUPPORTED_ATTR_NAMESPACE: function UNSUPPORTED_ATTR_NAMESPACE(error) {\n    return {\n      reason: 'invalid-attribute-name',\n      payload: {\n        attribute: error.attribute.name.value\n      },\n      suppresses: ['lower-case-attribute-name']\n    };\n  },\n  MULTIPLE_ATTR_NAMESPACES: function MULTIPLE_ATTR_NAMESPACES(error) {\n    return {\n      reason: 'invalid-attribute-name',\n      payload: {\n        attribute: error.attribute.name.value\n      },\n      suppresses: ['lower-case-attribute-name']\n    };\n  },\n  SELF_CLOSING_NON_VOID_ELEMENT: function SELF_CLOSING_NON_VOID_ELEMENT(error) {\n    return {\n      reason: 'self-closing-non-void-element',\n      payload: {\n        tag: error.name\n      }\n    };\n  },\n  UNCLOSED_TAG: function UNCLOSED_TAG(error) {\n    return {\n      reason: 'unclosed-tag',\n      payload: {\n        tag: error.openTag.name\n      }\n    };\n  },\n  UNEXPECTED_CLOSE_TAG: function UNEXPECTED_CLOSE_TAG(error) {\n    return {\n      reason: 'unexpected-close-tag',\n      payload: {\n        tag: error.closeTag.name\n      }\n    };\n  },\n  UNTERMINATED_ATTR_VALUE: function UNTERMINATED_ATTR_VALUE(error) {\n    return {\n      reason: 'unterminated-attribute-value',\n      payload: {\n        attribute: error.attribute.name.value,\n        tag: error.openTag.name\n      }\n    };\n  },\n  UNTERMINATED_OPEN_TAG: function UNTERMINATED_OPEN_TAG(error) {\n    return {\n      reason: 'unterminated-open-tag',\n      payload: {\n        tag: error.openTag.name\n      },\n      suppresses: ['attribute-value', 'lower-case', 'lower-case-attribute-name']\n    };\n  },\n  UNTERMINATED_CLOSE_TAG: function UNTERMINATED_CLOSE_TAG(error) {\n    return {\n      reason: 'unterminated-close-tag',\n      payload: {\n        tag: error.closeTag.name\n      },\n      suppresses: ['unclosed-tag']\n    };\n  },\n  UNTERMINATED_COMMENT: function UNTERMINATED_COMMENT() {\n    return {\n      reason: 'unterminated-comment'\n    };\n  },\n  UNBOUND_ATTRIBUTE_VALUE: function UNBOUND_ATTRIBUTE_VALUE(error) {\n    return {\n      reason: 'unbound-attribute-value',\n      payload: {\n        value: error.value\n      },\n      suppresses: ['attribute-value', 'lower-case-attribute-name']\n    };\n  }\n};\n\nfunction findChildNode(_ref, nodeName) {\n  var childNodes = _ref.childNodes;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = childNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var node = _step.value;\n\n      if (node.nodeName === nodeName) {\n        return node;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction emptyTitleElementDetector(_, root) {\n  var html = findChildNode(root, 'HTML');\n  var head = html ? findChildNode(html, 'HEAD') : null;\n  var title = head ? findChildNode(head, 'TITLE') : null;\n  return title && !title.childNodes.length ? {\n    type: 'EMPTY_TITLE_ELEMENT',\n    cursor: title.parseInfo.openTag.end\n  } : null;\n}\n\nvar errorDetectors = [emptyTitleElementDetector];\n\nvar SlowparseValidator =\n/*#__PURE__*/\nfunction (_Validator) {\n  _inherits(SlowparseValidator, _Validator);\n\n  function SlowparseValidator(source) {\n    _classCallCheck(this, SlowparseValidator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SlowparseValidator).call(this, source, 'html', errorMap));\n  }\n\n  _createClass(SlowparseValidator, [{\n    key: \"getRawErrors\",\n    value: function () {\n      var _getRawErrors = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var error, _Slowparse$HTML;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  _Slowparse$HTML = Slowparse.HTML(document, this.source, {\n                    errorDetectors: errorDetectors\n                  });\n                  error = _Slowparse$HTML.error;\n                } catch (e) {\n                  error = null;\n                }\n\n                if (!(error !== null)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", [error]);\n\n              case 3:\n                return _context.abrupt(\"return\", []);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRawErrors() {\n        return _getRawErrors.apply(this, arguments);\n      }\n\n      return getRawErrors;\n    }()\n  }, {\n    key: \"keyForError\",\n    value: function keyForError(error) {\n      return error.type;\n    }\n  }, {\n    key: \"locationForError\",\n    value: function locationForError(error) {\n      var lines = this.source.slice(0, error.cursor).split('\\n');\n      var row = lines.length - 1;\n      var column = lines[row].length - 1;\n      return {\n        row: row,\n        column: column\n      };\n    }\n  }]);\n\n  return SlowparseValidator;\n}(Validator);\n\nexport default (function (source) {\n  return new SlowparseValidator(source).getAnnotations();\n});",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/validations/html/slowparse.js"
    ],
    "names": [
      "Slowparse",
      "Validator",
      "errorMap",
      "ATTRIBUTE_IN_CLOSING_TAG",
      "error",
      "reason",
      "payload",
      "tag",
      "closeTag",
      "name",
      "CLOSE_TAG_FOR_VOID_ELEMENT",
      "EMPTY_TITLE_ELEMENT",
      "suppresses",
      "HTML_CODE_IN_CSS_BLOCK",
      "INVALID_ATTR_NAME",
      "attribute",
      "value",
      "INVALID_TAG_NAME",
      "source",
      "tagName",
      "openTag",
      "tagMatch",
      "exec",
      "slice",
      "start",
      "UNSUPPORTED_ATTR_NAMESPACE",
      "MULTIPLE_ATTR_NAMESPACES",
      "SELF_CLOSING_NON_VOID_ELEMENT",
      "UNCLOSED_TAG",
      "UNEXPECTED_CLOSE_TAG",
      "UNTERMINATED_ATTR_VALUE",
      "UNTERMINATED_OPEN_TAG",
      "UNTERMINATED_CLOSE_TAG",
      "UNTERMINATED_COMMENT",
      "UNBOUND_ATTRIBUTE_VALUE",
      "findChildNode",
      "nodeName",
      "childNodes",
      "node",
      "emptyTitleElementDetector",
      "_",
      "root",
      "html",
      "head",
      "title",
      "length",
      "type",
      "cursor",
      "parseInfo",
      "end",
      "errorDetectors",
      "SlowparseValidator",
      "HTML",
      "document",
      "e",
      "lines",
      "split",
      "row",
      "column",
      "getAnnotations"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import Slowparse from '../../util/slowparse';\nimport Validator from '../Validator';\n\nconst errorMap = {\n  ATTRIBUTE_IN_CLOSING_TAG: error => ({\n    reason: 'attribute-in-closing-tag',\n    payload: {tag: error.closeTag.name},\n  }),\n\n  CLOSE_TAG_FOR_VOID_ELEMENT: error => ({\n    reason: 'close-tag-for-void-element',\n    payload: {tag: error.closeTag.name},\n  }),\n\n  EMPTY_TITLE_ELEMENT: () => ({\n    reason: 'empty-title-element',\n    suppresses: ['missing-title'],\n  }),\n\n  HTML_CODE_IN_CSS_BLOCK: () => ({reason: 'html-in-css-block'}),\n\n  INVALID_ATTR_NAME: error => ({\n    reason: 'invalid-attribute-name',\n    payload: {attribute: error.attribute.name.value},\n    suppresses: ['lower-case-attribute-name'],\n  }),\n\n  INVALID_TAG_NAME: (error, source) => {\n    const tagName = error.openTag.name;\n    if (tagName === '') {\n      const tagMatch = /^<\\s+([A-Za-z0-9-]+)/u.exec(\n        source.slice(error.openTag.start),\n      );\n      if (tagMatch) {\n        return {\n          reason: 'space-before-tag-name',\n          payload: {tag: tagMatch[1]},\n          suppresses: ['unexpected-close-tag'],\n        };\n      }\n    }\n\n    return {\n      reason: 'invalid-tag-name',\n      payload: {tag: error.openTag.name},\n    };\n  },\n\n  UNSUPPORTED_ATTR_NAMESPACE: error => ({\n    reason: 'invalid-attribute-name',\n    payload: {attribute: error.attribute.name.value},\n    suppresses: ['lower-case-attribute-name'],\n  }),\n\n  MULTIPLE_ATTR_NAMESPACES: error => ({\n    reason: 'invalid-attribute-name',\n    payload: {attribute: error.attribute.name.value},\n    suppresses: ['lower-case-attribute-name'],\n  }),\n\n  SELF_CLOSING_NON_VOID_ELEMENT: error => ({\n    reason: 'self-closing-non-void-element',\n    payload: {tag: error.name},\n  }),\n\n  UNCLOSED_TAG: error => ({\n    reason: 'unclosed-tag',\n    payload: {tag: error.openTag.name},\n  }),\n\n  UNEXPECTED_CLOSE_TAG: error => ({\n    reason: 'unexpected-close-tag',\n    payload: {tag: error.closeTag.name},\n  }),\n\n  UNTERMINATED_ATTR_VALUE: error => ({\n    reason: 'unterminated-attribute-value',\n    payload: {attribute: error.attribute.name.value, tag: error.openTag.name},\n  }),\n\n  UNTERMINATED_OPEN_TAG: error => ({\n    reason: 'unterminated-open-tag',\n    payload: {tag: error.openTag.name},\n    suppresses: ['attribute-value', 'lower-case', 'lower-case-attribute-name'],\n  }),\n\n  UNTERMINATED_CLOSE_TAG: error => ({\n    reason: 'unterminated-close-tag',\n    payload: {tag: error.closeTag.name},\n    suppresses: ['unclosed-tag'],\n  }),\n\n  UNTERMINATED_COMMENT: () => ({reason: 'unterminated-comment'}),\n\n  UNBOUND_ATTRIBUTE_VALUE: error => ({\n    reason: 'unbound-attribute-value',\n    payload: {value: error.value},\n    suppresses: ['attribute-value', 'lower-case-attribute-name'],\n  }),\n};\n\nfunction findChildNode({childNodes}, nodeName) {\n  for (const node of childNodes) {\n    if (node.nodeName === nodeName) {\n      return node;\n    }\n  }\n  return null;\n}\n\nfunction emptyTitleElementDetector(_, root) {\n  const html = findChildNode(root, 'HTML');\n  const head = html ? findChildNode(html, 'HEAD') : null;\n  const title = head ? findChildNode(head, 'TITLE') : null;\n  return title && !title.childNodes.length\n    ? {type: 'EMPTY_TITLE_ELEMENT', cursor: title.parseInfo.openTag.end}\n    : null;\n}\n\nconst errorDetectors = [emptyTitleElementDetector];\n\nclass SlowparseValidator extends Validator {\n  constructor(source) {\n    super(source, 'html', errorMap);\n  }\n\n  async getRawErrors() {\n    let error;\n    try {\n      ({error} = Slowparse.HTML(document, this.source, {errorDetectors}));\n    } catch (e) {\n      error = null;\n    }\n\n    if (error !== null) {\n      return [error];\n    }\n\n    return [];\n  }\n\n  keyForError(error) {\n    return error.type;\n  }\n\n  locationForError(error) {\n    const lines = this.source.slice(0, error.cursor).split('\\n');\n    const row = lines.length - 1;\n    const column = lines[row].length - 1;\n    return {row, column};\n  }\n}\n\nexport default source => new SlowparseValidator(source).getAnnotations();\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

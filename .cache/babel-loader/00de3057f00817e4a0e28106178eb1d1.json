{
  "ast": null,
  "code": "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport bindAll from 'lodash-es/bindAll';\nimport get from 'lodash-es/get';\nimport isNil from 'lodash-es/isNil';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport preventClickthrough from 'react-prevent-clickthrough';\nimport { EditorLocation } from '../records';\nimport { createAceEditor, createAceSessionWithoutWorker, inheritFontStylesFromParentElement } from '../util/ace';\n\nvar ConsoleInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConsoleInput, _Component);\n\n  function ConsoleInput() {\n    var _this;\n\n    _classCallCheck(this, ConsoleInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConsoleInput).call(this));\n    bindAll(_assertThisInitialized(_this), '_ref');\n    return _this;\n  }\n\n  _createClass(ConsoleInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref2) {\n      var _this2 = this;\n\n      var prevIsTextSizeLarge = _ref2.isTextSizeLarge;\n      var _this$props = this.props,\n          isTextSizeLarge = _this$props.isTextSizeLarge,\n          requestedFocusedLine = _this$props.requestedFocusedLine,\n          currentInputValue = _this$props.currentInputValue;\n\n      if (isTextSizeLarge !== prevIsTextSizeLarge) {\n        requestAnimationFrame(function () {\n          inheritFontStylesFromParentElement(_this2._editor);\n        });\n      }\n\n      this._focusRequestedLine(requestedFocusedLine);\n\n      if (currentInputValue !== this._editor.getValue()) {\n        this._editor.setValue(currentInputValue, 1);\n      }\n    }\n  }, {\n    key: \"_focusRequestedLine\",\n    value: function _focusRequestedLine(requestedFocusedLine) {\n      if (get(requestedFocusedLine, 'component') !== 'console') {\n        return;\n      }\n\n      this._editor.navigateLineEnd();\n\n      this._editor.focus();\n\n      this.props.onRequestedLineFocused();\n    }\n  }, {\n    key: \"_ref\",\n    value: function _ref(containerElement) {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          onChange = _this$props2.onChange,\n          onInput = _this$props2.onInput,\n          onNextConsoleHistory = _this$props2.onNextConsoleHistory,\n          onPreviousConsoleHistory = _this$props2.onPreviousConsoleHistory;\n\n      if (containerElement) {\n        var editor = this._editor = createAceEditor(containerElement);\n        var session = createAceSessionWithoutWorker('javascript');\n        editor.setSession(session);\n        editor.renderer.setShowGutter(false);\n        editor.moveCursorTo(0, 0);\n        editor.setOptions({\n          highlightActiveLine: false,\n          maxLines: 1,\n          minLines: 1\n        });\n        editor.resize();\n        editor.focus();\n        editor.commands.addCommand({\n          name: 'historyPrevious',\n          bindKey: 'Up',\n          exec: function exec() {\n            onPreviousConsoleHistory();\n          }\n        });\n        editor.commands.addCommand({\n          name: 'historyNext',\n          bindKey: 'Down',\n          exec: function exec() {\n            onNextConsoleHistory();\n          }\n        });\n        session.on('change', function (_ref3) {\n          var action = _ref3.action,\n              lines = _ref3.lines;\n          var programmaticEdit = ['historyNext', 'historyPrevious'].includes(editor.curOp.command.name);\n\n          if (programmaticEdit) {\n            return;\n          }\n\n          var value = editor.getValue().replace('\\n', '');\n          var submitted = action === 'insert' && lines.length === 2;\n\n          if (submitted) {\n            onInput(value);\n            return;\n          }\n\n          if (value !== _this3.props.currentInputValue) {\n            onChange(value);\n          }\n        });\n      } else if (!isNil(this._editor)) {\n        this._editor.destroy();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"console__row console__input\",\n        onClick: preventClickthrough\n      }, React.createElement(\"div\", {\n        className: \"console__chevron console__chevron_blue\"\n      }, React.createElement(FontAwesomeIcon, {\n        icon: faChevronRight\n      })), React.createElement(\"div\", {\n        className: \"console__editor\",\n        ref: this._ref\n      }));\n    }\n  }]);\n\n  return ConsoleInput;\n}(Component);\n\nexport { ConsoleInput as default };\nConsoleInput.propTypes = {\n  currentInputValue: PropTypes.string.isRequired,\n  isTextSizeLarge: PropTypes.bool,\n  requestedFocusedLine: PropTypes.instanceOf(EditorLocation),\n  onChange: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onNextConsoleHistory: PropTypes.func.isRequired,\n  onPreviousConsoleHistory: PropTypes.func.isRequired,\n  onRequestedLineFocused: PropTypes.func.isRequired\n};\nConsoleInput.defaultProps = {\n  requestedFocusedLine: null,\n  isTextSizeLarge: false\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/components/ConsoleInput.jsx"
    ],
    "names": [
      "faChevronRight",
      "FontAwesomeIcon",
      "bindAll",
      "get",
      "isNil",
      "React",
      "Component",
      "PropTypes",
      "preventClickthrough",
      "EditorLocation",
      "createAceEditor",
      "createAceSessionWithoutWorker",
      "inheritFontStylesFromParentElement",
      "ConsoleInput",
      "prevIsTextSizeLarge",
      "isTextSizeLarge",
      "props",
      "requestedFocusedLine",
      "currentInputValue",
      "requestAnimationFrame",
      "_editor",
      "_focusRequestedLine",
      "getValue",
      "setValue",
      "navigateLineEnd",
      "focus",
      "onRequestedLineFocused",
      "containerElement",
      "onChange",
      "onInput",
      "onNextConsoleHistory",
      "onPreviousConsoleHistory",
      "editor",
      "session",
      "setSession",
      "renderer",
      "setShowGutter",
      "moveCursorTo",
      "setOptions",
      "highlightActiveLine",
      "maxLines",
      "minLines",
      "resize",
      "commands",
      "addCommand",
      "name",
      "bindKey",
      "exec",
      "on",
      "action",
      "lines",
      "programmaticEdit",
      "includes",
      "curOp",
      "command",
      "value",
      "replace",
      "submitted",
      "length",
      "destroy",
      "_ref",
      "propTypes",
      "string",
      "isRequired",
      "bool",
      "instanceOf",
      "func",
      "defaultProps"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {faChevronRight} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport bindAll from 'lodash-es/bindAll';\nimport get from 'lodash-es/get';\nimport isNil from 'lodash-es/isNil';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport preventClickthrough from 'react-prevent-clickthrough';\n\nimport {EditorLocation} from '../records';\nimport {\n  createAceEditor,\n  createAceSessionWithoutWorker,\n  inheritFontStylesFromParentElement,\n} from '../util/ace';\n\nexport default class ConsoleInput extends Component {\n  constructor() {\n    super();\n    bindAll(this, '_ref');\n  }\n\n  componentDidUpdate({isTextSizeLarge: prevIsTextSizeLarge}) {\n    const {\n      isTextSizeLarge,\n      requestedFocusedLine,\n      currentInputValue,\n    } = this.props;\n\n    if (isTextSizeLarge !== prevIsTextSizeLarge) {\n      requestAnimationFrame(() => {\n        inheritFontStylesFromParentElement(this._editor);\n      });\n    }\n\n    this._focusRequestedLine(requestedFocusedLine);\n\n    if (currentInputValue !== this._editor.getValue()) {\n      this._editor.setValue(currentInputValue, 1);\n    }\n  }\n\n  _focusRequestedLine(requestedFocusedLine) {\n    if (get(requestedFocusedLine, 'component') !== 'console') {\n      return;\n    }\n\n    this._editor.navigateLineEnd();\n    this._editor.focus();\n    this.props.onRequestedLineFocused();\n  }\n\n  _ref(containerElement) {\n    const {\n      onChange,\n      onInput,\n      onNextConsoleHistory,\n      onPreviousConsoleHistory,\n    } = this.props;\n\n    if (containerElement) {\n      const editor = (this._editor = createAceEditor(containerElement));\n      const session = createAceSessionWithoutWorker('javascript');\n      editor.setSession(session);\n      editor.renderer.setShowGutter(false);\n      editor.moveCursorTo(0, 0);\n      editor.setOptions({\n        highlightActiveLine: false,\n        maxLines: 1,\n        minLines: 1,\n      });\n      editor.resize();\n      editor.focus();\n\n      editor.commands.addCommand({\n        name: 'historyPrevious',\n        bindKey: 'Up',\n        exec: () => {\n          onPreviousConsoleHistory();\n        },\n      });\n\n      editor.commands.addCommand({\n        name: 'historyNext',\n        bindKey: 'Down',\n        exec: () => {\n          onNextConsoleHistory();\n        },\n      });\n\n      session.on('change', ({action, lines}) => {\n        const programmaticEdit = ['historyNext', 'historyPrevious'].includes(\n          editor.curOp.command.name,\n        );\n\n        if (programmaticEdit) {\n          return;\n        }\n\n        const value = editor.getValue().replace('\\n', '');\n        const submitted = action === 'insert' && lines.length === 2;\n\n        if (submitted) {\n          onInput(value);\n          return;\n        }\n\n        if (value !== this.props.currentInputValue) {\n          onChange(value);\n        }\n      });\n    } else if (!isNil(this._editor)) {\n      this._editor.destroy();\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"console__row console__input\"\n        onClick={preventClickthrough}\n      >\n        <div className=\"console__chevron console__chevron_blue\">\n          <FontAwesomeIcon icon={faChevronRight} />\n        </div>\n        <div className=\"console__editor\" ref={this._ref} />\n      </div>\n    );\n  }\n}\n\nConsoleInput.propTypes = {\n  currentInputValue: PropTypes.string.isRequired,\n  isTextSizeLarge: PropTypes.bool,\n  requestedFocusedLine: PropTypes.instanceOf(EditorLocation),\n  onChange: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onNextConsoleHistory: PropTypes.func.isRequired,\n  onPreviousConsoleHistory: PropTypes.func.isRequired,\n  onRequestedLineFocused: PropTypes.func.isRequired,\n};\n\nConsoleInput.defaultProps = {\n  requestedFocusedLine: null,\n  isTextSizeLarge: false,\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

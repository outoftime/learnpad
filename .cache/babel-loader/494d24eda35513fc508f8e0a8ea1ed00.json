{
  "ast": null,
  "code": "import { List } from 'immutable';\nimport map from 'lodash-es/map';\nimport { Error, ErrorList, ErrorReport } from '../records';\nvar passedLanguageErrors = new ErrorList();\nvar validatingLanguageErrors = new ErrorList({\n  state: 'validating'\n});\n\nfunction buildFailedLanguageErrors(errorList) {\n  return new ErrorList({\n    items: new List(map(errorList, function (error) {\n      return Error.fromJS(error);\n    })),\n    state: 'validation-error'\n  });\n}\n\nvar validatingErrors = new ErrorReport({\n  html: validatingLanguageErrors,\n  css: validatingLanguageErrors,\n  javascript: validatingLanguageErrors\n});\nvar emptyErrors = new ErrorReport({\n  html: passedLanguageErrors,\n  css: passedLanguageErrors,\n  javascript: passedLanguageErrors\n});\n\nfunction errors(stateIn, action) {\n  var state = stateIn;\n\n  if (state === undefined) {\n    state = emptyErrors;\n  }\n\n  switch (action.type) {\n    case 'PROJECT_CREATED':\n      return emptyErrors;\n\n    case 'CHANGE_CURRENT_PROJECT':\n      return validatingErrors;\n\n    case 'GIST_IMPORTED':\n      return validatingErrors;\n\n    case 'SNAPSHOT_IMPORTED':\n      return validatingErrors;\n\n    case 'TOGGLE_LIBRARY':\n      return validatingErrors;\n\n    case 'UPDATE_PROJECT_SOURCE':\n      return state.set(action.payload.language, validatingLanguageErrors);\n\n    case 'ADD_RUNTIME_ERROR':\n      return state.update(action.payload.language, function (list) {\n        return list.update('items', function (items) {\n          return items.push(Error.fromJS(action.payload.error)).sortBy(function (error) {\n            return error.get('row');\n          });\n        }).set('state', 'runtime-error');\n      });\n\n    case 'VALIDATED_SOURCE':\n      if (action.payload.errors.length) {\n        return state.set(action.payload.language, buildFailedLanguageErrors(action.payload.errors));\n      }\n\n      return state.set(action.payload.language, passedLanguageErrors);\n\n    case 'REFRESH_PREVIEW':\n      return state.update('javascript', function (errorList) {\n        if (errorList.state === 'runtime-error') {\n          return passedLanguageErrors;\n        }\n\n        return errorList;\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default errors;",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/reducers/errors.js"],
    "names": [
      "List",
      "map",
      "Error",
      "ErrorList",
      "ErrorReport",
      "passedLanguageErrors",
      "validatingLanguageErrors",
      "state",
      "buildFailedLanguageErrors",
      "errorList",
      "items",
      "error",
      "fromJS",
      "validatingErrors",
      "html",
      "css",
      "javascript",
      "emptyErrors",
      "errors",
      "stateIn",
      "action",
      "undefined",
      "type",
      "set",
      "payload",
      "language",
      "update",
      "list",
      "push",
      "sortBy",
      "get",
      "length"
    ],
    "mappings": "AAAA,SAAQA,IAAR,QAAmB,WAAnB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AAEA,SAAQC,KAAR,EAAeC,SAAf,EAA0BC,WAA1B,QAA4C,YAA5C;AAEA,IAAMC,oBAAoB,GAAG,IAAIF,SAAJ,EAA7B;AAEA,IAAMG,wBAAwB,GAAG,IAAIH,SAAJ,CAAc;AAACI,EAAAA,KAAK,EAAE;AAAR,CAAd,CAAjC;;AAEA,SAASC,yBAAT,CAAmCC,SAAnC,EAA8C;AAC5C,SAAO,IAAIN,SAAJ,CAAc;AACnBO,IAAAA,KAAK,EAAE,IAAIV,IAAJ,CAASC,GAAG,CAACQ,SAAD,EAAY,UAAAE,KAAK;AAAA,aAAIT,KAAK,CAACU,MAAN,CAAaD,KAAb,CAAJ;AAAA,KAAjB,CAAZ,CADY;AAEnBJ,IAAAA,KAAK,EAAE;AAFY,GAAd,CAAP;AAID;;AAED,IAAMM,gBAAgB,GAAG,IAAIT,WAAJ,CAAgB;AACvCU,EAAAA,IAAI,EAAER,wBADiC;AAEvCS,EAAAA,GAAG,EAAET,wBAFkC;AAGvCU,EAAAA,UAAU,EAAEV;AAH2B,CAAhB,CAAzB;AAMA,IAAMW,WAAW,GAAG,IAAIb,WAAJ,CAAgB;AAClCU,EAAAA,IAAI,EAAET,oBAD4B;AAElCU,EAAAA,GAAG,EAAEV,oBAF6B;AAGlCW,EAAAA,UAAU,EAAEX;AAHsB,CAAhB,CAApB;;AAMA,SAASa,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AAC/B,MAAIb,KAAK,GAAGY,OAAZ;;AACA,MAAIZ,KAAK,KAAKc,SAAd,EAAyB;AACvBd,IAAAA,KAAK,GAAGU,WAAR;AACD;;AAED,UAAQG,MAAM,CAACE,IAAf;AACE,SAAK,iBAAL;AACE,aAAOL,WAAP;;AAEF,SAAK,wBAAL;AACE,aAAOJ,gBAAP;;AAEF,SAAK,eAAL;AACE,aAAOA,gBAAP;;AAEF,SAAK,mBAAL;AACE,aAAOA,gBAAP;;AAEF,SAAK,gBAAL;AACE,aAAOA,gBAAP;;AAEF,SAAK,uBAAL;AACE,aAAON,KAAK,CAACgB,GAAN,CAAUH,MAAM,CAACI,OAAP,CAAeC,QAAzB,EAAmCnB,wBAAnC,CAAP;;AAEF,SAAK,mBAAL;AACE,aAAOC,KAAK,CAACmB,MAAN,CAAaN,MAAM,CAACI,OAAP,CAAeC,QAA5B,EAAsC,UAAAE,IAAI;AAAA,eAC/CA,IAAI,CACDD,MADH,CACU,OADV,EACmB,UAAAhB,KAAK;AAAA,iBACpBA,KAAK,CACFkB,IADH,CACQ1B,KAAK,CAACU,MAAN,CAAaQ,MAAM,CAACI,OAAP,CAAeb,KAA5B,CADR,EAEGkB,MAFH,CAEU,UAAAlB,KAAK;AAAA,mBAAIA,KAAK,CAACmB,GAAN,CAAU,KAAV,CAAJ;AAAA,WAFf,CADoB;AAAA,SADxB,EAMGP,GANH,CAMO,OANP,EAMgB,eANhB,CAD+C;AAAA,OAA1C,CAAP;;AAUF,SAAK,kBAAL;AACE,UAAIH,MAAM,CAACI,OAAP,CAAeN,MAAf,CAAsBa,MAA1B,EAAkC;AAChC,eAAOxB,KAAK,CAACgB,GAAN,CACLH,MAAM,CAACI,OAAP,CAAeC,QADV,EAELjB,yBAAyB,CAACY,MAAM,CAACI,OAAP,CAAeN,MAAhB,CAFpB,CAAP;AAID;;AACD,aAAOX,KAAK,CAACgB,GAAN,CAAUH,MAAM,CAACI,OAAP,CAAeC,QAAzB,EAAmCpB,oBAAnC,CAAP;;AAEF,SAAK,iBAAL;AACE,aAAOE,KAAK,CAACmB,MAAN,CAAa,YAAb,EAA2B,UAAAjB,SAAS,EAAI;AAC7C,YAAIA,SAAS,CAACF,KAAV,KAAoB,eAAxB,EAAyC;AACvC,iBAAOF,oBAAP;AACD;;AACD,eAAOI,SAAP;AACD,OALM,CAAP;;AAOF;AACE,aAAOF,KAAP;AAhDJ;AAkDD;;AAED,eAAeW,MAAf",
    "sourcesContent": [
      "import {List} from 'immutable';\nimport map from 'lodash-es/map';\n\nimport {Error, ErrorList, ErrorReport} from '../records';\n\nconst passedLanguageErrors = new ErrorList();\n\nconst validatingLanguageErrors = new ErrorList({state: 'validating'});\n\nfunction buildFailedLanguageErrors(errorList) {\n  return new ErrorList({\n    items: new List(map(errorList, error => Error.fromJS(error))),\n    state: 'validation-error',\n  });\n}\n\nconst validatingErrors = new ErrorReport({\n  html: validatingLanguageErrors,\n  css: validatingLanguageErrors,\n  javascript: validatingLanguageErrors,\n});\n\nconst emptyErrors = new ErrorReport({\n  html: passedLanguageErrors,\n  css: passedLanguageErrors,\n  javascript: passedLanguageErrors,\n});\n\nfunction errors(stateIn, action) {\n  let state = stateIn;\n  if (state === undefined) {\n    state = emptyErrors;\n  }\n\n  switch (action.type) {\n    case 'PROJECT_CREATED':\n      return emptyErrors;\n\n    case 'CHANGE_CURRENT_PROJECT':\n      return validatingErrors;\n\n    case 'GIST_IMPORTED':\n      return validatingErrors;\n\n    case 'SNAPSHOT_IMPORTED':\n      return validatingErrors;\n\n    case 'TOGGLE_LIBRARY':\n      return validatingErrors;\n\n    case 'UPDATE_PROJECT_SOURCE':\n      return state.set(action.payload.language, validatingLanguageErrors);\n\n    case 'ADD_RUNTIME_ERROR':\n      return state.update(action.payload.language, list =>\n        list\n          .update('items', items =>\n            items\n              .push(Error.fromJS(action.payload.error))\n              .sortBy(error => error.get('row')),\n          )\n          .set('state', 'runtime-error'),\n      );\n\n    case 'VALIDATED_SOURCE':\n      if (action.payload.errors.length) {\n        return state.set(\n          action.payload.language,\n          buildFailedLanguageErrors(action.payload.errors),\n        );\n      }\n      return state.set(action.payload.language, passedLanguageErrors);\n\n    case 'REFRESH_PREVIEW':\n      return state.update('javascript', errorList => {\n        if (errorList.state === 'runtime-error') {\n          return passedLanguageErrors;\n        }\n        return errorList;\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default errors;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

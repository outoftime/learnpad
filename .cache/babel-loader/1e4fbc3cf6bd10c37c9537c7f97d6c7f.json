{
  "ast": null,
  "code": "var _marked =\n/*#__PURE__*/\nregeneratorRuntime.mark(startAccountMigration),\n    _marked2 =\n/*#__PURE__*/\nregeneratorRuntime.mark(logOut),\n    _marked3 =\n/*#__PURE__*/\nregeneratorRuntime.mark(user);\n\nimport { bugsnagClient } from '../util/bugsnag';\nimport { all, call, delay, put, race, select, take, takeEvery } from 'redux-saga/effects';\nimport { accountMigrationComplete, accountMigrationUndoPeriodExpired, accountMigrationError } from '../actions/user';\nimport { getCurrentAccountMigration } from '../selectors';\nimport { migrateAccount, signOut } from '../clients/firebase';\nexport function startAccountMigration() {\n  var _ref, shouldContinue, _ref2, firebaseCredential, _ref3, userData, migratedProjects;\n\n  return regeneratorRuntime.wrap(function startAccountMigration$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return race({\n            shouldContinue: delay(5000, true),\n            cancel: take('DISMISS_ACCOUNT_MIGRATION')\n          });\n\n        case 2:\n          _ref = _context.sent;\n          shouldContinue = _ref.shouldContinue;\n\n          if (shouldContinue) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 6:\n          _context.next = 8;\n          return put(accountMigrationUndoPeriodExpired());\n\n        case 8:\n          _context.next = 10;\n          return select(getCurrentAccountMigration);\n\n        case 10:\n          _ref2 = _context.sent;\n          firebaseCredential = _ref2.firebaseCredential;\n          _context.prev = 12;\n          _context.next = 15;\n          return call(migrateAccount, firebaseCredential);\n\n        case 15:\n          _ref3 = _context.sent;\n          userData = _ref3.user;\n          migratedProjects = _ref3.migratedProjects;\n          _context.next = 20;\n          return put(accountMigrationComplete(userData, firebaseCredential, migratedProjects));\n\n        case 20:\n          _context.next = 28;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](12);\n          _context.next = 26;\n          return call([bugsnagClient, 'notify'], _context.t0);\n\n        case 26:\n          _context.next = 28;\n          return put(accountMigrationError(_context.t0));\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[12, 22]]);\n}\nexport function logOut() {\n  return regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return call(signOut);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function user() {\n  return regeneratorRuntime.wrap(function user$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery('LOG_OUT', logOut), takeEvery('START_ACCOUNT_MIGRATION', startAccountMigration)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/sagas/user.js"],
    "names": [
      "startAccountMigration",
      "logOut",
      "user",
      "bugsnagClient",
      "all",
      "call",
      "delay",
      "put",
      "race",
      "select",
      "take",
      "takeEvery",
      "accountMigrationComplete",
      "accountMigrationUndoPeriodExpired",
      "accountMigrationError",
      "getCurrentAccountMigration",
      "migrateAccount",
      "signOut",
      "shouldContinue",
      "cancel",
      "firebaseCredential",
      "userData",
      "migratedProjects"
    ],
    "mappings": ";;wBAmBiBA,qB;;;wBA2BAC,M;;;wBAIQC,I;;AAlDzB,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,KAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,SARF,QASO,oBATP;AAUA,SACEC,wBADF,EAEEC,iCAFF,EAGEC,qBAHF,QAIO,iBAJP;AAKA,SAAQC,0BAAR,QAAyC,cAAzC;AACA,SAAQC,cAAR,EAAwBC,OAAxB,QAAsC,qBAAtC;AAEA,OAAO,SAAUjB,qBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACoB,iBAAMQ,IAAI,CAAC;AAClCU,YAAAA,cAAc,EAAEZ,KAAK,CAAC,IAAD,EAAO,IAAP,CADa;AAElCa,YAAAA,MAAM,EAAET,IAAI,CAAC,2BAAD;AAFsB,WAAD,CAAV;;AADpB;AAAA;AACEQ,UAAAA,cADF,QACEA,cADF;;AAAA,cAMAA,cANA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAUL,iBAAMX,GAAG,CAACM,iCAAiC,EAAlC,CAAT;;AAVK;AAAA;AAWwB,iBAAMJ,MAAM,CAACM,0BAAD,CAAZ;;AAXxB;AAAA;AAWEK,UAAAA,kBAXF,SAWEA,kBAXF;AAAA;AAAA;AAawC,iBAAMf,IAAI,CACnDW,cADmD,EAEnDI,kBAFmD,CAAV;;AAbxC;AAAA;AAaUC,UAAAA,QAbV,SAaInB,IAbJ;AAaoBoB,UAAAA,gBAbpB,SAaoBA,gBAbpB;AAAA;AAkBH,iBAAMf,GAAG,CACPK,wBAAwB,CAACS,QAAD,EAAWD,kBAAX,EAA+BE,gBAA/B,CADjB,CAAT;;AAlBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAsBH,iBAAMjB,IAAI,CAAC,CAACF,aAAD,EAAgB,QAAhB,CAAD,cAAV;;AAtBG;AAAA;AAuBH,iBAAMI,GAAG,CAACO,qBAAqB,aAAtB,CAAT;;AAvBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BP,OAAO,SAAUb,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,IAAI,CAACY,OAAD,CAAV;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,eAAe,SAAUf,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CACRO,SAAS,CAAC,SAAD,EAAYV,MAAZ,CADD,EAERU,SAAS,CAAC,yBAAD,EAA4BX,qBAA5B,CAFD,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
    "sourcesContent": [
      "import {bugsnagClient} from '../util/bugsnag';\nimport {\n  all,\n  call,\n  delay,\n  put,\n  race,\n  select,\n  take,\n  takeEvery,\n} from 'redux-saga/effects';\nimport {\n  accountMigrationComplete,\n  accountMigrationUndoPeriodExpired,\n  accountMigrationError,\n} from '../actions/user';\nimport {getCurrentAccountMigration} from '../selectors';\nimport {migrateAccount, signOut} from '../clients/firebase';\n\nexport function* startAccountMigration() {\n  const {shouldContinue} = yield race({\n    shouldContinue: delay(5000, true),\n    cancel: take('DISMISS_ACCOUNT_MIGRATION'),\n  });\n\n  if (!shouldContinue) {\n    return;\n  }\n\n  yield put(accountMigrationUndoPeriodExpired());\n  const {firebaseCredential} = yield select(getCurrentAccountMigration);\n  try {\n    const {user: userData, migratedProjects} = yield call(\n      migrateAccount,\n      firebaseCredential,\n    );\n\n    yield put(\n      accountMigrationComplete(userData, firebaseCredential, migratedProjects),\n    );\n  } catch (e) {\n    yield call([bugsnagClient, 'notify'], e);\n    yield put(accountMigrationError(e));\n  }\n}\n\nexport function* logOut() {\n  yield call(signOut);\n}\n\nexport default function* user() {\n  yield all([\n    takeEvery('LOG_OUT', logOut),\n    takeEvery('START_ACCOUNT_MIGRATION', startAccountMigration),\n  ]);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "function Parser(config) {\n  config = config || {};\n  var strictMode = config.strict;\n\n  this.isStrictMode = function () {\n    return strictMode == true;\n  };\n\n  this.pattern = function () {\n    return /./i;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    return null;\n  };\n\n  this.execute = function (text, ref, opt) {\n    var results = [];\n    var regex = this.pattern();\n    var remainingText = text;\n    var match = regex.exec(remainingText);\n\n    while (match) {\n      // Calculate match index on the full text;\n      match.index += text.length - remainingText.length;\n      var result = this.extract(text, ref, match, opt);\n\n      if (result) {\n        // If success, start from the end of the result\n        remainingText = text.substring(result.index + result.text.length);\n\n        if (!this.isStrictMode() || result.hasPossibleDates()) {\n          results.push(result);\n        }\n      } else {\n        // If fail, move on by 1\n        remainingText = text.substring(match.index + 1);\n      }\n\n      match = regex.exec(remainingText);\n    }\n\n    if (this.refiners) {\n      this.refiners.forEach(function () {\n        results = refiner.refine(results, text, options);\n      });\n    }\n\n    return results;\n  };\n}\n\nexports.Parser = Parser;\nexports.ENISOFormatParser = require('./en/ENISOFormatParser').Parser;\nexports.ENDeadlineFormatParser = require('./en/ENDeadlineFormatParser').Parser;\nexports.ENRelativeDateFormatParser = require('./en/ENRelativeDateFormatParser').Parser;\nexports.ENMonthNameLittleEndianParser = require('./en/ENMonthNameLittleEndianParser').Parser;\nexports.ENMonthNameMiddleEndianParser = require('./en/ENMonthNameMiddleEndianParser').Parser;\nexports.ENMonthNameParser = require('./en/ENMonthNameParser').Parser;\nexports.ENSlashDateFormatParser = require('./en/ENSlashDateFormatParser').Parser;\nexports.ENSlashDateFormatStartWithYearParser = require('./en/ENSlashDateFormatStartWithYearParser').Parser;\nexports.ENSlashMonthFormatParser = require('./en/ENSlashMonthFormatParser').Parser;\nexports.ENTimeAgoFormatParser = require('./en/ENTimeAgoFormatParser').Parser;\nexports.ENTimeExpressionParser = require('./en/ENTimeExpressionParser').Parser;\nexports.ENTimeLaterFormatParser = require('./en/ENTimeLaterFormatParser').Parser;\nexports.ENWeekdayParser = require('./en/ENWeekdayParser').Parser;\nexports.ENCasualDateParser = require('./en/ENCasualDateParser').Parser;\nexports.ENCasualTimeParser = require('./en/ENCasualTimeParser').Parser;\nexports.JPStandardParser = require('./ja/JPStandardParser').Parser;\nexports.JPCasualDateParser = require('./ja/JPCasualDateParser').Parser;\nexports.ESCasualDateParser = require('./es/ESCasualDateParser').Parser;\nexports.ESDeadlineFormatParser = require('./es/ESDeadlineFormatParser').Parser;\nexports.ESTimeAgoFormatParser = require('./es/ESTimeAgoFormatParser').Parser;\nexports.ESTimeExpressionParser = require('./es/ESTimeExpressionParser').Parser;\nexports.ESWeekdayParser = require('./es/ESWeekdayParser').Parser;\nexports.ESMonthNameLittleEndianParser = require('./es/ESMonthNameLittleEndianParser').Parser;\nexports.ESSlashDateFormatParser = require('./es/ESSlashDateFormatParser').Parser;\nexports.FRCasualDateParser = require('./fr/FRCasualDateParser').Parser;\nexports.FRDeadlineFormatParser = require('./fr/FRDeadlineFormatParser').Parser;\nexports.FRMonthNameLittleEndianParser = require('./fr/FRMonthNameLittleEndianParser').Parser;\nexports.FRSlashDateFormatParser = require('./fr/FRSlashDateFormatParser').Parser;\nexports.FRTimeAgoFormatParser = require('./fr/FRTimeAgoFormatParser').Parser;\nexports.FRTimeExpressionParser = require('./fr/FRTimeExpressionParser').Parser;\nexports.FRWeekdayParser = require('./fr/FRWeekdayParser').Parser;\nexports.FRRelativeDateFormatParser = require('./fr/FRRelativeDateFormatParser').Parser;\nexports.ZHHantDateParser = require('./zh-Hant/ZHHantDateParser').Parser;\nexports.ZHHantWeekdayParser = require('./zh-Hant/ZHHantWeekdayParser').Parser;\nexports.ZHHantTimeExpressionParser = require('./zh-Hant/ZHHantTimeExpressionParser').Parser;\nexports.ZHHantCasualDateParser = require('./zh-Hant/ZHHantCasualDateParser').Parser;\nexports.ZHHantDeadlineFormatParser = require('./zh-Hant/ZHHantDeadlineFormatParser').Parser;\nexports.DEDeadlineFormatParser = require('./de/DEDeadlineFormatParser').Parser;\nexports.DEMonthNameLittleEndianParser = require('./de/DEMonthNameLittleEndianParser').Parser;\nexports.DEMonthNameParser = require('./de/DEMonthNameParser').Parser;\nexports.DESlashDateFormatParser = require('./de/DESlashDateFormatParser').Parser;\nexports.DETimeAgoFormatParser = require('./de/DETimeAgoFormatParser').Parser;\nexports.DETimeExpressionParser = require('./de/DETimeExpressionParser').Parser;\nexports.DEWeekdayParser = require('./de/DEWeekdayParser').Parser;\nexports.DECasualDateParser = require('./de/DECasualDateParser').Parser;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/parser.js"
    ],
    "names": [
      "Parser",
      "config",
      "strictMode",
      "strict",
      "isStrictMode",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "execute",
      "results",
      "regex",
      "remainingText",
      "exec",
      "index",
      "length",
      "result",
      "substring",
      "hasPossibleDates",
      "push",
      "refiners",
      "forEach",
      "refiner",
      "refine",
      "options",
      "exports",
      "ENISOFormatParser",
      "require",
      "ENDeadlineFormatParser",
      "ENRelativeDateFormatParser",
      "ENMonthNameLittleEndianParser",
      "ENMonthNameMiddleEndianParser",
      "ENMonthNameParser",
      "ENSlashDateFormatParser",
      "ENSlashDateFormatStartWithYearParser",
      "ENSlashMonthFormatParser",
      "ENTimeAgoFormatParser",
      "ENTimeExpressionParser",
      "ENTimeLaterFormatParser",
      "ENWeekdayParser",
      "ENCasualDateParser",
      "ENCasualTimeParser",
      "JPStandardParser",
      "JPCasualDateParser",
      "ESCasualDateParser",
      "ESDeadlineFormatParser",
      "ESTimeAgoFormatParser",
      "ESTimeExpressionParser",
      "ESWeekdayParser",
      "ESMonthNameLittleEndianParser",
      "ESSlashDateFormatParser",
      "FRCasualDateParser",
      "FRDeadlineFormatParser",
      "FRMonthNameLittleEndianParser",
      "FRSlashDateFormatParser",
      "FRTimeAgoFormatParser",
      "FRTimeExpressionParser",
      "FRWeekdayParser",
      "FRRelativeDateFormatParser",
      "ZHHantDateParser",
      "ZHHantWeekdayParser",
      "ZHHantTimeExpressionParser",
      "ZHHantCasualDateParser",
      "ZHHantDeadlineFormatParser",
      "DEDeadlineFormatParser",
      "DEMonthNameLittleEndianParser",
      "DEMonthNameParser",
      "DESlashDateFormatParser",
      "DETimeAgoFormatParser",
      "DETimeExpressionParser",
      "DEWeekdayParser",
      "DECasualDateParser"
    ],
    "mappings": "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",
    "sourcesContent": [
      "\nfunction Parser(config) {\n\n    config = config || {};\n    var strictMode = config.strict;\n\n    this.isStrictMode = function() { return (strictMode == true) };\n\n    this.pattern = function() { return /./i; }\n\n    this.extract = function(text, ref, match, opt){ return null; }\n\n    this.execute = function(text, ref, opt) {\n\n        var results = [];\n        var regex = this.pattern();\n\n        var remainingText = text;\n        var match = regex.exec(remainingText);\n\n        while (match) {\n\n            // Calculate match index on the full text;\n            match.index += text.length - remainingText.length;\n\n            var result = this.extract(text, ref, match, opt);\n            if (result) {\n\n                // If success, start from the end of the result\n                remainingText = text.substring(result.index + result.text.length);\n\n                if (!this.isStrictMode() || result.hasPossibleDates()) {\n                    results.push(result);\n                }\n\n            } else {\n                // If fail, move on by 1\n                remainingText = text.substring(match.index + 1);\n            }\n\n            match = regex.exec(remainingText);\n        }\n\n        if (this.refiners) {\n            this.refiners.forEach(function () {\n                results = refiner.refine(results, text, options);\n            });\n        }\n\n        return results;\n    }\n}\n\nexports.Parser = Parser;\n\nexports.ENISOFormatParser = require('./en/ENISOFormatParser').Parser;\nexports.ENDeadlineFormatParser = require('./en/ENDeadlineFormatParser').Parser;\nexports.ENRelativeDateFormatParser = require('./en/ENRelativeDateFormatParser').Parser;\nexports.ENMonthNameLittleEndianParser = require('./en/ENMonthNameLittleEndianParser').Parser;\nexports.ENMonthNameMiddleEndianParser = require('./en/ENMonthNameMiddleEndianParser').Parser;\nexports.ENMonthNameParser = require('./en/ENMonthNameParser').Parser;\nexports.ENSlashDateFormatParser = require('./en/ENSlashDateFormatParser').Parser;\nexports.ENSlashDateFormatStartWithYearParser = require('./en/ENSlashDateFormatStartWithYearParser').Parser;\nexports.ENSlashMonthFormatParser = require('./en/ENSlashMonthFormatParser').Parser;\nexports.ENTimeAgoFormatParser = require('./en/ENTimeAgoFormatParser').Parser;\nexports.ENTimeExpressionParser = require('./en/ENTimeExpressionParser').Parser;\nexports.ENTimeLaterFormatParser = require('./en/ENTimeLaterFormatParser').Parser;\nexports.ENWeekdayParser = require('./en/ENWeekdayParser').Parser;\nexports.ENCasualDateParser = require('./en/ENCasualDateParser').Parser;\nexports.ENCasualTimeParser = require('./en/ENCasualTimeParser').Parser;\n\nexports.JPStandardParser = require('./ja/JPStandardParser').Parser;\nexports.JPCasualDateParser = require('./ja/JPCasualDateParser').Parser;\n\nexports.ESCasualDateParser = require('./es/ESCasualDateParser').Parser;\nexports.ESDeadlineFormatParser = require('./es/ESDeadlineFormatParser').Parser;\nexports.ESTimeAgoFormatParser = require('./es/ESTimeAgoFormatParser').Parser;\nexports.ESTimeExpressionParser = require('./es/ESTimeExpressionParser').Parser;\nexports.ESWeekdayParser = require('./es/ESWeekdayParser').Parser;\nexports.ESMonthNameLittleEndianParser = require('./es/ESMonthNameLittleEndianParser').Parser;\nexports.ESSlashDateFormatParser = require('./es/ESSlashDateFormatParser').Parser;\n\nexports.FRCasualDateParser = require('./fr/FRCasualDateParser').Parser;\nexports.FRDeadlineFormatParser = require('./fr/FRDeadlineFormatParser').Parser;\nexports.FRMonthNameLittleEndianParser = require('./fr/FRMonthNameLittleEndianParser').Parser;\nexports.FRSlashDateFormatParser = require('./fr/FRSlashDateFormatParser').Parser;\nexports.FRTimeAgoFormatParser = require('./fr/FRTimeAgoFormatParser').Parser;\nexports.FRTimeExpressionParser = require('./fr/FRTimeExpressionParser').Parser;\nexports.FRWeekdayParser = require('./fr/FRWeekdayParser').Parser;\nexports.FRRelativeDateFormatParser = require('./fr/FRRelativeDateFormatParser').Parser;\n\nexports.ZHHantDateParser = require('./zh-Hant/ZHHantDateParser').Parser;\nexports.ZHHantWeekdayParser = require('./zh-Hant/ZHHantWeekdayParser').Parser;\nexports.ZHHantTimeExpressionParser = require('./zh-Hant/ZHHantTimeExpressionParser').Parser;\nexports.ZHHantCasualDateParser = require('./zh-Hant/ZHHantCasualDateParser').Parser;\nexports.ZHHantDeadlineFormatParser = require('./zh-Hant/ZHHantDeadlineFormatParser').Parser;\n\nexports.DEDeadlineFormatParser = require('./de/DEDeadlineFormatParser').Parser;\nexports.DEMonthNameLittleEndianParser = require('./de/DEMonthNameLittleEndianParser').Parser;\nexports.DEMonthNameParser = require('./de/DEMonthNameParser').Parser;\nexports.DESlashDateFormatParser = require('./de/DESlashDateFormatParser').Parser;\nexports.DETimeAgoFormatParser = require('./de/DETimeAgoFormatParser').Parser;\nexports.DETimeExpressionParser = require('./de/DETimeExpressionParser').Parser;\nexports.DEWeekdayParser = require('./de/DEWeekdayParser').Parser;\nexports.DECasualDateParser = require('./de/DECasualDateParser').Parser;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

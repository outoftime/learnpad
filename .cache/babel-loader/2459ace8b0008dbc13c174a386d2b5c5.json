{
  "ast": null,
  "code": "/*\r\n    Date format with slash \"/\" (also \"-\" and \".\") between numbers\r\n    - Martes 3/11/2015\r\n    - 3/11/2015\r\n    - 3/11\r\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '(?:' + '((?:dimanche|dim|lundi|lun|mardi|mar|mercredi|mer|jeudi|jeu|vendredi|ven|samedi|sam|le))' + '\\\\s*\\\\,?\\\\s*' + ')?' + '([0-3]{0,1}[0-9]{1})[\\\\/\\\\.\\\\-]([0-3]{0,1}[0-9]{1})' + '(?:' + '[\\\\/\\\\.\\\\-]' + '([0-9]{4}\\s*\\,?\\s*|[0-9]{2}\\s*\\,?\\s*)' + ')?' + '(\\\\W|$)', 'i');\nvar DAYS_OFFSET = {\n  'dimanche': 0,\n  'dim': 0,\n  'lundi': 1,\n  'lun': 1,\n  'mardi': 2,\n  'mar': 2,\n  'mercredi': 3,\n  'mer': 3,\n  'jeudi': 4,\n  'jeu': 4,\n  'vendredi': 5,\n  'ven': 5,\n  'samedi': 6,\n  'sam': 6\n};\nvar OPENNING_GROUP = 1;\nvar ENDING_GROUP = 6; // In French we use day/month/year\n\nvar WEEKDAY_GROUP = 2;\nvar DAY_GROUP = 3;\nvar MONTH_GROUP = 4;\nvar YEAR_GROUP = 5;\nvar YEAR_BE_GROUP = 6;\n\nexports.Parser = function FRSlashDateFormatParser(argument) {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    if (match[OPENNING_GROUP] == '/' || match[ENDING_GROUP] == '/') {\n      // Long skip, if there is some overlapping like:\n      // XX[/YY/ZZ]\n      // [XX/YY/]ZZ\n      match.index += match[0].length;\n      return;\n    }\n\n    var index = match.index + match[OPENNING_GROUP].length;\n    var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - match[ENDING_GROUP].length);\n    var result = new ParsedResult({\n      text: text,\n      index: index,\n      ref: ref\n    });\n    if (text.match(/^\\d\\.\\d$/)) return;\n    if (text.match(/^\\d\\.\\d{1,2}\\.\\d{1,2}$/)) return; // MM/dd -> OK\n    // MM.dd -> NG\n\n    if (!match[YEAR_GROUP] && match[0].indexOf('/') < 0) return;\n    var date = null;\n    var month = match[MONTH_GROUP];\n    var day = match[DAY_GROUP];\n    day = parseInt(day);\n    month = parseInt(month);\n    var year = null;\n\n    if (match[YEAR_GROUP]) {\n      year = match[YEAR_GROUP];\n      year = parseInt(year);\n\n      if (match[YEAR_BE_GROUP]) {\n        if (/a/i.test(match[YEAR_BE_GROUP])) {\n          // Ante Christe natum\n          year = -year;\n        }\n      } else if (year < 100) {\n        year = year + 2000;\n      }\n    }\n\n    if (month < 1 || month > 12) {\n      if (month > 12) {\n        // dd/mm/yyyy date format if day looks like a month, and month looks like a day.\n        if (day >= 1 && day <= 12 && month >= 13 && month <= 31) {\n          // unambiguous\n          var tday = month;\n          month = day;\n          day = tday;\n        } else {\n          // both month and day are <= 12\n          return null;\n        }\n      }\n    }\n\n    if (day < 1 || day > 31) return null;\n\n    if (year) {\n      result.start.assign('day', day);\n      result.start.assign('month', month);\n      result.start.assign('year', year);\n    } else {\n      // Find the most appropriated year\n      var refMoment = moment(ref);\n      refMoment.month(month - 1);\n      refMoment.date(day);\n      refMoment.year(moment(ref).year());\n      var nextYear = refMoment.clone().add(1, 'y');\n      var lastYear = refMoment.clone().add(-1, 'y');\n\n      if (Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = nextYear;\n      } else if (Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = lastYear;\n      }\n\n      result.start.assign('day', day);\n      result.start.assign('month', month);\n      result.start.imply('year', refMoment.year());\n    } // Day of week\n\n\n    if (match[WEEKDAY_GROUP]) {\n      result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);\n    }\n\n    result.tags['FRSlashDateFormatParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/fr/FRSlashDateFormatParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "PATTERN",
      "RegExp",
      "DAYS_OFFSET",
      "OPENNING_GROUP",
      "ENDING_GROUP",
      "WEEKDAY_GROUP",
      "DAY_GROUP",
      "MONTH_GROUP",
      "YEAR_GROUP",
      "YEAR_BE_GROUP",
      "exports",
      "FRSlashDateFormatParser",
      "argument",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "length",
      "substr",
      "result",
      "indexOf",
      "date",
      "month",
      "day",
      "parseInt",
      "year",
      "test",
      "tday",
      "start",
      "assign",
      "refMoment",
      "nextYear",
      "clone",
      "add",
      "lastYear",
      "Math",
      "abs",
      "diff",
      "imply",
      "toLowerCase",
      "tags"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\r\n    Date format with slash \"/\" (also \"-\" and \".\") between numbers\r\n    - Martes 3/11/2015\r\n    - 3/11/2015\r\n    - 3/11\r\n*/\r\nvar moment = require('moment');\r\nvar Parser = require('../parser').Parser;\r\nvar ParsedResult = require('../../result').ParsedResult;\r\n\r\nvar PATTERN = new RegExp('(\\\\W|^)' +\r\n    '(?:' +\r\n        '((?:dimanche|dim|lundi|lun|mardi|mar|mercredi|mer|jeudi|jeu|vendredi|ven|samedi|sam|le))' +\r\n        '\\\\s*\\\\,?\\\\s*' +\r\n    ')?' +\r\n    '([0-3]{0,1}[0-9]{1})[\\\\/\\\\.\\\\-]([0-3]{0,1}[0-9]{1})' +\r\n    '(?:' +\r\n        '[\\\\/\\\\.\\\\-]' +\r\n        '([0-9]{4}\\s*\\,?\\s*|[0-9]{2}\\s*\\,?\\s*)' +\r\n    ')?' +\r\n    '(\\\\W|$)', 'i');\r\n\r\nvar DAYS_OFFSET = { 'dimanche': 0, 'dim': 0, 'lundi': 1, 'lun': 1,'mardi': 2, 'mar':2, 'mercredi': 3, 'mer': 3,\r\n    'jeudi': 4, 'jeu':4, 'vendredi': 5, 'ven': 5,'samedi': 6, 'sam': 6};\r\n\r\n\r\nvar OPENNING_GROUP = 1;\r\nvar ENDING_GROUP = 6;\r\n\r\n// In French we use day/month/year\r\nvar WEEKDAY_GROUP = 2;\r\nvar DAY_GROUP = 3;\r\nvar MONTH_GROUP = 4;\r\nvar YEAR_GROUP = 5;\r\nvar YEAR_BE_GROUP = 6;\r\n\r\nexports.Parser = function FRSlashDateFormatParser(argument) {\r\n    Parser.apply(this, arguments);\r\n\r\n    this.pattern = function () { return PATTERN; };\r\n    this.extract = function(text, ref, match, opt){\r\n\r\n        if(match[OPENNING_GROUP] == '/' || match[ENDING_GROUP] == '/') {\r\n            // Long skip, if there is some overlapping like:\r\n            // XX[/YY/ZZ]\r\n            // [XX/YY/]ZZ\r\n            match.index += match[0].length\r\n            return;\r\n        }\r\n\r\n        var index = match.index + match[OPENNING_GROUP].length;\r\n        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - match[ENDING_GROUP].length);\r\n\r\n\r\n        var result = new ParsedResult({\r\n            text: text,\r\n            index: index,\r\n            ref: ref,\r\n        });\r\n\r\n        if(text.match(/^\\d\\.\\d$/)) return;\r\n        if(text.match(/^\\d\\.\\d{1,2}\\.\\d{1,2}$/)) return;\r\n\r\n        // MM/dd -> OK\r\n        // MM.dd -> NG\r\n        if(!match[YEAR_GROUP] && match[0].indexOf('/') < 0) return;\r\n\r\n        var date = null;\r\n        var month = match[MONTH_GROUP];\r\n        var day   = match[DAY_GROUP];\r\n\r\n        day  = parseInt(day);\r\n        month = parseInt(month);\r\n\r\n        var year = null;\r\n        if (match[YEAR_GROUP]) {\r\n            year = match[YEAR_GROUP];\r\n            year = parseInt(year);\r\n\r\n            if(match[YEAR_BE_GROUP]){\r\n                if (/a/i.test(match[YEAR_BE_GROUP])) {\r\n                    // Ante Christe natum\r\n                    year = -year;\r\n                }\r\n            } else if (year < 100){\r\n\r\n                year = year + 2000;\r\n            }\r\n        }\r\n\r\n        if(month < 1 || month > 12) {\r\n            if(month > 12) {\r\n                // dd/mm/yyyy date format if day looks like a month, and month looks like a day.\r\n                if (day >= 1 && day <= 12 && month >= 13 && month <= 31) {\r\n                    // unambiguous\r\n                    var tday = month;\r\n                    month = day;\r\n                    day = tday;\r\n                }\r\n                else {\r\n                    // both month and day are <= 12\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(day < 1 || day > 31) return null;\r\n\r\n        if(year){\r\n            result.start.assign('day', day);\r\n            result.start.assign('month', month);\r\n            result.start.assign('year', year);\r\n        } else {\r\n\r\n            // Find the most appropriated year\r\n            var refMoment = moment(ref);\r\n            refMoment.month(month - 1);\r\n            refMoment.date(day);\r\n            refMoment.year(moment(ref).year());\r\n\r\n            var nextYear = refMoment.clone().add(1, 'y');\r\n            var lastYear = refMoment.clone().add(-1, 'y');\r\n            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){\r\n                refMoment = nextYear;\r\n            }\r\n            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){\r\n                refMoment = lastYear;\r\n            }\r\n\r\n            result.start.assign('day', day);\r\n            result.start.assign('month', month);\r\n            result.start.imply('year', refMoment.year());\r\n        }\r\n\r\n        // Day of week\r\n        if(match[WEEKDAY_GROUP]) {\r\n            result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);\r\n        }\r\n\r\n        result.tags['FRSlashDateFormatParser'] = true;\r\n        return result;\r\n    };\r\n};"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

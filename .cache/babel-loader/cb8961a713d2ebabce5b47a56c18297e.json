{
  "ast": null,
  "code": "function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _marked =\n/*#__PURE__*/\nregeneratorRuntime.mark(applicationLoaded),\n    _marked2 =\n/*#__PURE__*/\nregeneratorRuntime.mark(createProject),\n    _marked3 =\n/*#__PURE__*/\nregeneratorRuntime.mark(changeCurrentProject),\n    _marked4 =\n/*#__PURE__*/\nregeneratorRuntime.mark(importSnapshot),\n    _marked5 =\n/*#__PURE__*/\nregeneratorRuntime.mark(importGist),\n    _marked6 =\n/*#__PURE__*/\nregeneratorRuntime.mark(updateProjectSource),\n    _marked7 =\n/*#__PURE__*/\nregeneratorRuntime.mark(loadAndBeautifyProjectSource),\n    _marked8 =\n/*#__PURE__*/\nregeneratorRuntime.mark(userAuthenticated),\n    _marked9 =\n/*#__PURE__*/\nregeneratorRuntime.mark(toggleLibrary),\n    _marked10 =\n/*#__PURE__*/\nregeneratorRuntime.mark(projectExported),\n    _marked11 =\n/*#__PURE__*/\nregeneratorRuntime.mark(saveCurrentProject),\n    _marked12 =\n/*#__PURE__*/\nregeneratorRuntime.mark(saveProjectWithKey),\n    _marked13 =\n/*#__PURE__*/\nregeneratorRuntime.mark(archiveProject),\n    _marked14 =\n/*#__PURE__*/\nregeneratorRuntime.mark(unArchiveProject),\n    _marked15 =\n/*#__PURE__*/\nregeneratorRuntime.mark(projects);\n\nimport { all, call, fork, put, select, takeEvery, throttle, takeLatest } from 'redux-saga/effects';\nimport isNull from 'lodash-es/isNull';\nimport isString from 'lodash-es/isString';\nimport get from 'lodash-es/get';\nimport reduce from 'lodash-es/reduce';\nimport { gistImported, gistImportError, gistNotFound, projectCreated, projectsLoaded, projectSuccessfullySaved, projectBeautified } from '../actions/projects';\nimport { snapshotImported, snapshotImportError, snapshotNotFound, projectRestoredFromLastSession } from '../actions/clients';\nimport { isPristineProject } from '../util/projectUtils';\nimport { loadGistFromId } from '../clients/github';\nimport { loadAllProjects, loadProjectSnapshot, saveProject } from '../clients/firebase';\nimport beautifySource from '../util/beautifySource';\nimport { getCurrentProject, getProject, getCurrentUserId } from '../selectors';\nexport function applicationLoaded(action) {\n  return regeneratorRuntime.wrap(function applicationLoaded$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!isString(action.payload.gistId)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return call(importGist, action);\n\n        case 3:\n          _context.next = 17;\n          break;\n\n        case 5:\n          if (!isString(action.payload.snapshotKey)) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return call(importSnapshot, action);\n\n        case 8:\n          _context.next = 17;\n          break;\n\n        case 10:\n          if (!action.payload.rehydratedProject) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 13;\n          return put(projectRestoredFromLastSession(action.payload.rehydratedProject));\n\n        case 13:\n          _context.next = 17;\n          break;\n\n        case 15:\n          _context.next = 17;\n          return call(createProject);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function createProject() {\n  return regeneratorRuntime.wrap(function createProject$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(projectCreated(generateProjectKey()));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function changeCurrentProject() {\n  return regeneratorRuntime.wrap(function changeCurrentProject$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.delegateYield(saveCurrentProject(), \"t0\", 1);\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function importSnapshot(_ref) {\n  var snapshotKey, snapshot, projectKey;\n  return regeneratorRuntime.wrap(function importSnapshot$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          snapshotKey = _ref.payload.snapshotKey;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(loadProjectSnapshot, snapshotKey);\n\n        case 4:\n          snapshot = _context4.sent;\n\n          if (!isNull(snapshot)) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(snapshotNotFound());\n\n        case 8:\n          _context4.next = 13;\n          break;\n\n        case 10:\n          projectKey = generateProjectKey();\n          _context4.next = 13;\n          return put(snapshotImported(projectKey, snapshot));\n\n        case 13:\n          _context4.next = 19;\n          break;\n\n        case 15:\n          _context4.prev = 15;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 19;\n          return put(snapshotImportError(_context4.t0));\n\n        case 19:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 15]]);\n}\nexport function importGist(_ref2) {\n  var gistId, gistData;\n  return regeneratorRuntime.wrap(function importGist$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          gistId = _ref2.payload.gistId;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(loadGistFromId, gistId);\n\n        case 4:\n          gistData = _context5.sent;\n          _context5.next = 7;\n          return put(gistImported(generateProjectKey(), gistData));\n\n        case 7:\n          _context5.next = 18;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](1);\n\n          if (!(get(_context5.t0, 'response.status') === 404)) {\n            _context5.next = 16;\n            break;\n          }\n\n          _context5.next = 14;\n          return put(gistNotFound(gistId));\n\n        case 14:\n          _context5.next = 18;\n          break;\n\n        case 16:\n          _context5.next = 18;\n          return put(gistImportError());\n\n        case 18:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 9]]);\n}\nexport function updateProjectSource() {\n  return regeneratorRuntime.wrap(function updateProjectSource$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.delegateYield(saveCurrentProject(), \"t0\", 1);\n\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function loadAndBeautifyProjectSource() {\n  var currentProject, sourcesMap;\n  return regeneratorRuntime.wrap(function loadAndBeautifyProjectSource$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return select(getCurrentProject);\n\n        case 2:\n          currentProject = _context7.sent;\n          _context7.next = 5;\n          return all(reduce(currentProject.sources, function (calls, source, language) {\n            return Object.assign(calls, _defineProperty({}, language, call(beautifySource, source, language)));\n          }, {}));\n\n        case 5:\n          sourcesMap = _context7.sent;\n          _context7.next = 8;\n          return put(projectBeautified(currentProject.projectKey, sourcesMap));\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function userAuthenticated() {\n  var state, allProjects;\n  return regeneratorRuntime.wrap(function userAuthenticated$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return select();\n\n        case 2:\n          state = _context8.sent;\n          _context8.next = 5;\n          return fork(saveCurrentProject);\n\n        case 5:\n          _context8.next = 7;\n          return call(loadAllProjects, getCurrentUserId(state));\n\n        case 7:\n          allProjects = _context8.sent;\n          _context8.next = 10;\n          return put(projectsLoaded(allProjects));\n\n        case 10:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport function toggleLibrary() {\n  return regeneratorRuntime.wrap(function toggleLibrary$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          return _context9.delegateYield(saveCurrentProject(), \"t0\", 1);\n\n        case 1:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction generateProjectKey() {\n  var date = new Date();\n  return (date.getTime() * 1000 + date.getMilliseconds()).toString();\n}\n\nexport function projectExported(_ref3) {\n  var exportType;\n  return regeneratorRuntime.wrap(function projectExported$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          exportType = _ref3.payload.exportType;\n\n          if (!(exportType === 'repo')) {\n            _context10.next = 3;\n            break;\n          }\n\n          return _context10.delegateYield(saveCurrentProject(), \"t0\", 3);\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\nexport function saveCurrentProject() {\n  var currentProject;\n  return regeneratorRuntime.wrap(function saveCurrentProject$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return select(getCurrentProject);\n\n        case 2:\n          currentProject = _context11.sent;\n\n          if (!currentProject) {\n            _context11.next = 5;\n            break;\n          }\n\n          return _context11.delegateYield(saveProjectWithKey(currentProject.projectKey), \"t0\", 5);\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction saveProjectWithKey(projectKey) {\n  var state, userId, project;\n  return regeneratorRuntime.wrap(function saveProjectWithKey$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return select();\n\n        case 2:\n          state = _context12.sent;\n          _context12.next = 5;\n          return call(getCurrentUserId, state);\n\n        case 5:\n          userId = _context12.sent;\n          _context12.next = 8;\n          return call(getProject, state, {\n            projectKey: projectKey\n          });\n\n        case 8:\n          project = _context12.sent;\n\n          if (!(userId && !isPristineProject(project))) {\n            _context12.next = 14;\n            break;\n          }\n\n          _context12.next = 12;\n          return call(saveProject, userId, project);\n\n        case 12:\n          _context12.next = 14;\n          return put(projectSuccessfullySaved());\n\n        case 14:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport function archiveProject(_ref4) {\n  var projectKey;\n  return regeneratorRuntime.wrap(function archiveProject$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          projectKey = _ref4.payload.projectKey;\n          return _context13.delegateYield(saveProjectWithKey(projectKey), \"t0\", 2);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\nexport function unArchiveProject(_ref5) {\n  var projectKey;\n  return regeneratorRuntime.wrap(function unArchiveProject$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          projectKey = _ref5.payload.projectKey;\n          return _context14.delegateYield(saveProjectWithKey(projectKey), \"t0\", 2);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\nexport default function projects() {\n  return regeneratorRuntime.wrap(function projects$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([takeEvery('APPLICATION_LOADED', applicationLoaded), takeEvery('CREATE_PROJECT', createProject), takeEvery('CHANGE_CURRENT_PROJECT', changeCurrentProject), takeEvery('PROJECT_EXPORTED', projectExported), throttle(500, ['UPDATE_PROJECT_SOURCE', 'UPDATE_PROJECT_INSTRUCTIONS'], updateProjectSource), takeEvery('USER_AUTHENTICATED', userAuthenticated), takeEvery('TOGGLE_LIBRARY', toggleLibrary), takeLatest('BEAUTIFY_PROJECT_SOURCE', loadAndBeautifyProjectSource), takeEvery('ARCHIVE_PROJECT', archiveProject)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/sagas/projects.js"],
    "names": [
      "applicationLoaded",
      "createProject",
      "changeCurrentProject",
      "importSnapshot",
      "importGist",
      "updateProjectSource",
      "loadAndBeautifyProjectSource",
      "userAuthenticated",
      "toggleLibrary",
      "projectExported",
      "saveCurrentProject",
      "saveProjectWithKey",
      "archiveProject",
      "unArchiveProject",
      "projects",
      "all",
      "call",
      "fork",
      "put",
      "select",
      "takeEvery",
      "throttle",
      "takeLatest",
      "isNull",
      "isString",
      "get",
      "reduce",
      "gistImported",
      "gistImportError",
      "gistNotFound",
      "projectCreated",
      "projectsLoaded",
      "projectSuccessfullySaved",
      "projectBeautified",
      "snapshotImported",
      "snapshotImportError",
      "snapshotNotFound",
      "projectRestoredFromLastSession",
      "isPristineProject",
      "loadGistFromId",
      "loadAllProjects",
      "loadProjectSnapshot",
      "saveProject",
      "beautifySource",
      "getCurrentProject",
      "getProject",
      "getCurrentUserId",
      "action",
      "payload",
      "gistId",
      "snapshotKey",
      "rehydratedProject",
      "generateProjectKey",
      "snapshot",
      "projectKey",
      "gistData",
      "currentProject",
      "sources",
      "calls",
      "source",
      "language",
      "Object",
      "assign",
      "sourcesMap",
      "state",
      "allProjects",
      "date",
      "Date",
      "getTime",
      "getMilliseconds",
      "toString",
      "exportType",
      "userId",
      "project"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {\n  all,\n  call,\n  fork,\n  put,\n  select,\n  takeEvery,\n  throttle,\n  takeLatest,\n} from 'redux-saga/effects';\nimport isNull from 'lodash-es/isNull';\nimport isString from 'lodash-es/isString';\nimport get from 'lodash-es/get';\nimport reduce from 'lodash-es/reduce';\n\nimport {\n  gistImported,\n  gistImportError,\n  gistNotFound,\n  projectCreated,\n  projectsLoaded,\n  projectSuccessfullySaved,\n  projectBeautified,\n} from '../actions/projects';\nimport {\n  snapshotImported,\n  snapshotImportError,\n  snapshotNotFound,\n  projectRestoredFromLastSession,\n} from '../actions/clients';\nimport {isPristineProject} from '../util/projectUtils';\nimport {loadGistFromId} from '../clients/github';\nimport {\n  loadAllProjects,\n  loadProjectSnapshot,\n  saveProject,\n} from '../clients/firebase';\nimport beautifySource from '../util/beautifySource';\nimport {getCurrentProject, getProject, getCurrentUserId} from '../selectors';\n\nexport function* applicationLoaded(action) {\n  if (isString(action.payload.gistId)) {\n    yield call(importGist, action);\n  } else if (isString(action.payload.snapshotKey)) {\n    yield call(importSnapshot, action);\n  } else if (action.payload.rehydratedProject) {\n    yield put(projectRestoredFromLastSession(action.payload.rehydratedProject));\n  } else {\n    yield call(createProject);\n  }\n}\n\nexport function* createProject() {\n  yield put(projectCreated(generateProjectKey()));\n}\n\nexport function* changeCurrentProject() {\n  yield* saveCurrentProject();\n}\n\nexport function* importSnapshot({payload: {snapshotKey}}) {\n  try {\n    const snapshot = yield call(loadProjectSnapshot, snapshotKey);\n    if (isNull(snapshot)) {\n      yield put(snapshotNotFound());\n    } else {\n      const projectKey = generateProjectKey();\n      yield put(snapshotImported(projectKey, snapshot));\n    }\n  } catch (error) {\n    yield put(snapshotImportError(error));\n  }\n}\n\nexport function* importGist({payload: {gistId}}) {\n  try {\n    const gistData = yield call(loadGistFromId, gistId);\n    yield put(gistImported(generateProjectKey(), gistData));\n  } catch (error) {\n    if (get(error, 'response.status') === 404) {\n      yield put(gistNotFound(gistId));\n    } else {\n      yield put(gistImportError());\n    }\n  }\n}\n\nexport function* updateProjectSource() {\n  yield* saveCurrentProject();\n}\n\nexport function* loadAndBeautifyProjectSource() {\n  const currentProject = yield select(getCurrentProject);\n  const sourcesMap = yield all(\n    reduce(\n      currentProject.sources,\n      (calls, source, language) =>\n        Object.assign(calls, {\n          [language]: call(beautifySource, source, language),\n        }),\n      {},\n    ),\n  );\n  yield put(projectBeautified(currentProject.projectKey, sourcesMap));\n}\n\nexport function* userAuthenticated() {\n  const state = yield select();\n  yield fork(saveCurrentProject);\n\n  const allProjects = yield call(loadAllProjects, getCurrentUserId(state));\n\n  yield put(projectsLoaded(allProjects));\n}\n\nexport function* toggleLibrary() {\n  yield* saveCurrentProject();\n}\n\nfunction generateProjectKey() {\n  const date = new Date();\n  return (date.getTime() * 1000 + date.getMilliseconds()).toString();\n}\n\nexport function* projectExported({payload: {exportType}}) {\n  if (exportType === 'repo') {\n    yield* saveCurrentProject();\n  }\n}\n\nexport function* saveCurrentProject() {\n  const currentProject = yield select(getCurrentProject);\n  if (currentProject) {\n    yield* saveProjectWithKey(currentProject.projectKey);\n  }\n}\n\nfunction* saveProjectWithKey(projectKey) {\n  const state = yield select();\n  const userId = yield call(getCurrentUserId, state);\n  const project = yield call(getProject, state, {projectKey});\n  if (userId && !isPristineProject(project)) {\n    yield call(saveProject, userId, project);\n    yield put(projectSuccessfullySaved());\n  }\n}\n\nexport function* archiveProject({payload: {projectKey}}) {\n  yield* saveProjectWithKey(projectKey);\n}\n\nexport function* unArchiveProject({payload: {projectKey}}) {\n  yield* saveProjectWithKey(projectKey);\n}\n\nexport default function* projects() {\n  yield all([\n    takeEvery('APPLICATION_LOADED', applicationLoaded),\n    takeEvery('CREATE_PROJECT', createProject),\n    takeEvery('CHANGE_CURRENT_PROJECT', changeCurrentProject),\n    takeEvery('PROJECT_EXPORTED', projectExported),\n    throttle(\n      500,\n      ['UPDATE_PROJECT_SOURCE', 'UPDATE_PROJECT_INSTRUCTIONS'],\n      updateProjectSource,\n    ),\n    takeEvery('USER_AUTHENTICATED', userAuthenticated),\n    takeEvery('TOGGLE_LIBRARY', toggleLibrary),\n    takeLatest('BEAUTIFY_PROJECT_SOURCE', loadAndBeautifyProjectSource),\n    takeEvery('ARCHIVE_PROJECT', archiveProject),\n  ]);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '(this|next|last|past)\\\\s*' + '(' + util.INTEGER_WORDS_PATTERN + '|[0-9]+|few|half(?:\\\\s*an?)?)?\\\\s*' + '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)(?=\\\\s*)' + '(?=\\\\W|$)', 'i');\nvar MODIFIER_WORD_GROUP = 2;\nvar MULTIPLIER_WORD_GROUP = 3;\nvar RELATIVE_WORD_GROUP = 4;\n\nexports.Parser = function ENRelativeDateFormatParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[1].length;\n    var modifier = match[MODIFIER_WORD_GROUP].toLowerCase().match(/^next/) ? 1 : -1;\n    var text = match[0];\n    text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    result.tags['ENRelativeDateFormatParser'] = true;\n    var num = match[MULTIPLIER_WORD_GROUP] === undefined ? '' : match[3].toLowerCase();\n\n    if (util.INTEGER_WORDS[num] !== undefined) {\n      num = util.INTEGER_WORDS[num];\n    } else if (num === '') {\n      num = 1;\n    } else if (num.match(/few/i)) {\n      num = 3;\n    } else if (num.match(/half/i)) {\n      num = 0.5;\n    } else {\n      num = parseInt(num);\n    }\n\n    num *= modifier;\n    var date = moment(ref);\n\n    if (match[MODIFIER_WORD_GROUP].toLowerCase().match(/^this/)) {\n      if (match[MULTIPLIER_WORD_GROUP]) {\n        return null;\n      }\n\n      if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {\n        // This week\n        if (match[RELATIVE_WORD_GROUP].match(/week/i)) {\n          date.add(-date.get('d'), 'd');\n          result.start.imply('day', date.date());\n          result.start.imply('month', date.month() + 1);\n          result.start.imply('year', date.year());\n        } // This month\n        else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {\n            date.add(-date.date() + 1, 'd');\n            result.start.imply('day', date.date());\n            result.start.assign('year', date.year());\n            result.start.assign('month', date.month() + 1);\n          } // This year\n          else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {\n              date.add(-date.date() + 1, 'd');\n              date.add(-date.month(), 'month');\n              result.start.imply('day', date.date());\n              result.start.imply('month', date.month() + 1);\n              result.start.assign('year', date.year());\n            }\n\n        return result;\n      }\n    }\n\n    if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {\n      if (match[RELATIVE_WORD_GROUP].match(/day/i)) {\n        date.add(num, 'd');\n        result.start.assign('year', date.year());\n        result.start.assign('month', date.month() + 1);\n        result.start.assign('day', date.date());\n      } else if (match[RELATIVE_WORD_GROUP].match(/week/i)) {\n        date.add(num * 7, 'd'); // We don't know the exact date for next/last week so we imply\n        // them\n\n        result.start.imply('day', date.date());\n        result.start.imply('month', date.month() + 1);\n        result.start.imply('year', date.year());\n      } else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {\n        date.add(num, 'month'); // We don't know the exact day for next/last month\n\n        result.start.imply('day', date.date());\n        result.start.assign('year', date.year());\n        result.start.assign('month', date.month() + 1);\n      } else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {\n        date.add(num, 'year'); // We don't know the exact day for month on next/last year\n\n        result.start.imply('day', date.date());\n        result.start.imply('month', date.month() + 1);\n        result.start.assign('year', date.year());\n      }\n\n      return result;\n    }\n\n    if (match[RELATIVE_WORD_GROUP].match(/hour/i)) {\n      date.add(num, 'hour');\n      result.start.imply('minute', date.minute());\n      result.start.imply('second', date.second());\n    } else if (match[RELATIVE_WORD_GROUP].match(/min/i)) {\n      date.add(num, 'minute');\n      result.start.assign('minute', date.minute());\n      result.start.imply('second', date.second());\n    } else if (match[RELATIVE_WORD_GROUP].match(/second/i)) {\n      date.add(num, 'second');\n      result.start.assign('second', date.second());\n      result.start.assign('minute', date.minute());\n    }\n\n    result.start.assign('hour', date.hour());\n    result.start.assign('year', date.year());\n    result.start.assign('month', date.month() + 1);\n    result.start.assign('day', date.date());\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/en/ENRelativeDateFormatParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "util",
      "PATTERN",
      "RegExp",
      "INTEGER_WORDS_PATTERN",
      "MODIFIER_WORD_GROUP",
      "MULTIPLIER_WORD_GROUP",
      "RELATIVE_WORD_GROUP",
      "exports",
      "ENRelativeDateFormatParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "length",
      "modifier",
      "toLowerCase",
      "substr",
      "result",
      "tags",
      "num",
      "undefined",
      "INTEGER_WORDS",
      "parseInt",
      "date",
      "add",
      "get",
      "start",
      "imply",
      "month",
      "year",
      "assign",
      "minute",
      "second",
      "hour"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n\n\n*/\n\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\nvar util  = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' +\n    '(this|next|last|past)\\\\s*' +\n    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|few|half(?:\\\\s*an?)?)?\\\\s*' +\n    '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)(?=\\\\s*)' +\n    '(?=\\\\W|$)', 'i'\n);\n\nvar MODIFIER_WORD_GROUP = 2;\nvar MULTIPLIER_WORD_GROUP = 3;\nvar RELATIVE_WORD_GROUP = 4;\n\nexports.Parser = function ENRelativeDateFormatParser(){\n    Parser.apply(this, arguments);\n\n    this.pattern = function() { return PATTERN; };\n\n    this.extract = function(text, ref, match, opt){\n\n        var index = match.index + match[1].length;\n        var modifier = match[MODIFIER_WORD_GROUP].toLowerCase().match(/^next/) ? 1 : -1;\n        var text  = match[0];\n        text  = match[0].substr(match[1].length, match[0].length - match[1].length);\n\n        var result = new ParsedResult({\n            index: index,\n            text: text,\n            ref: ref\n        });\n        result.tags['ENRelativeDateFormatParser'] = true;\n\n        var num = match[MULTIPLIER_WORD_GROUP] === undefined ? '' : match[3].toLowerCase();\n        if (util.INTEGER_WORDS[num] !== undefined) {\n            num = util.INTEGER_WORDS[num];\n        } else if (num === ''){\n            num = 1;\n        } else if (num.match(/few/i)){\n            num = 3;\n        } else if (num.match(/half/i)) {\n            num = 0.5;\n        } else {\n            num = parseInt(num);\n        }\n\n        num *= modifier;\n        var date = moment(ref);\n\n        if (match[MODIFIER_WORD_GROUP].toLowerCase().match(/^this/)) {\n\n            if (match[MULTIPLIER_WORD_GROUP]) {\n                return null;\n            }\n\n            if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {\n                \n                // This week\n                if (match[RELATIVE_WORD_GROUP].match(/week/i)) {\n                    date.add(-date.get('d'), 'd');\n                    result.start.imply('day', date.date());\n                    result.start.imply('month', date.month() + 1);\n                    result.start.imply('year', date.year());\n                } \n                \n                // This month\n                else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {\n                    date.add(-date.date() + 1, 'd');\n                    result.start.imply('day', date.date());\n                    result.start.assign('year', date.year());\n                    result.start.assign('month', date.month() + 1);\n                } \n\n                // This year\n                else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {\n                    date.add(-date.date() + 1, 'd');\n                    date.add(-date.month(), 'month');\n\n                    result.start.imply('day', date.date());\n                    result.start.imply('month', date.month() + 1);\n                    result.start.assign('year', date.year());\n                } \n\n                return result;\n            }\n        }\n        \n        if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {\n\n            if (match[RELATIVE_WORD_GROUP].match(/day/i)) {\n                date.add(num, 'd');\n                result.start.assign('year', date.year());\n                result.start.assign('month', date.month() + 1);\n                result.start.assign('day', date.date());\n            } else if (match[RELATIVE_WORD_GROUP].match(/week/i)) {\n                date.add(num * 7, 'd');\n                // We don't know the exact date for next/last week so we imply\n                // them\n                result.start.imply('day', date.date());\n                result.start.imply('month', date.month() + 1);\n                result.start.imply('year', date.year());\n            } else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {\n                date.add(num, 'month');\n                // We don't know the exact day for next/last month\n                result.start.imply('day', date.date());\n                result.start.assign('year', date.year());\n                result.start.assign('month', date.month() + 1);\n            } else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {\n                date.add(num, 'year');\n                // We don't know the exact day for month on next/last year\n                result.start.imply('day', date.date());\n                result.start.imply('month', date.month() + 1);\n                result.start.assign('year', date.year());\n            }\n\n            return result;\n        }\n\n        if (match[RELATIVE_WORD_GROUP].match(/hour/i)) {\n\n            date.add(num, 'hour');\n            result.start.imply('minute', date.minute());\n            result.start.imply('second', date.second());\n\n        } else if (match[RELATIVE_WORD_GROUP].match(/min/i)) {\n\n            date.add(num, 'minute');\n            result.start.assign('minute', date.minute());\n            result.start.imply('second', date.second());\n\n        } else if (match[RELATIVE_WORD_GROUP].match(/second/i)) {\n\n            date.add(num, 'second');\n            result.start.assign('second', date.second());\n            result.start.assign('minute', date.minute());\n        }\n\n        result.start.assign('hour', date.hour());\n        result.start.assign('year', date.year());\n        result.start.assign('month', date.month() + 1);\n        result.start.assign('day', date.date());\n        return result;\n    };\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

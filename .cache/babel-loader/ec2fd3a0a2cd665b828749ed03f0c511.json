{
  "ast": null,
  "code": "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport css from 'css';\nimport Validator from '../Validator';\nvar errorMap = {\n  \"missing '{'\": function missing() {\n    return {\n      reason: 'missing-opening-curly'\n    };\n  },\n  \"property missing ':'\": function propertyMissing() {\n    return {\n      reason: 'property-missing-colon',\n      suppresses: ['invalid-token', 'missing-closing-curly']\n    };\n  },\n  'selector missing': function selectorMissing() {\n    return {\n      reason: 'selector-missing',\n      suppresses: ['invalid-token']\n    };\n  }\n};\n\nvar CssValidator =\n/*#__PURE__*/\nfunction (_Validator) {\n  _inherits(CssValidator, _Validator);\n\n  function CssValidator(source) {\n    _classCallCheck(this, CssValidator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CssValidator).call(this, source, 'css', errorMap));\n  }\n\n  _createClass(CssValidator, [{\n    key: \"getRawErrors\",\n    value: function () {\n      var _getRawErrors = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", css.parse(this.source, {\n                  silent: true\n                }).stylesheet.parsingErrors);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRawErrors() {\n        return _getRawErrors.apply(this, arguments);\n      }\n\n      return getRawErrors;\n    }()\n  }, {\n    key: \"keyForError\",\n    value: function keyForError(error) {\n      return error.reason;\n    }\n  }, {\n    key: \"locationForError\",\n    value: function locationForError(error) {\n      var row = error.line - 1;\n      var column = error.column - 1;\n      return {\n        row: row,\n        column: column\n      };\n    }\n  }]);\n\n  return CssValidator;\n}(Validator);\n\nexport default (function (source) {\n  return new CssValidator(source).getAnnotations();\n});",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/validations/css/css.js"],
    "names": [
      "css",
      "Validator",
      "errorMap",
      "reason",
      "suppresses",
      "CssValidator",
      "source",
      "parse",
      "silent",
      "stylesheet",
      "parsingErrors",
      "error",
      "row",
      "line",
      "column",
      "getAnnotations"
    ],
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,IAAMC,QAAQ,GAAG;AACf,iBAAe;AAAA,WAAO;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAP;AAAA,GADA;AAGf,0BAAwB;AAAA,WAAO;AAC7BA,MAAAA,MAAM,EAAE,wBADqB;AAE7BC,MAAAA,UAAU,EAAE,CAAC,eAAD,EAAkB,uBAAlB;AAFiB,KAAP;AAAA,GAHT;AAQf,sBAAoB;AAAA,WAAO;AACzBD,MAAAA,MAAM,EAAE,kBADiB;AAEzBC,MAAAA,UAAU,EAAE,CAAC,eAAD;AAFa,KAAP;AAAA;AARL,CAAjB;;IAcMC,Y;;;;;AACJ,wBAAYC,MAAZ,EAAoB;AAAA;;AAAA,qFACZA,MADY,EACJ,KADI,EACGJ,QADH;AAEnB;;;;;;;;;;;;iDAGQF,GAAG,CAACO,KAAJ,CAAU,KAAKD,MAAf,EAAuB;AAACE,kBAAAA,MAAM,EAAE;AAAT,iBAAvB,EAAuCC,UAAvC,CAAkDC,a;;;;;;;;;;;;;;;;;;gCAG/CC,K,EAAO;AACjB,aAAOA,KAAK,CAACR,MAAb;AACD;;;qCAEgBQ,K,EAAO;AACtB,UAAMC,GAAG,GAAGD,KAAK,CAACE,IAAN,GAAa,CAAzB;AACA,UAAMC,MAAM,GAAGH,KAAK,CAACG,MAAN,GAAe,CAA9B;AACA,aAAO;AAACF,QAAAA,GAAG,EAAHA,GAAD;AAAME,QAAAA,MAAM,EAANA;AAAN,OAAP;AACD;;;;EAjBwBb,S;;AAoB3B,gBAAe,UAAAK,MAAM;AAAA,SAAI,IAAID,YAAJ,CAAiBC,MAAjB,EAAyBS,cAAzB,EAAJ;AAAA,CAArB",
    "sourcesContent": [
      "import css from 'css';\n\nimport Validator from '../Validator';\n\nconst errorMap = {\n  \"missing '{'\": () => ({reason: 'missing-opening-curly'}),\n\n  \"property missing ':'\": () => ({\n    reason: 'property-missing-colon',\n    suppresses: ['invalid-token', 'missing-closing-curly'],\n  }),\n\n  'selector missing': () => ({\n    reason: 'selector-missing',\n    suppresses: ['invalid-token'],\n  }),\n};\n\nclass CssValidator extends Validator {\n  constructor(source) {\n    super(source, 'css', errorMap);\n  }\n\n  async getRawErrors() {\n    return css.parse(this.source, {silent: true}).stylesheet.parsingErrors;\n  }\n\n  keyForError(error) {\n    return error.reason;\n  }\n\n  locationForError(error) {\n    const row = error.line - 1;\n    const column = error.column - 1;\n    return {row, column};\n  }\n}\n\nexport default source => new CssValidator(source).getAnnotations();\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

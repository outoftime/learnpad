{
  "ast": null,
  "code": "import { Map } from 'immutable';\nimport find from 'lodash-es/find';\nimport isUndefined from 'lodash-es/isUndefined';\nimport reduce from 'lodash-es/reduce';\nimport { AccountMigration, User, UserAccount, UserIdentityProvider } from '../records';\nimport { AccountMigrationState, LoginState } from '../enums';\n\nfunction getToken(credential) {\n  if (credential.providerId === 'github.com') {\n    return credential.accessToken;\n  } else if (credential.providerId === 'google.com') {\n    return credential.idToken;\n  }\n\n  return null;\n}\n\nfunction addIdentityProvider(state, userData, credential) {\n  var providerData = find(userData.providerData, {\n    providerId: credential.providerId\n  });\n\n  if (isUndefined(providerData)) {\n    return state;\n  }\n\n  return state.setIn(['account', 'identityProviders', credential.providerId], new UserIdentityProvider({\n    accessToken: getToken(credential),\n    avatarUrl: providerData.photoURL,\n    displayName: providerData.displayName\n  }));\n}\n\nfunction createUserAccountFromProfileAndCredential(profile, credential) {\n  if (credential.providerId !== 'github.com') {\n    throw new Error(\"Unexpected credential provider \".concat(credential.providerId));\n  }\n\n  var displayName = profile.name || profile.login;\n  var avatarUrl = profile.avatar_url;\n  return new UserAccount({\n    displayName: displayName,\n    avatarUrl: avatarUrl,\n    identityProviders: new Map({\n      'github.com': new UserIdentityProvider({\n        accessToken: getToken(credential),\n        avatarUrl: avatarUrl,\n        displayName: displayName\n      })\n    })\n  });\n}\n\nfunction user(stateIn, action) {\n  var state = stateIn || new User();\n\n  switch (action.type) {\n    case 'USER_AUTHENTICATED':\n      {\n        var _action$payload = action.payload,\n            userData = _action$payload.user,\n            credentials = _action$payload.credentials;\n        return reduce(credentials, function (intermediateState, credential) {\n          return addIdentityProvider(intermediateState, userData, credential);\n        }, state.merge({\n          loginState: LoginState.AUTHENTICATED,\n          account: new UserAccount({\n            id: userData.uid,\n            displayName: userData.displayName,\n            avatarUrl: userData.photoURL\n          })\n        }));\n      }\n\n    case 'IDENTITY_LINKED':\n      return addIdentityProvider(state, action.payload.user, action.payload.credential);\n\n    case 'IDENTITY_UNLINKED':\n      return state.deleteIn(['account', 'identityProviders', action.payload.providerId]);\n\n    case 'ACCOUNT_MIGRATION_NEEDED':\n      return state.set('currentMigration', new AccountMigration({\n        userAccountToMerge: createUserAccountFromProfileAndCredential(action.payload.profile, action.payload.credential),\n        firebaseCredential: action.payload.credential\n      }));\n\n    case 'START_ACCOUNT_MIGRATION':\n      return state.setIn(['currentMigration', 'state'], AccountMigrationState.UNDO_GRACE_PERIOD);\n\n    case 'DISMISS_ACCOUNT_MIGRATION':\n      return state.delete('currentMigration');\n\n    case 'ACCOUNT_MIGRATION_UNDO_PERIOD_EXPIRED':\n      return state.setIn(['currentMigration', 'state'], AccountMigrationState.IN_PROGRESS);\n\n    case 'ACCOUNT_MIGRATION_COMPLETE':\n      return addIdentityProvider(state.setIn(['currentMigration', 'state'], AccountMigrationState.COMPLETE), action.payload.user, action.payload.credential);\n\n    case 'ACCOUNT_MIGRATION_ERROR':\n      return state.setIn(['currentMigration', 'state'], AccountMigrationState.ERROR);\n\n    case 'USER_LOGGED_OUT':\n      return new User().set('loginState', LoginState.ANONYMOUS);\n\n    default:\n      return state;\n  }\n}\n\nexport default user;",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/reducers/user.js"],
    "names": [
      "Map",
      "find",
      "isUndefined",
      "reduce",
      "AccountMigration",
      "User",
      "UserAccount",
      "UserIdentityProvider",
      "AccountMigrationState",
      "LoginState",
      "getToken",
      "credential",
      "providerId",
      "accessToken",
      "idToken",
      "addIdentityProvider",
      "state",
      "userData",
      "providerData",
      "setIn",
      "avatarUrl",
      "photoURL",
      "displayName",
      "createUserAccountFromProfileAndCredential",
      "profile",
      "Error",
      "name",
      "login",
      "avatar_url",
      "identityProviders",
      "user",
      "stateIn",
      "action",
      "type",
      "payload",
      "credentials",
      "intermediateState",
      "merge",
      "loginState",
      "AUTHENTICATED",
      "account",
      "id",
      "uid",
      "deleteIn",
      "set",
      "userAccountToMerge",
      "firebaseCredential",
      "UNDO_GRACE_PERIOD",
      "delete",
      "IN_PROGRESS",
      "COMPLETE",
      "ERROR",
      "ANONYMOUS"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {Map} from 'immutable';\nimport find from 'lodash-es/find';\nimport isUndefined from 'lodash-es/isUndefined';\nimport reduce from 'lodash-es/reduce';\n\nimport {\n  AccountMigration,\n  User,\n  UserAccount,\n  UserIdentityProvider,\n} from '../records';\nimport {AccountMigrationState, LoginState} from '../enums';\n\nfunction getToken(credential) {\n  if (credential.providerId === 'github.com') {\n    return credential.accessToken;\n  } else if (credential.providerId === 'google.com') {\n    return credential.idToken;\n  }\n  return null;\n}\n\nfunction addIdentityProvider(state, userData, credential) {\n  const providerData = find(userData.providerData, {\n    providerId: credential.providerId,\n  });\n  if (isUndefined(providerData)) {\n    return state;\n  }\n  return state.setIn(\n    ['account', 'identityProviders', credential.providerId],\n    new UserIdentityProvider({\n      accessToken: getToken(credential),\n      avatarUrl: providerData.photoURL,\n      displayName: providerData.displayName,\n    }),\n  );\n}\n\nfunction createUserAccountFromProfileAndCredential(profile, credential) {\n  if (credential.providerId !== 'github.com') {\n    throw new Error(`Unexpected credential provider ${credential.providerId}`);\n  }\n\n  const displayName = profile.name || profile.login;\n  const avatarUrl = profile.avatar_url;\n  return new UserAccount({\n    displayName,\n    avatarUrl,\n    identityProviders: new Map({\n      'github.com': new UserIdentityProvider({\n        accessToken: getToken(credential),\n        avatarUrl,\n        displayName,\n      }),\n    }),\n  });\n}\n\nfunction user(stateIn, action) {\n  const state = stateIn || new User();\n\n  switch (action.type) {\n    case 'USER_AUTHENTICATED': {\n      const {user: userData, credentials} = action.payload;\n\n      return reduce(\n        credentials,\n        (intermediateState, credential) =>\n          addIdentityProvider(intermediateState, userData, credential),\n        state.merge({\n          loginState: LoginState.AUTHENTICATED,\n          account: new UserAccount({\n            id: userData.uid,\n            displayName: userData.displayName,\n            avatarUrl: userData.photoURL,\n          }),\n        }),\n      );\n    }\n\n    case 'IDENTITY_LINKED':\n      return addIdentityProvider(\n        state,\n        action.payload.user,\n        action.payload.credential,\n      );\n\n    case 'IDENTITY_UNLINKED':\n      return state.deleteIn([\n        'account',\n        'identityProviders',\n        action.payload.providerId,\n      ]);\n\n    case 'ACCOUNT_MIGRATION_NEEDED':\n      return state.set(\n        'currentMigration',\n        new AccountMigration({\n          userAccountToMerge: createUserAccountFromProfileAndCredential(\n            action.payload.profile,\n            action.payload.credential,\n          ),\n          firebaseCredential: action.payload.credential,\n        }),\n      );\n\n    case 'START_ACCOUNT_MIGRATION':\n      return state.setIn(\n        ['currentMigration', 'state'],\n        AccountMigrationState.UNDO_GRACE_PERIOD,\n      );\n\n    case 'DISMISS_ACCOUNT_MIGRATION':\n      return state.delete('currentMigration');\n\n    case 'ACCOUNT_MIGRATION_UNDO_PERIOD_EXPIRED':\n      return state.setIn(\n        ['currentMigration', 'state'],\n        AccountMigrationState.IN_PROGRESS,\n      );\n\n    case 'ACCOUNT_MIGRATION_COMPLETE':\n      return addIdentityProvider(\n        state.setIn(\n          ['currentMigration', 'state'],\n          AccountMigrationState.COMPLETE,\n        ),\n        action.payload.user,\n        action.payload.credential,\n      );\n\n    case 'ACCOUNT_MIGRATION_ERROR':\n      return state.setIn(\n        ['currentMigration', 'state'],\n        AccountMigrationState.ERROR,\n      );\n\n    case 'USER_LOGGED_OUT':\n      return new User().set('loginState', LoginState.ANONYMOUS);\n\n    default:\n      return state;\n  }\n}\n\nexport default user;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

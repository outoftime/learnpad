{
  "ast": null,
  "code": "/*\n    \n*/\nvar ParsedComponents = require('../../result').ParsedComponents;\n\nvar Refiner = require('../refiner').Refiner;\n\nvar PATTERN = new RegExp(\"^\\\\s*(T|at|after|before|on|of|,|-)?\\\\s*$\");\n\nvar isDateOnly = exports.isDateOnly = function (result) {\n  return !result.start.isCertain('hour');\n};\n\nvar isTimeOnly = exports.isTimeOnly = function (result) {\n  return !result.start.isCertain('month') && !result.start.isCertain('weekday');\n};\n\nvar isAbleToMerge = exports.isAbleToMerge = function (text, prevResult, curResult) {\n  var textBetween = text.substring(prevResult.index + prevResult.text.length, curResult.index);\n  return textBetween.match(PATTERN);\n};\n\nvar mergeDateTimeComponent = exports.mergeDateTimeComponent = function (dateComponent, timeComponent) {\n  var dateTimeComponent = dateComponent.clone();\n\n  if (timeComponent.isCertain('hour')) {\n    dateTimeComponent.assign('hour', timeComponent.get('hour'));\n    dateTimeComponent.assign('minute', timeComponent.get('minute'));\n\n    if (timeComponent.isCertain('second')) {\n      dateTimeComponent.assign('second', timeComponent.get('second'));\n\n      if (timeComponent.isCertain('millisecond')) {\n        dateTimeComponent.assign('millisecond', timeComponent.get('millisecond'));\n      } else {\n        dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));\n      }\n    } else {\n      dateTimeComponent.imply('second', timeComponent.get('second'));\n      dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));\n    }\n  } else {\n    dateTimeComponent.imply('hour', timeComponent.get('hour'));\n    dateTimeComponent.imply('minute', timeComponent.get('minute'));\n    dateTimeComponent.imply('second', timeComponent.get('second'));\n    dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));\n  }\n\n  if (timeComponent.isCertain('meridiem')) {\n    dateTimeComponent.assign('meridiem', timeComponent.get('meridiem'));\n  } else if (timeComponent.get('meridiem') !== undefined && dateTimeComponent.get('meridiem') === undefined) {\n    dateTimeComponent.imply('meridiem', timeComponent.get('meridiem'));\n  }\n\n  if (dateTimeComponent.get('meridiem') == 1 && dateTimeComponent.get('hour') < 12) {\n    if (timeComponent.isCertain('hour')) {\n      dateTimeComponent.assign('hour', dateTimeComponent.get('hour') + 12);\n    } else {\n      dateTimeComponent.imply('hour', dateTimeComponent.get('hour') + 12);\n    }\n  }\n\n  return dateTimeComponent;\n};\n\nfunction mergeResult(text, dateResult, timeResult) {\n  var beginDate = dateResult.start;\n  var beginTime = timeResult.start;\n  var beginDateTime = mergeDateTimeComponent(beginDate, beginTime);\n\n  if (dateResult.end != null || timeResult.end != null) {\n    var endDate = dateResult.end == null ? dateResult.start : dateResult.end;\n    var endTime = timeResult.end == null ? timeResult.start : timeResult.end;\n    var endDateTime = mergeDateTimeComponent(endDate, endTime);\n\n    if (dateResult.end == null && endDateTime.date().getTime() < beginDateTime.date().getTime()) {\n      // Ex. 9pm - 1am\n      if (endDateTime.isCertain('day')) {\n        endDateTime.assign('day', endDateTime.get('day') + 1);\n      } else {\n        endDateTime.imply('day', endDateTime.get('day') + 1);\n      }\n    }\n\n    dateResult.end = endDateTime;\n  }\n\n  dateResult.start = beginDateTime;\n  var startIndex = Math.min(dateResult.index, timeResult.index);\n  var endIndex = Math.max(dateResult.index + dateResult.text.length, timeResult.index + timeResult.text.length);\n  dateResult.index = startIndex;\n  dateResult.text = text.substring(startIndex, endIndex);\n\n  for (var tag in timeResult.tags) {\n    dateResult.tags[tag] = true;\n  }\n\n  dateResult.tags['ENMergeDateAndTimeRefiner'] = true;\n  return dateResult;\n}\n\nexports.Refiner = function ENMergeDateTimeRefiner() {\n  Refiner.call(this);\n\n  this.refine = function (text, results, opt) {\n    if (results.length < 2) return results;\n    var mergedResult = [];\n    var currResult = null;\n    var prevResult = null;\n\n    for (var i = 1; i < results.length; i++) {\n      currResult = results[i];\n      prevResult = results[i - 1];\n\n      if (isDateOnly(prevResult) && isTimeOnly(currResult) && isAbleToMerge(text, prevResult, currResult)) {\n        prevResult = mergeResult(text, prevResult, currResult);\n        currResult = results[i + 1];\n        i += 1;\n      } else if (isDateOnly(currResult) && isTimeOnly(prevResult) && isAbleToMerge(text, prevResult, currResult)) {\n        prevResult = mergeResult(text, currResult, prevResult);\n        currResult = results[i + 1];\n        i += 1;\n      }\n\n      mergedResult.push(prevResult);\n    }\n\n    if (currResult != null) {\n      mergedResult.push(currResult);\n    }\n\n    return mergedResult;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/refiners/en/ENMergeDateTimeRefiner.js"
    ],
    "names": [
      "ParsedComponents",
      "require",
      "Refiner",
      "PATTERN",
      "RegExp",
      "isDateOnly",
      "exports",
      "result",
      "start",
      "isCertain",
      "isTimeOnly",
      "isAbleToMerge",
      "text",
      "prevResult",
      "curResult",
      "textBetween",
      "substring",
      "index",
      "length",
      "match",
      "mergeDateTimeComponent",
      "dateComponent",
      "timeComponent",
      "dateTimeComponent",
      "clone",
      "assign",
      "get",
      "imply",
      "undefined",
      "mergeResult",
      "dateResult",
      "timeResult",
      "beginDate",
      "beginTime",
      "beginDateTime",
      "end",
      "endDate",
      "endTime",
      "endDateTime",
      "date",
      "getTime",
      "startIndex",
      "Math",
      "min",
      "endIndex",
      "max",
      "tag",
      "tags",
      "ENMergeDateTimeRefiner",
      "call",
      "refine",
      "results",
      "opt",
      "mergedResult",
      "currResult",
      "i",
      "push"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n    \n*/\nvar ParsedComponents = require('../../result').ParsedComponents;\nvar Refiner = require('../refiner').Refiner;\n\nvar PATTERN = new RegExp(\"^\\\\s*(T|at|after|before|on|of|,|-)?\\\\s*$\");\n\nvar isDateOnly = exports.isDateOnly = function(result) {\n    return !result.start.isCertain('hour');\n}\n    \nvar isTimeOnly = exports.isTimeOnly = function(result) {\n    return !result.start.isCertain('month') && !result.start.isCertain('weekday');\n}\n\nvar isAbleToMerge = exports.isAbleToMerge = function(text, prevResult, curResult) {\n    var textBetween = text.substring(prevResult.index + prevResult.text.length, curResult.index);\n    return textBetween.match(PATTERN);\n}\n\nvar mergeDateTimeComponent = exports.mergeDateTimeComponent = function(dateComponent, timeComponent) {\n    var dateTimeComponent = dateComponent.clone();\n\n    if (timeComponent.isCertain('hour')) {\n        dateTimeComponent.assign('hour', timeComponent.get('hour'));\n        dateTimeComponent.assign('minute', timeComponent.get('minute'));\n\n        if (timeComponent.isCertain('second')) {\n            dateTimeComponent.assign('second', timeComponent.get('second'));\n\n            if (timeComponent.isCertain('millisecond')) {\n                dateTimeComponent.assign('millisecond', timeComponent.get('millisecond'));\n            } else {\n                dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));\n            }\n        } else {\n            dateTimeComponent.imply('second', timeComponent.get('second'));\n            dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));\n        }\n        \n    } else {\n        dateTimeComponent.imply('hour', timeComponent.get('hour'));\n        dateTimeComponent.imply('minute', timeComponent.get('minute'));\n        dateTimeComponent.imply('second', timeComponent.get('second'));\n        dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));\n    }\n\n    if (timeComponent.isCertain('meridiem')) {\n        dateTimeComponent.assign('meridiem', timeComponent.get('meridiem'));\n    } else if (\n        timeComponent.get('meridiem') !== undefined &&\n        dateTimeComponent.get('meridiem') === undefined\n    ) {\n        dateTimeComponent.imply('meridiem', timeComponent.get('meridiem'));\n    }\n\n    if (dateTimeComponent.get('meridiem') == 1 && dateTimeComponent.get('hour') < 12) {\n        if (timeComponent.isCertain('hour')) {\n            dateTimeComponent.assign('hour', dateTimeComponent.get('hour') + 12);\n        } else {\n            dateTimeComponent.imply('hour', dateTimeComponent.get('hour') + 12);\n        }\n    }\n\n    return dateTimeComponent;\n}\n\n\nfunction mergeResult(text, dateResult, timeResult){\n\n    var beginDate = dateResult.start;\n    var beginTime = timeResult.start;\n    var beginDateTime = mergeDateTimeComponent(beginDate, beginTime);\n    \n    if (dateResult.end != null || timeResult.end != null) {\n        \n        var endDate   = dateResult.end == null ? dateResult.start : dateResult.end;            \n        var endTime   = timeResult.end == null ? timeResult.start : timeResult.end;\n        var endDateTime = mergeDateTimeComponent(endDate, endTime);\n        \n        if (dateResult.end == null && endDateTime.date().getTime() < beginDateTime.date().getTime()) {\n            // Ex. 9pm - 1am\n            if (endDateTime.isCertain('day')) {\n                endDateTime.assign('day', endDateTime.get('day') + 1);\n            } else {\n                endDateTime.imply('day', endDateTime.get('day') + 1);\n            }\n        }\n\n        dateResult.end = endDateTime;\n    }\n\n    dateResult.start = beginDateTime;    \n\n    var startIndex = Math.min(dateResult.index, timeResult.index);\n    var endIndex = Math.max(\n            dateResult.index + dateResult.text.length, \n            timeResult.index + timeResult.text.length);\n    \n    dateResult.index = startIndex;\n    dateResult.text  = text.substring(startIndex, endIndex);\n\n    for (var tag in timeResult.tags) {\n        dateResult.tags[tag] = true;\n    }\n    dateResult.tags['ENMergeDateAndTimeRefiner'] = true;\n    return dateResult;\n}\n\nexports.Refiner = function ENMergeDateTimeRefiner() {\n    Refiner.call(this);\n\n\n    this.refine = function(text, results, opt) { \n\n        if (results.length < 2) return results;\n\n        var mergedResult = [];\n        var currResult = null;\n        var prevResult = null;\n\n        for (var i = 1; i < results.length; i++) {\n\n            currResult = results[i];\n            prevResult = results[i-1];\n            \n            if (isDateOnly(prevResult) && isTimeOnly(currResult) \n                    && isAbleToMerge(text, prevResult, currResult)) {\n                \n                prevResult = mergeResult(text, prevResult, currResult);\n                currResult = results[i + 1];\n                i += 1;\n                \n            } else if (isDateOnly(currResult) && isTimeOnly(prevResult)\n                    && isAbleToMerge(text, prevResult, currResult)) {\n                \n                prevResult = mergeResult(text, currResult, prevResult);\n                currResult = results[i + 1];\n                i += 1;\n            }\n            \n            mergedResult.push(prevResult);\n        }\n\n        if (currResult != null) {\n            mergedResult.push(currResult);\n        }\n\n        return mergedResult;\n    }\n}"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date. \n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '([0-9]{4})[\\\\-\\\\.\\\\/]' + '((?:' + util.MONTH_PATTERN + '|[0-9]{1,2}))[\\\\-\\\\.\\\\/]' + '([0-9]{1,2})' + '(?=\\\\W|$)', 'i');\nvar YEAR_NUMBER_GROUP = 2;\nvar MONTH_NUMBER_GROUP = 3;\nvar DATE_NUMBER_GROUP = 4;\n\nexports.Parser = function ENSlashDateFormatStartWithYearParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var text = match[0].substr(match[1].length);\n    var index = match.index + match[1].length;\n    var result = new ParsedResult({\n      text: text,\n      index: index,\n      ref: ref\n    });\n    var month = match[MONTH_NUMBER_GROUP].toLowerCase();\n    month = util.MONTH_OFFSET[month] | month;\n    result.start.assign('year', parseInt(match[YEAR_NUMBER_GROUP]));\n    result.start.assign('month', parseInt(month));\n    result.start.assign('day', parseInt(match[DATE_NUMBER_GROUP]));\n\n    if (moment(result.start.get('month')) > 12 || moment(result.start.get('month')) < 1 || moment(result.start.get('day')) > 31 || moment(result.start.get('day')) < 1) {\n      return null;\n    }\n\n    result.tags['ENDateFormatParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/en/ENSlashDateFormatStartWithYearParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "util",
      "PATTERN",
      "RegExp",
      "MONTH_PATTERN",
      "YEAR_NUMBER_GROUP",
      "MONTH_NUMBER_GROUP",
      "DATE_NUMBER_GROUP",
      "exports",
      "ENSlashDateFormatStartWithYearParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "substr",
      "length",
      "index",
      "result",
      "month",
      "toLowerCase",
      "MONTH_OFFSET",
      "start",
      "assign",
      "parseInt",
      "get",
      "tags"
    ],
    "mappings": "AAAA;;;;;;;AAOA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAAlC;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,YAA3C;;AACA,IAAIC,IAAI,GAAIH,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAII,OAAO,GAAG,IAAIC,MAAJ,CAAW,YACX,uBADW,GAEX,MAFW,GAEFF,IAAI,CAACG,aAFH,GAEmB,0BAFnB,GAGX,cAHW,GAIX,WAJA,EAIa,GAJb,CAAd;AAMA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,IAAIC,kBAAkB,GAAG,CAAzB;AACA,IAAIC,iBAAiB,GAAI,CAAzB;;AAEAC,OAAO,CAACT,MAAR,GAAiB,SAASU,oCAAT,GAA+C;AAC5DV,EAAAA,MAAM,CAACW,KAAP,CAAa,IAAb,EAAmBC,SAAnB;;AAEA,OAAKC,OAAL,GAAe,YAAW;AAAE,WAAOV,OAAP;AAAiB,GAA7C;;AAEA,OAAKW,OAAL,GAAe,UAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,GAA3B,EAA+B;AAE1C,QAAIH,IAAI,GAAGE,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,CAAgBF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAzB,CAAX;AACA,QAAIC,KAAK,GAAGJ,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAAC,CAAD,CAAL,CAASG,MAAnC;AAEA,QAAIE,MAAM,GAAG,IAAIrB,YAAJ,CAAiB;AAC1Bc,MAAAA,IAAI,EAAEA,IADoB;AAE1BM,MAAAA,KAAK,EAAEA,KAFmB;AAG1BL,MAAAA,GAAG,EAAEA;AAHqB,KAAjB,CAAb;AAMA,QAAIO,KAAK,GAAGN,KAAK,CAACV,kBAAD,CAAL,CAA0BiB,WAA1B,EAAZ;AACAD,IAAAA,KAAK,GAAGrB,IAAI,CAACuB,YAAL,CAAkBF,KAAlB,IAA2BA,KAAnC;AAEAD,IAAAA,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoB,MAApB,EAA4BC,QAAQ,CAACX,KAAK,CAACX,iBAAD,CAAN,CAApC;AACAgB,IAAAA,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoB,OAApB,EAA6BC,QAAQ,CAACL,KAAD,CAArC;AACAD,IAAAA,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoB,KAApB,EAA2BC,QAAQ,CAACX,KAAK,CAACT,iBAAD,CAAN,CAAnC;;AAEA,QAAIV,MAAM,CAACwB,MAAM,CAACI,KAAP,CAAaG,GAAb,CAAiB,OAAjB,CAAD,CAAN,GAAoC,EAApC,IAA0C/B,MAAM,CAACwB,MAAM,CAACI,KAAP,CAAaG,GAAb,CAAiB,OAAjB,CAAD,CAAN,GAAoC,CAA9E,IACA/B,MAAM,CAACwB,MAAM,CAACI,KAAP,CAAaG,GAAb,CAAiB,KAAjB,CAAD,CAAN,GAAkC,EADlC,IACwC/B,MAAM,CAACwB,MAAM,CAACI,KAAP,CAAaG,GAAb,CAAiB,KAAjB,CAAD,CAAN,GAAkC,CAD9E,EACiF;AAC7E,aAAO,IAAP;AACH;;AAEDP,IAAAA,MAAM,CAACQ,IAAP,CAAY,oBAAZ,IAAoC,IAApC;AACA,WAAOR,MAAP;AACH,GAzBD;AA0BH,CA/BD",
    "sourcesContent": [
      "/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date. \n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\nvar util  = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' \n            + '([0-9]{4})[\\\\-\\\\.\\\\/]'\n            + '((?:' + util.MONTH_PATTERN + '|[0-9]{1,2}))[\\\\-\\\\.\\\\/]'\n            + '([0-9]{1,2})'\n            + '(?=\\\\W|$)', 'i');\n\nvar YEAR_NUMBER_GROUP = 2;\nvar MONTH_NUMBER_GROUP = 3;\nvar DATE_NUMBER_GROUP  = 4;\n\nexports.Parser = function ENSlashDateFormatStartWithYearParser(){\n    Parser.apply(this, arguments);\n    \n    this.pattern = function() { return PATTERN; }\n    \n    this.extract = function(text, ref, match, opt){\n\n        var text = match[0].substr(match[1].length);\n        var index = match.index + match[1].length;\n\n        var result = new ParsedResult({\n            text: text,\n            index: index,\n            ref: ref,\n        })\n        \n        var month = match[MONTH_NUMBER_GROUP].toLowerCase();\n        month = util.MONTH_OFFSET[month] | month;\n\n        result.start.assign('year', parseInt(match[YEAR_NUMBER_GROUP]));\n        result.start.assign('month', parseInt(month));\n        result.start.assign('day', parseInt(match[DATE_NUMBER_GROUP]));\n\n        if (moment(result.start.get('month')) > 12 || moment(result.start.get('month')) < 1 ||\n            moment(result.start.get('day')) > 31 || moment(result.start.get('day')) < 1) {\n            return null;\n        }\n        \n        result.tags['ENDateFormatParser'] = true;\n        return result;\n    };\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "var _marked =\n/*#__PURE__*/\nregeneratorRuntime.mark(createSnapshot),\n    _marked2 =\n/*#__PURE__*/\nregeneratorRuntime.mark(exportProject),\n    _marked3 =\n/*#__PURE__*/\nregeneratorRuntime.mark(applicationLoaded),\n    _marked4 =\n/*#__PURE__*/\nregeneratorRuntime.mark(clients);\n\nimport { all, call, put, select, takeEvery } from 'redux-saga/effects';\nimport { createGistFromProject, createOrUpdateRepoFromProject } from '../clients/github';\nimport { createShareToClassroomUrl } from '../clients/googleClassroom';\nimport { createProjectSnapshot } from '../clients/firebase';\nimport { snapshotCreated, snapshotExportError, projectExported, projectExportError, gapiClientReady, gapiClientUnavailable } from '../actions/clients';\nimport { getCurrentProject } from '../selectors';\nimport { generateTextPreview } from '../util/compileProject';\nimport { bugsnagClient } from '../util/bugsnag';\nimport { loadAndConfigureGapi } from '../services/gapi';\nexport function createSnapshot() {\n  var project, snapshotKey;\n  return regeneratorRuntime.wrap(function createSnapshot$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return select(getCurrentProject);\n\n        case 2:\n          project = _context.sent;\n          _context.prev = 3;\n          _context.next = 6;\n          return call(createProjectSnapshot, project);\n\n        case 6:\n          snapshotKey = _context.sent;\n          _context.next = 9;\n          return put(snapshotCreated(snapshotKey));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](3);\n          _context.next = 15;\n          return put(snapshotExportError(_context.t0));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 11]]);\n}\nexport function exportProject(_ref) {\n  var exportType, state, project, user, exportData, url, name, _user$account$identit, accessToken, _ref2, _user$account$identit2, _accessToken, _ref3, snapshotKey, projectTitle;\n\n  return regeneratorRuntime.wrap(function exportProject$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          exportType = _ref.payload.exportType;\n          _context2.next = 3;\n          return select();\n\n        case 3:\n          state = _context2.sent;\n          project = getCurrentProject(state);\n          user = state.get('user');\n          exportData = {};\n          _context2.prev = 7;\n\n          if (!(exportType === 'gist')) {\n            _context2.next = 16;\n            break;\n          }\n\n          _user$account$identit = user.account.identityProviders.get('github.com'), accessToken = _user$account$identit.accessToken;\n          _context2.next = 12;\n          return call(createGistFromProject, project, accessToken);\n\n        case 12:\n          _ref2 = _context2.sent;\n          url = _ref2.html_url;\n          _context2.next = 36;\n          break;\n\n        case 16:\n          if (!(exportType === 'repo')) {\n            _context2.next = 26;\n            break;\n          }\n\n          _user$account$identit2 = user.account.identityProviders.get('github.com'), _accessToken = _user$account$identit2.accessToken;\n          _context2.next = 20;\n          return call(createOrUpdateRepoFromProject, project, _accessToken);\n\n        case 20:\n          _ref3 = _context2.sent;\n          url = _ref3.url;\n          name = _ref3.name;\n\n          if (name) {\n            exportData = {\n              name: name\n            };\n          }\n\n          _context2.next = 36;\n          break;\n\n        case 26:\n          if (!(exportType === 'classroom')) {\n            _context2.next = 36;\n            break;\n          }\n\n          _context2.next = 29;\n          return call(createProjectSnapshot, project);\n\n        case 29:\n          snapshotKey = _context2.sent;\n          _context2.next = 32;\n          return call(generateTextPreview, project);\n\n        case 32:\n          projectTitle = _context2.sent;\n          _context2.next = 35;\n          return call(createShareToClassroomUrl, snapshotKey, projectTitle);\n\n        case 35:\n          url = _context2.sent;\n\n        case 36:\n          _context2.next = 38;\n          return put(projectExported(url, exportType, project.projectKey, exportData));\n\n        case 38:\n          _context2.next = 44;\n          break;\n\n        case 40:\n          _context2.prev = 40;\n          _context2.t0 = _context2[\"catch\"](7);\n          _context2.next = 44;\n          return put(projectExportError(exportType));\n\n        case 44:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[7, 40]]);\n}\nexport function applicationLoaded() {\n  return regeneratorRuntime.wrap(function applicationLoaded$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return loadAndConfigureGapi();\n\n        case 3:\n          _context3.next = 5;\n          return put(gapiClientReady());\n\n        case 5:\n          _context3.next = 13;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return call([bugsnagClient, 'notify'], _context3.t0);\n\n        case 11:\n          _context3.next = 13;\n          return put(gapiClientUnavailable(_context3.t0));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\nexport default function clients() {\n  return regeneratorRuntime.wrap(function clients$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery('CREATE_SNAPSHOT', createSnapshot), takeEvery('EXPORT_PROJECT', exportProject), takeEvery('APPLICATION_LOADED', applicationLoaded)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/sagas/clients.js"],
    "names": [
      "createSnapshot",
      "exportProject",
      "applicationLoaded",
      "clients",
      "all",
      "call",
      "put",
      "select",
      "takeEvery",
      "createGistFromProject",
      "createOrUpdateRepoFromProject",
      "createShareToClassroomUrl",
      "createProjectSnapshot",
      "snapshotCreated",
      "snapshotExportError",
      "projectExported",
      "projectExportError",
      "gapiClientReady",
      "gapiClientUnavailable",
      "getCurrentProject",
      "generateTextPreview",
      "bugsnagClient",
      "loadAndConfigureGapi",
      "project",
      "snapshotKey",
      "exportType",
      "payload",
      "state",
      "user",
      "get",
      "exportData",
      "account",
      "identityProviders",
      "accessToken",
      "url",
      "html_url",
      "name",
      "projectTitle",
      "projectKey"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {all, call, put, select, takeEvery} from 'redux-saga/effects';\nimport {\n  createGistFromProject,\n  createOrUpdateRepoFromProject,\n} from '../clients/github';\nimport {createShareToClassroomUrl} from '../clients/googleClassroom';\nimport {createProjectSnapshot} from '../clients/firebase';\nimport {\n  snapshotCreated,\n  snapshotExportError,\n  projectExported,\n  projectExportError,\n  gapiClientReady,\n  gapiClientUnavailable,\n} from '../actions/clients';\nimport {getCurrentProject} from '../selectors';\nimport {generateTextPreview} from '../util/compileProject';\nimport {bugsnagClient} from '../util/bugsnag';\nimport {loadAndConfigureGapi} from '../services/gapi';\n\nexport function* createSnapshot() {\n  const project = yield select(getCurrentProject);\n  try {\n    const snapshotKey = yield call(createProjectSnapshot, project);\n    yield put(snapshotCreated(snapshotKey));\n  } catch (e) {\n    yield put(snapshotExportError(e));\n  }\n}\n\nexport function* exportProject({payload: {exportType}}) {\n  const state = yield select();\n  const project = getCurrentProject(state);\n  const user = state.get('user');\n  let exportData = {};\n  let url, name;\n\n  try {\n    if (exportType === 'gist') {\n      const {accessToken} = user.account.identityProviders.get('github.com');\n\n      ({html_url: url} = yield call(\n        createGistFromProject,\n        project,\n        accessToken,\n      ));\n    } else if (exportType === 'repo') {\n      const {accessToken} = user.account.identityProviders.get('github.com');\n\n      ({url, name} = yield call(\n        createOrUpdateRepoFromProject,\n        project,\n        accessToken,\n      ));\n      if (name) {\n        exportData = {name};\n      }\n    } else if (exportType === 'classroom') {\n      const snapshotKey = yield call(createProjectSnapshot, project);\n      const projectTitle = yield call(generateTextPreview, project);\n      url = yield call(createShareToClassroomUrl, snapshotKey, projectTitle);\n    }\n    yield put(projectExported(url, exportType, project.projectKey, exportData));\n  } catch (e) {\n    yield put(projectExportError(exportType));\n  }\n}\n\nexport function* applicationLoaded() {\n  try {\n    yield loadAndConfigureGapi();\n    yield put(gapiClientReady());\n  } catch (error) {\n    yield call([bugsnagClient, 'notify'], error);\n    yield put(gapiClientUnavailable(error));\n  }\n}\n\nexport default function* clients() {\n  yield all([\n    takeEvery('CREATE_SNAPSHOT', createSnapshot),\n    takeEvery('EXPORT_PROJECT', exportProject),\n    takeEvery('APPLICATION_LOADED', applicationLoaded),\n  ]);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

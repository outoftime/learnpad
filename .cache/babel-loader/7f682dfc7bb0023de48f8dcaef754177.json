{
  "ast": null,
  "code": "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport Channel from 'jschannel';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport bindAll from 'lodash-es/bindAll';\nimport constant from 'lodash-es/constant';\nimport { t } from 'i18next';\nimport bowser from '../services/bowser';\nimport { createError } from '../util/errorUtils';\nimport retryingFailedImports from '../util/retryingFailedImports';\nimport { sourceDelimiter } from '../util/compileProject';\nimport { CompiledProject as CompiledProjectRecord } from '../records';\nvar sandboxOptions = ['allow-forms', 'allow-popups', 'allow-popups-to-escape-sandbox', 'allow-scripts', 'allow-top-navigation'].join(' ');\nvar nextId = 1;\n\nvar PreviewFrame =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PreviewFrame, _React$Component);\n\n  function PreviewFrame(props) {\n    var _this;\n\n    _classCallCheck(this, PreviewFrame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PreviewFrame).call(this, props));\n    var source = props.compiledProject.source;\n    bindAll(_assertThisInitialized(_this), '_attachToFrame', '_handleInfiniteLoop');\n    _this.render = constant(React.createElement(\"div\", {\n      className: \"preview__frame-container\"\n    }, React.createElement(\"iframe\", {\n      className: \"preview__frame\",\n      name: \"preview-frame-\".concat(nextId++),\n      ref: _this._attachToFrame,\n      sandbox: sandboxOptions,\n      srcDoc: source\n    })));\n    return _this;\n  }\n\n  _createClass(PreviewFrame, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevConsoleEntries = _ref.consoleEntries;\n      var _this$props = this.props,\n          consoleEntries = _this$props.consoleEntries,\n          isActive = _this$props.isActive;\n\n      if (this._channel && isActive) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = consoleEntries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                expression = _step$value[1].expression;\n\n            if (!prevConsoleEntries.has(key) && expression) {\n              this._evaluateConsoleExpression(key, expression);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_evaluateConsoleExpression\",\n    value: function () {\n      var _evaluateConsoleExpression2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(key, expression) {\n        var _this2 = this;\n\n        var _ref2, hasExpressionStatement;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return retryingFailedImports(function () {\n                  return import(\n                  /* webpackChunkName: \"mainAsync\" */\n                  '../util/javascript');\n                });\n\n              case 2:\n                _ref2 = _context.sent;\n                hasExpressionStatement = _ref2.hasExpressionStatement;\n\n                // eslint-disable-next-line prefer-reflect\n                this._channel.call({\n                  method: 'evaluateExpression',\n                  params: expression,\n                  success: function success(printedResult) {\n                    _this2.props.onConsoleValue(key, hasExpressionStatement(expression) ? printedResult : null, _this2.props.compiledProject.compiledProjectKey);\n                  },\n                  error: function error(name, message) {\n                    var normalizedError = createError({\n                      name: name,\n                      message: message\n                    });\n\n                    _this2.props.onConsoleError(key, _this2.props.compiledProject.compiledProjectKey, {\n                      name: name,\n                      reason: normalizedError.type,\n                      text: normalizedError.message,\n                      raw: normalizedError.message,\n                      type: 'error'\n                    });\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _evaluateConsoleExpression(_x, _x2) {\n        return _evaluateConsoleExpression2.apply(this, arguments);\n      }\n\n      return _evaluateConsoleExpression;\n    }()\n  }, {\n    key: \"_runtimeErrorLineOffset\",\n    value: function _runtimeErrorLineOffset() {\n      var firstSourceLine = this.props.compiledProject.source.split('\\n').indexOf(sourceDelimiter) + 2;\n      return firstSourceLine - 1;\n    }\n  }, {\n    key: \"_handleErrorMessage\",\n    value: function _handleErrorMessage(error) {\n      var line = error.line - this._runtimeErrorLineOffset();\n\n      if (error.message === 'Loop Broken!') {\n        this._handleInfiniteLoop(line);\n\n        return;\n      }\n\n      var normalizedError = createError(error);\n\n      if (bowser.is('Safari')) {\n        line = 1;\n      }\n\n      this.props.onRuntimeError({\n        reason: normalizedError.type,\n        text: normalizedError.message,\n        raw: normalizedError.message,\n        row: line - 1,\n        column: error.column,\n        type: 'error'\n      });\n    }\n  }, {\n    key: \"_handleInfiniteLoop\",\n    value: function _handleInfiniteLoop(line) {\n      var message = t('errors.javascriptRuntime.infinite-loop');\n      this.props.onRuntimeError({\n        reason: 'infinite-loop',\n        text: message,\n        raw: message,\n        row: line - 1,\n        column: 0,\n        type: 'error'\n      });\n    }\n  }, {\n    key: \"_handleConsoleLog\",\n    value: function _handleConsoleLog(printedValue) {\n      var compiledProjectKey = this.props.compiledProject.compiledProjectKey;\n      this.props.onConsoleLog(printedValue, compiledProjectKey);\n    }\n  }, {\n    key: \"_attachToFrame\",\n    value: function _attachToFrame(frame) {\n      var _this3 = this;\n\n      if (!frame) {\n        if (this._channel) {\n          this._channel.destroy();\n\n          Reflect.deleteProperty(this, '_channel');\n        }\n\n        return;\n      }\n\n      this._channel = Channel.build({\n        window: frame.contentWindow,\n        origin: '*',\n        onReady: function onReady() {\n          frame.classList.add('preview__frame_loaded');\n        }\n      });\n\n      this._channel.bind('error', function (_trans, params) {\n        if (_this3.props.isActive) {\n          _this3._handleErrorMessage(params);\n        }\n      });\n\n      this._channel.bind('log', function (_trans, params) {\n        if (_this3.props.isActive) {\n          _this3._handleConsoleLog(params);\n        }\n      });\n    }\n  }]);\n\n  return PreviewFrame;\n}(React.Component);\n\nPreviewFrame.propTypes = {\n  compiledProject: PropTypes.instanceOf(CompiledProjectRecord).isRequired,\n  consoleEntries: ImmutablePropTypes.iterable.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  onConsoleError: PropTypes.func.isRequired,\n  onConsoleLog: PropTypes.func.isRequired,\n  onConsoleValue: PropTypes.func.isRequired,\n  onRuntimeError: PropTypes.func.isRequired\n};\nexport default PreviewFrame;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/components/PreviewFrame.jsx"
    ],
    "names": [
      "Channel",
      "React",
      "PropTypes",
      "ImmutablePropTypes",
      "bindAll",
      "constant",
      "t",
      "bowser",
      "createError",
      "retryingFailedImports",
      "sourceDelimiter",
      "CompiledProject",
      "CompiledProjectRecord",
      "sandboxOptions",
      "join",
      "nextId",
      "PreviewFrame",
      "props",
      "source",
      "compiledProject",
      "render",
      "_attachToFrame",
      "prevConsoleEntries",
      "consoleEntries",
      "isActive",
      "_channel",
      "key",
      "expression",
      "has",
      "_evaluateConsoleExpression",
      "hasExpressionStatement",
      "call",
      "method",
      "params",
      "success",
      "printedResult",
      "onConsoleValue",
      "compiledProjectKey",
      "error",
      "name",
      "message",
      "normalizedError",
      "onConsoleError",
      "reason",
      "type",
      "text",
      "raw",
      "firstSourceLine",
      "split",
      "indexOf",
      "line",
      "_runtimeErrorLineOffset",
      "_handleInfiniteLoop",
      "is",
      "onRuntimeError",
      "row",
      "column",
      "printedValue",
      "onConsoleLog",
      "frame",
      "destroy",
      "Reflect",
      "deleteProperty",
      "build",
      "window",
      "contentWindow",
      "origin",
      "onReady",
      "classList",
      "add",
      "bind",
      "_trans",
      "_handleErrorMessage",
      "_handleConsoleLog",
      "Component",
      "propTypes",
      "instanceOf",
      "isRequired",
      "iterable",
      "bool",
      "func"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import Channel from 'jschannel';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport bindAll from 'lodash-es/bindAll';\nimport constant from 'lodash-es/constant';\nimport {t} from 'i18next';\n\nimport bowser from '../services/bowser';\nimport {createError} from '../util/errorUtils';\nimport retryingFailedImports from '../util/retryingFailedImports';\nimport {sourceDelimiter} from '../util/compileProject';\nimport {CompiledProject as CompiledProjectRecord} from '../records';\n\nconst sandboxOptions = [\n  'allow-forms',\n  'allow-popups',\n  'allow-popups-to-escape-sandbox',\n  'allow-scripts',\n  'allow-top-navigation',\n].join(' ');\n\nlet nextId = 1;\n\nclass PreviewFrame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      compiledProject: {source},\n    } = props;\n\n    bindAll(this, '_attachToFrame', '_handleInfiniteLoop');\n\n    this.render = constant(\n      <div className=\"preview__frame-container\">\n        <iframe\n          className=\"preview__frame\"\n          name={`preview-frame-${nextId++}`}\n          ref={this._attachToFrame}\n          sandbox={sandboxOptions}\n          srcDoc={source}\n        />\n      </div>,\n    );\n  }\n\n  componentDidUpdate({consoleEntries: prevConsoleEntries}) {\n    const {consoleEntries, isActive} = this.props;\n\n    if (this._channel && isActive) {\n      for (const [key, {expression}] of consoleEntries) {\n        if (!prevConsoleEntries.has(key) && expression) {\n          this._evaluateConsoleExpression(key, expression);\n        }\n      }\n    }\n  }\n\n  async _evaluateConsoleExpression(key, expression) {\n    const {hasExpressionStatement} = await retryingFailedImports(() =>\n      import(\n        /* webpackChunkName: \"mainAsync\" */\n        '../util/javascript'\n      ),\n    );\n    // eslint-disable-next-line prefer-reflect\n    this._channel.call({\n      method: 'evaluateExpression',\n      params: expression,\n      success: printedResult => {\n        this.props.onConsoleValue(\n          key,\n          hasExpressionStatement(expression) ? printedResult : null,\n          this.props.compiledProject.compiledProjectKey,\n        );\n      },\n      error: (name, message) => {\n        const normalizedError = createError({name, message});\n\n        this.props.onConsoleError(\n          key,\n          this.props.compiledProject.compiledProjectKey,\n          {\n            name,\n            reason: normalizedError.type,\n            text: normalizedError.message,\n            raw: normalizedError.message,\n            type: 'error',\n          },\n        );\n      },\n    });\n  }\n\n  _runtimeErrorLineOffset() {\n    const firstSourceLine =\n      this.props.compiledProject.source.split('\\n').indexOf(sourceDelimiter) +\n      2;\n\n    return firstSourceLine - 1;\n  }\n\n  _handleErrorMessage(error) {\n    let line = error.line - this._runtimeErrorLineOffset();\n\n    if (error.message === 'Loop Broken!') {\n      this._handleInfiniteLoop(line);\n      return;\n    }\n\n    const normalizedError = createError(error);\n\n    if (bowser.is('Safari')) {\n      line = 1;\n    }\n\n    this.props.onRuntimeError({\n      reason: normalizedError.type,\n      text: normalizedError.message,\n      raw: normalizedError.message,\n      row: line - 1,\n      column: error.column,\n      type: 'error',\n    });\n  }\n\n  _handleInfiniteLoop(line) {\n    const message = t('errors.javascriptRuntime.infinite-loop');\n    this.props.onRuntimeError({\n      reason: 'infinite-loop',\n      text: message,\n      raw: message,\n      row: line - 1,\n      column: 0,\n      type: 'error',\n    });\n  }\n\n  _handleConsoleLog(printedValue) {\n    const {compiledProjectKey} = this.props.compiledProject;\n    this.props.onConsoleLog(printedValue, compiledProjectKey);\n  }\n\n  _attachToFrame(frame) {\n    if (!frame) {\n      if (this._channel) {\n        this._channel.destroy();\n        Reflect.deleteProperty(this, '_channel');\n      }\n      return;\n    }\n\n    this._channel = Channel.build({\n      window: frame.contentWindow,\n      origin: '*',\n      onReady() {\n        frame.classList.add('preview__frame_loaded');\n      },\n    });\n\n    this._channel.bind('error', (_trans, params) => {\n      if (this.props.isActive) {\n        this._handleErrorMessage(params);\n      }\n    });\n    this._channel.bind('log', (_trans, params) => {\n      if (this.props.isActive) {\n        this._handleConsoleLog(params);\n      }\n    });\n  }\n}\n\nPreviewFrame.propTypes = {\n  compiledProject: PropTypes.instanceOf(CompiledProjectRecord).isRequired,\n  consoleEntries: ImmutablePropTypes.iterable.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  onConsoleError: PropTypes.func.isRequired,\n  onConsoleLog: PropTypes.func.isRequired,\n  onConsoleValue: PropTypes.func.isRequired,\n  onRuntimeError: PropTypes.func.isRequired,\n};\n\nexport default PreviewFrame;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

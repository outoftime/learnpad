{
  "ast": null,
  "code": "/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = /(\\W|^)hace\\s*([0-9]+|medi[oa]|una?)\\s*(minutos?|horas?|semanas?|d[ií]as?|mes(es)?|años?)(?=(?:\\W|$))/i;\n\nexports.Parser = function ESTimeAgoFormatParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    if (match.index > 0 && text[match.index - 1].match(/\\w/)) return null;\n    var text = match[0];\n    text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    index = match.index + match[1].length;\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var num = parseInt(match[2]);\n\n    if (isNaN(num)) {\n      if (match[2].match(/medi/)) {\n        num = 0.5;\n      } else {\n        num = 1;\n      }\n    }\n\n    var date = moment(ref);\n\n    if (match[3].match(/hora/) || match[3].match(/minuto/)) {\n      if (match[3].match(/hora/)) {\n        date.add(-num, 'hour');\n      } else if (match[3].match(/minuto/)) {\n        date.add(-num, 'minute');\n      }\n\n      result.start.imply('day', date.date());\n      result.start.imply('month', date.month() + 1);\n      result.start.imply('year', date.year());\n      result.start.assign('hour', date.hour());\n      result.start.assign('minute', date.minute());\n      result.tags['ESTimeAgoFormatParser'] = true;\n      return result;\n    }\n\n    if (match[3].match(/semana/)) {\n      date.add(-num, 'week');\n      result.start.imply('day', date.date());\n      result.start.imply('month', date.month() + 1);\n      result.start.imply('year', date.year());\n      result.start.imply('weekday', date.day());\n      return result;\n    }\n\n    if (match[3].match(/d[ií]a/)) {\n      date.add(-num, 'd');\n    }\n\n    if (match[3].match(/mes/)) {\n      date.add(-num, 'month');\n    }\n\n    if (match[3].match(/año/)) {\n      date.add(-num, 'year');\n    }\n\n    result.start.assign('day', date.date());\n    result.start.assign('month', date.month() + 1);\n    result.start.assign('year', date.year());\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/es/ESTimeAgoFormatParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "PATTERN",
      "exports",
      "ESTimeAgoFormatParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "substr",
      "length",
      "result",
      "num",
      "parseInt",
      "isNaN",
      "date",
      "add",
      "start",
      "imply",
      "month",
      "year",
      "assign",
      "hour",
      "minute",
      "tags",
      "day"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n\n\n*/\n\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = /(\\W|^)hace\\s*([0-9]+|medi[oa]|una?)\\s*(minutos?|horas?|semanas?|d[ií]as?|mes(es)?|años?)(?=(?:\\W|$))/i;\n\nexports.Parser = function ESTimeAgoFormatParser(){\n    Parser.apply(this, arguments);\n\n    this.pattern = function() {\n        return PATTERN;\n    }\n\n    this.extract = function(text, ref, match, opt){\n\n        if (match.index > 0 && text[match.index-1].match(/\\w/)) return null;\n\n        var text = match[0];\n        text  = match[0].substr(match[1].length, match[0].length - match[1].length);\n        index = match.index + match[1].length;\n\n        var result = new ParsedResult({\n            index: index,\n            text: text,\n            ref: ref,\n        });\n\n        var num = parseInt(match[2]);\n        if (isNaN(num)) {\n          if (match[2].match(/medi/)) {\n            num = 0.5;\n          } else {\n            num = 1;\n          }\n        }\n\n        var date = moment(ref);\n\n        if (match[3].match(/hora/) || match[3].match(/minuto/)) {\n            if (match[3].match(/hora/)) {\n\n                date.add(-num, 'hour');\n\n            } else if (match[3].match(/minuto/)) {\n\n                date.add(-num, 'minute');\n            }\n\n            result.start.imply('day', date.date());\n            result.start.imply('month', date.month() + 1);\n            result.start.imply('year', date.year());\n            result.start.assign('hour', date.hour());\n            result.start.assign('minute', date.minute());\n            result.tags['ESTimeAgoFormatParser'] = true;\n            return result;\n        }\n\n        if (match[3].match(/semana/)) {\n            date.add(-num, 'week');\n\n            result.start.imply('day', date.date());\n            result.start.imply('month', date.month() + 1);\n            result.start.imply('year', date.year());\n            result.start.imply('weekday', date.day());\n            return result;\n        }\n\n        if (match[3].match(/d[ií]a/)) {\n            date.add(-num, 'd');\n        }\n\n        if (match[3].match(/mes/)) {\n            date.add(-num, 'month');\n        }\n\n        if (match[3].match(/año/)) {\n\n            date.add(-num, 'year');\n        }\n\n        result.start.assign('day', date.date());\n        result.start.assign('month', date.month() + 1);\n        result.start.assign('year', date.year());\n        return result;\n\n    };\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

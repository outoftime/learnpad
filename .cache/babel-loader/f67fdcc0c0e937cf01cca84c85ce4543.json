{
  "ast": null,
  "code": "'use strict';\n\nexports.parse = parse;\nexports.stringify = stringify;\n\nvar trim = require('trim');\n\nvar comma = ',';\nvar space = ' ';\nvar empty = '';\n/* Parse comma-separated tokens to an array. */\n\nfunction parse(value) {\n  var values = [];\n  var input = String(value || empty);\n  var index = input.indexOf(comma);\n  var lastIndex = 0;\n  var end = false;\n  var val;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    val = trim(input.slice(lastIndex, index));\n\n    if (val || !end) {\n      values.push(val);\n    }\n\n    lastIndex = index + 1;\n    index = input.indexOf(comma, lastIndex);\n  }\n\n  return values;\n}\n/* Compile an array to comma-separated tokens.\n * `options.padLeft` (default: `true`) pads a space left of each\n * token, and `options.padRight` (default: `false`) pads a space\n * to the right of each token. */\n\n\nfunction stringify(values, options) {\n  var settings = options || {};\n  var left = settings.padLeft === false ? empty : space;\n  var right = settings.padRight ? space : empty;\n  /* Ensure the last empty entry is seen. */\n\n  if (values[values.length - 1] === empty) {\n    values = values.concat(empty);\n  }\n\n  return trim(values.join(right + comma + left));\n}",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/comma-separated-tokens/index.js"
    ],
    "names": [
      "exports",
      "parse",
      "stringify",
      "trim",
      "require",
      "comma",
      "space",
      "empty",
      "value",
      "values",
      "input",
      "String",
      "index",
      "indexOf",
      "lastIndex",
      "end",
      "val",
      "length",
      "slice",
      "push",
      "options",
      "settings",
      "left",
      "padLeft",
      "right",
      "padRight",
      "concat",
      "join"
    ],
    "mappings": "AAAA;;AAEAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,KAAK,GAAG,EAAZ;AAEA;;AACA,SAASN,KAAT,CAAeO,KAAf,EAAsB;AACpB,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACH,KAAK,IAAID,KAAV,CAAlB;AACA,MAAIK,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcR,KAAd,CAAZ;AACA,MAAIS,SAAS,GAAG,CAAhB;AACA,MAAIC,GAAG,GAAG,KAAV;AACA,MAAIC,GAAJ;;AAEA,SAAO,CAACD,GAAR,EAAa;AACX,QAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBA,MAAAA,KAAK,GAAGF,KAAK,CAACO,MAAd;AACAF,MAAAA,GAAG,GAAG,IAAN;AACD;;AAEDC,IAAAA,GAAG,GAAGb,IAAI,CAACO,KAAK,CAACQ,KAAN,CAAYJ,SAAZ,EAAuBF,KAAvB,CAAD,CAAV;;AAEA,QAAII,GAAG,IAAI,CAACD,GAAZ,EAAiB;AACfN,MAAAA,MAAM,CAACU,IAAP,CAAYH,GAAZ;AACD;;AAEDF,IAAAA,SAAS,GAAGF,KAAK,GAAG,CAApB;AACAA,IAAAA,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcR,KAAd,EAAqBS,SAArB,CAAR;AACD;;AAED,SAAOL,MAAP;AACD;AAED;;;;;;AAIA,SAASP,SAAT,CAAmBO,MAAnB,EAA2BW,OAA3B,EAAoC;AAClC,MAAIC,QAAQ,GAAGD,OAAO,IAAI,EAA1B;AACA,MAAIE,IAAI,GAAGD,QAAQ,CAACE,OAAT,KAAqB,KAArB,GAA6BhB,KAA7B,GAAqCD,KAAhD;AACA,MAAIkB,KAAK,GAAGH,QAAQ,CAACI,QAAT,GAAoBnB,KAApB,GAA4BC,KAAxC;AAEA;;AACA,MAAIE,MAAM,CAACA,MAAM,CAACQ,MAAP,GAAgB,CAAjB,CAAN,KAA8BV,KAAlC,EAAyC;AACvCE,IAAAA,MAAM,GAAGA,MAAM,CAACiB,MAAP,CAAcnB,KAAd,CAAT;AACD;;AAED,SAAOJ,IAAI,CAACM,MAAM,CAACkB,IAAP,CAAYH,KAAK,GAAGnB,KAAR,GAAgBiB,IAA5B,CAAD,CAAX;AACD",
    "sourcesContent": [
      "'use strict'\n\nexports.parse = parse\nexports.stringify = stringify\n\nvar trim = require('trim')\n\nvar comma = ','\nvar space = ' '\nvar empty = ''\n\n/* Parse comma-separated tokens to an array. */\nfunction parse(value) {\n  var values = []\n  var input = String(value || empty)\n  var index = input.indexOf(comma)\n  var lastIndex = 0\n  var end = false\n  var val\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    val = trim(input.slice(lastIndex, index))\n\n    if (val || !end) {\n      values.push(val)\n    }\n\n    lastIndex = index + 1\n    index = input.indexOf(comma, lastIndex)\n  }\n\n  return values\n}\n\n/* Compile an array to comma-separated tokens.\n * `options.padLeft` (default: `true`) pads a space left of each\n * token, and `options.padRight` (default: `false`) pads a space\n * to the right of each token. */\nfunction stringify(values, options) {\n  var settings = options || {}\n  var left = settings.padLeft === false ? empty : space\n  var right = settings.padRight ? space : empty\n\n  /* Ensure the last empty entry is seen. */\n  if (values[values.length - 1] === empty) {\n    values = values.concat(empty)\n  }\n\n  return trim(values.join(right + comma + left))\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

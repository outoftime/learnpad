{
  "ast": null,
  "code": "var _handleActions;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport constant from 'lodash-es/constant';\nimport inRange from 'lodash-es/inRange';\nimport isNil from 'lodash-es/isNil';\nimport { handleActions } from 'redux-actions';\nimport { ConsoleState, ConsoleEntry, Error } from '../records';\nimport { consoleValueProduced, consoleErrorProduced, evaluateConsoleEntry, clearConsoleEntries, previousConsoleHistory, nextConsoleHistory, consoleInputChanged, consoleLogBatchProduced } from '../actions/console';\nvar initialState = new ConsoleState();\n\nfunction updateConsoleForHistoryIndex(state, index) {\n  var expressionHistory = state.history.toList().map(function (entry) {\n    return entry.expression;\n  }).filter(function (expression) {\n    return expression !== null;\n  }).concat(state.nextConsoleEntry).reverse();\n\n  if (!inRange(index, expressionHistory.size)) {\n    return state;\n  }\n\n  var expression = expressionHistory.get(index);\n  var nextState = state.set('historyEntryIndex', index).set('currentInputValue', expression);\n\n  if (index === 0) {\n    return nextState.delete('nextConsoleEntry');\n  }\n\n  if (isNil(state.nextConsoleEntry) && !state.history.isEmpty()) {\n    return nextState.set('nextConsoleEntry', state.currentInputValue);\n  }\n\n  return nextState;\n}\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, consoleValueProduced, function (state, _ref) {\n  var _ref$payload = _ref.payload,\n      compiledProjectKey = _ref$payload.compiledProjectKey,\n      key = _ref$payload.key,\n      value = _ref$payload.value;\n  return state.updateIn(['history', key], function (input) {\n    return input.set('value', value).set('evaluatedByCompiledProjectKey', compiledProjectKey);\n  });\n}), _defineProperty(_handleActions, consoleErrorProduced, function (state, _ref2) {\n  var _ref2$payload = _ref2.payload,\n      compiledProjectKey = _ref2$payload.compiledProjectKey,\n      key = _ref2$payload.key,\n      error = _ref2$payload.error;\n  return state.updateIn(['history', key], function (input) {\n    return input.set('error', Error.fromJS(error)).set('evaluatedByCompiledProjectKey', compiledProjectKey);\n  });\n}), _defineProperty(_handleActions, evaluateConsoleEntry, function (state, _ref3) {\n  var expression = _ref3.payload,\n      key = _ref3.meta.key;\n  return expression.trim() === '' ? state : state.setIn(['history', key], new ConsoleEntry({\n    expression: expression\n  })).delete('currentInputValue').delete('nextConsoleEntry').delete('historyEntryIndex');\n}), _defineProperty(_handleActions, clearConsoleEntries, constant(initialState)), _defineProperty(_handleActions, consoleInputChanged, function (state, _ref4) {\n  var value = _ref4.payload.value;\n  return state.set('currentInputValue', value);\n}), _defineProperty(_handleActions, consoleLogBatchProduced, function (state, _ref5) {\n  var entries = _ref5.payload.entries;\n  return state.update('history', function (history) {\n    return history.withMutations(function (map) {\n      entries.forEach(function (_ref6) {\n        var value = _ref6.value,\n            compiledProjectKey = _ref6.compiledProjectKey,\n            key = _ref6.key;\n        map.set(key, new ConsoleEntry({\n          value: value,\n          evaluatedByCompiledProjectKey: compiledProjectKey\n        }));\n      });\n    });\n  });\n}), _defineProperty(_handleActions, previousConsoleHistory, function (state) {\n  var historyIndex = state.historyEntryIndex + 1;\n  return updateConsoleForHistoryIndex(state, historyIndex);\n}), _defineProperty(_handleActions, nextConsoleHistory, function (state) {\n  var historyIndex = state.historyEntryIndex - 1;\n  return updateConsoleForHistoryIndex(state, historyIndex);\n}), _handleActions), initialState);",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/reducers/console.js"],
    "names": [
      "constant",
      "inRange",
      "isNil",
      "handleActions",
      "ConsoleState",
      "ConsoleEntry",
      "Error",
      "consoleValueProduced",
      "consoleErrorProduced",
      "evaluateConsoleEntry",
      "clearConsoleEntries",
      "previousConsoleHistory",
      "nextConsoleHistory",
      "consoleInputChanged",
      "consoleLogBatchProduced",
      "initialState",
      "updateConsoleForHistoryIndex",
      "state",
      "index",
      "expressionHistory",
      "history",
      "toList",
      "map",
      "entry",
      "expression",
      "filter",
      "concat",
      "nextConsoleEntry",
      "reverse",
      "size",
      "get",
      "nextState",
      "set",
      "delete",
      "isEmpty",
      "currentInputValue",
      "payload",
      "compiledProjectKey",
      "key",
      "value",
      "updateIn",
      "input",
      "error",
      "fromJS",
      "meta",
      "trim",
      "setIn",
      "entries",
      "update",
      "withMutations",
      "forEach",
      "evaluatedByCompiledProjectKey",
      "historyIndex",
      "historyEntryIndex"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import constant from 'lodash-es/constant';\nimport inRange from 'lodash-es/inRange';\nimport isNil from 'lodash-es/isNil';\nimport {handleActions} from 'redux-actions';\n\nimport {ConsoleState, ConsoleEntry, Error} from '../records';\n\nimport {\n  consoleValueProduced,\n  consoleErrorProduced,\n  evaluateConsoleEntry,\n  clearConsoleEntries,\n  previousConsoleHistory,\n  nextConsoleHistory,\n  consoleInputChanged,\n  consoleLogBatchProduced,\n} from '../actions/console';\n\nconst initialState = new ConsoleState();\n\nfunction updateConsoleForHistoryIndex(state, index) {\n  const expressionHistory = state.history\n    .toList()\n    .map(entry => entry.expression)\n    .filter(expression => expression !== null)\n    .concat(state.nextConsoleEntry)\n    .reverse();\n\n  if (!inRange(index, expressionHistory.size)) {\n    return state;\n  }\n\n  const expression = expressionHistory.get(index);\n\n  const nextState = state\n    .set('historyEntryIndex', index)\n    .set('currentInputValue', expression);\n\n  if (index === 0) {\n    return nextState.delete('nextConsoleEntry');\n  }\n\n  if (isNil(state.nextConsoleEntry) && !state.history.isEmpty()) {\n    return nextState.set('nextConsoleEntry', state.currentInputValue);\n  }\n\n  return nextState;\n}\n\nexport default handleActions(\n  {\n    [consoleValueProduced]: (\n      state,\n      {payload: {compiledProjectKey, key, value}},\n    ) =>\n      state.updateIn(['history', key], input =>\n        input\n          .set('value', value)\n          .set('evaluatedByCompiledProjectKey', compiledProjectKey),\n      ),\n\n    [consoleErrorProduced]: (\n      state,\n      {payload: {compiledProjectKey, key, error}},\n    ) =>\n      state.updateIn(['history', key], input =>\n        input\n          .set('error', Error.fromJS(error))\n          .set('evaluatedByCompiledProjectKey', compiledProjectKey),\n      ),\n\n    [evaluateConsoleEntry]: (state, {payload: expression, meta: {key}}) =>\n      expression.trim() === ''\n        ? state\n        : state\n            .setIn(['history', key], new ConsoleEntry({expression}))\n            .delete('currentInputValue')\n            .delete('nextConsoleEntry')\n            .delete('historyEntryIndex'),\n\n    [clearConsoleEntries]: constant(initialState),\n\n    [consoleInputChanged]: (state, {payload: {value}}) =>\n      state.set('currentInputValue', value),\n\n    [consoleLogBatchProduced]: (state, {payload: {entries}}) =>\n      state.update('history', history =>\n        history.withMutations(map => {\n          entries.forEach(({value, compiledProjectKey, key}) => {\n            map.set(\n              key,\n              new ConsoleEntry({\n                value,\n                evaluatedByCompiledProjectKey: compiledProjectKey,\n              }),\n            );\n          });\n        }),\n      ),\n\n    [previousConsoleHistory]: state => {\n      const historyIndex = state.historyEntryIndex + 1;\n\n      return updateConsoleForHistoryIndex(state, historyIndex);\n    },\n\n    [nextConsoleHistory]: state => {\n      const historyIndex = state.historyEntryIndex - 1;\n      return updateConsoleForHistoryIndex(state, historyIndex);\n    },\n  },\n  initialState,\n);\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

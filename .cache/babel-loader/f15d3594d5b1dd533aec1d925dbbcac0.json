{
  "ast": null,
  "code": "/*\n\n    The parser for parsing US's date format that begin with month's name.\n\n    EX.\n        - January 13\n        - January 13, 2012\n        - January 13 - 15, 2012\n        - Tuesday, January 13, 2012\n\n    Watch out for:\n        - January 12:00\n        - January 12.44\n        - January 1222344\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '(?:' + '(?:on\\\\s*?)?' + '(Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sun\\\\.?|Mon\\\\.?|Tue\\\\.?|Wed\\\\.?|Thu\\\\.?|Fri\\\\.?|Sat\\\\.?)' + '\\\\s*,?\\\\s*)?' + '(' + util.MONTH_PATTERN + ')' + '(?:-|\\/|\\\\s*,?\\\\s*)' + '(([0-9]{1,2})(?:st|nd|rd|th)?|' + util.ORDINAL_WORDS_PATTERN + ')(?!\\\\s*(?:am|pm))\\\\s*' + '' + '(?:' + '(?:to|\\\\-)\\\\s*' + '(([0-9]{1,2})(?:st|nd|rd|th)?| ' + util.ORDINAL_WORDS_PATTERN + ')\\\\s*' + ')?' + '(?:' + '(?:-|\\/|\\\\s*,?\\\\s*)' + '(?:([0-9]{4})\\\\s*(BE|AD|BC)?|([0-9]{1,4})\\\\s*(AD|BC))\\\\s*' + ')?' + '(?=\\\\W|$)(?!\\\\:\\\\d)', 'i');\nvar WEEKDAY_GROUP = 2;\nvar MONTH_NAME_GROUP = 3;\nvar DATE_GROUP = 4;\nvar DATE_NUM_GROUP = 5;\nvar DATE_TO_GROUP = 6;\nvar DATE_TO_NUM_GROUP = 7;\nvar YEAR_GROUP = 8;\nvar YEAR_BE_GROUP = 9;\nvar YEAR_GROUP2 = 10;\nvar YEAR_BE_GROUP2 = 11;\n\nexports.Parser = function ENMonthNameMiddleEndianParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var result = new ParsedResult({\n      text: match[0].substr(match[1].length, match[0].length - match[1].length),\n      index: match.index + match[1].length,\n      ref: ref\n    });\n    var month = match[MONTH_NAME_GROUP];\n    month = util.MONTH_OFFSET[month.toLowerCase()];\n    var day = match[DATE_NUM_GROUP] ? parseInt(match[DATE_NUM_GROUP]) : util.ORDINAL_WORDS[match[DATE_GROUP].trim().replace('-', ' ').toLowerCase()];\n    var year = null;\n\n    if (match[YEAR_GROUP] || match[YEAR_GROUP2]) {\n      year = match[YEAR_GROUP] || match[YEAR_GROUP2];\n      year = parseInt(year);\n      var yearBE = match[YEAR_BE_GROUP] || match[YEAR_BE_GROUP2];\n\n      if (yearBE) {\n        if (/BE/i.test(yearBE)) {\n          // Buddhist Era\n          year = year - 543;\n        } else if (/BC/i.test(yearBE)) {\n          // Before Christ\n          year = -year;\n        }\n      } else if (year < 100) {\n        year = year + 2000;\n      }\n    }\n\n    if (year) {\n      result.start.assign('day', day);\n      result.start.assign('month', month);\n      result.start.assign('year', year);\n    } else {\n      //Find the most appropriated year\n      var refMoment = moment(ref);\n      refMoment.month(month - 1);\n      refMoment.date(day);\n      var nextYear = refMoment.clone().add(1, 'y');\n      var lastYear = refMoment.clone().add(-1, 'y');\n\n      if (Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = nextYear;\n      } else if (Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = lastYear;\n      }\n\n      result.start.assign('day', day);\n      result.start.assign('month', month);\n      result.start.imply('year', refMoment.year());\n    } // Weekday component\n\n\n    if (match[WEEKDAY_GROUP]) {\n      var weekday = match[WEEKDAY_GROUP];\n      weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()];\n      result.start.assign('weekday', weekday);\n    } // Text can be 'range' value. Such as 'January 12 - 13, 2012'\n\n\n    if (match[DATE_TO_GROUP]) {\n      var endDate = match[DATE_TO_NUM_GROUP] ? endDate = parseInt(match[DATE_TO_NUM_GROUP]) : util.ORDINAL_WORDS[match[DATE_TO_GROUP].replace('-', ' ').trim().toLowerCase()];\n      result.end = result.start.clone();\n      result.end.assign('day', endDate);\n    }\n\n    result.tags['ENMonthNameMiddleEndianParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/en/ENMonthNameMiddleEndianParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "util",
      "PATTERN",
      "RegExp",
      "MONTH_PATTERN",
      "ORDINAL_WORDS_PATTERN",
      "WEEKDAY_GROUP",
      "MONTH_NAME_GROUP",
      "DATE_GROUP",
      "DATE_NUM_GROUP",
      "DATE_TO_GROUP",
      "DATE_TO_NUM_GROUP",
      "YEAR_GROUP",
      "YEAR_BE_GROUP",
      "YEAR_GROUP2",
      "YEAR_BE_GROUP2",
      "exports",
      "ENMonthNameMiddleEndianParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "result",
      "substr",
      "length",
      "index",
      "month",
      "MONTH_OFFSET",
      "toLowerCase",
      "day",
      "parseInt",
      "ORDINAL_WORDS",
      "trim",
      "replace",
      "year",
      "yearBE",
      "test",
      "start",
      "assign",
      "refMoment",
      "date",
      "nextYear",
      "clone",
      "add",
      "lastYear",
      "Math",
      "abs",
      "diff",
      "imply",
      "weekday",
      "WEEKDAY_OFFSET",
      "endDate",
      "end",
      "tags"
    ],
    "mappings": "AAAA;;;;;;;;;;;;;;;AAgBA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAAlC;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,YAA3C;;AACA,IAAIC,IAAI,GAAIH,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAII,OAAO,GAAG,IAAIC,MAAJ,CAAW,YACrB,KADqB,GAEjB,cAFiB,GAGjB,oHAHiB,GAIrB,cAJqB,GAKrB,GALqB,GAKfF,IAAI,CAACG,aALU,GAKM,GALN,GAMrB,qBANqB,GAOrB,gCAPqB,GAOcH,IAAI,CAACI,qBAPnB,GAO0C,wBAP1C,GAOqE,EAPrE,GAQrB,KARqB,GASjB,gBATiB,GAUjB,iCAViB,GAUmBJ,IAAI,CAACI,qBAVxB,GAUgD,OAVhD,GAWrB,IAXqB,GAYrB,KAZqB,GAajB,qBAbiB,GAcjB,2DAdiB,GAerB,IAfqB,GAgBrB,qBAhBU,EAgBa,GAhBb,CAAd;AAkBA,IAAIC,aAAa,GAAG,CAApB;AACA,IAAIC,gBAAgB,GAAG,CAAvB;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,aAAa,GAAG,CAApB;AACA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,aAAa,GAAG,CAApB;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,cAAc,GAAG,EAArB;;AAEAC,OAAO,CAACjB,MAAR,GAAiB,SAASkB,6BAAT,GAAwC;AACrDlB,EAAAA,MAAM,CAACmB,KAAP,CAAa,IAAb,EAAmBC,SAAnB;;AAEA,OAAKC,OAAL,GAAe,YAAW;AAAE,WAAOlB,OAAP;AAAiB,GAA7C;;AAEA,OAAKmB,OAAL,GAAe,UAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,GAA3B,EAA+B;AAE1C,QAAIC,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC1BsB,MAAAA,IAAI,EAAEE,KAAK,CAAC,CAAD,CAAL,CAASG,MAAT,CAAgBH,KAAK,CAAC,CAAD,CAAL,CAASI,MAAzB,EAAiCJ,KAAK,CAAC,CAAD,CAAL,CAASI,MAAT,GAAkBJ,KAAK,CAAC,CAAD,CAAL,CAASI,MAA5D,CADoB;AAE1BC,MAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,GAAcL,KAAK,CAAC,CAAD,CAAL,CAASI,MAFJ;AAG1BL,MAAAA,GAAG,EAAEA;AAHqB,KAAjB,CAAb;AAOA,QAAIO,KAAK,GAAGN,KAAK,CAACjB,gBAAD,CAAjB;AACAuB,IAAAA,KAAK,GAAG7B,IAAI,CAAC8B,YAAL,CAAkBD,KAAK,CAACE,WAAN,EAAlB,CAAR;AACA,QAAIC,GAAG,GAAGT,KAAK,CAACf,cAAD,CAAL,GACNyB,QAAQ,CAACV,KAAK,CAACf,cAAD,CAAN,CADF,GAENR,IAAI,CAACkC,aAAL,CAAmBX,KAAK,CAAChB,UAAD,CAAL,CAAkB4B,IAAlB,GAAyBC,OAAzB,CAAiC,GAAjC,EAAsC,GAAtC,EAA2CL,WAA3C,EAAnB,CAFJ;AAIA,QAAIM,IAAI,GAAG,IAAX;;AACA,QAAId,KAAK,CAACZ,UAAD,CAAL,IAAqBY,KAAK,CAACV,WAAD,CAA9B,EAA6C;AACzCwB,MAAAA,IAAI,GAAGd,KAAK,CAACZ,UAAD,CAAL,IAAqBY,KAAK,CAACV,WAAD,CAAjC;AACAwB,MAAAA,IAAI,GAAGJ,QAAQ,CAACI,IAAD,CAAf;AAEA,UAAIC,MAAM,GAAGf,KAAK,CAACX,aAAD,CAAL,IAAwBW,KAAK,CAACT,cAAD,CAA1C;;AACA,UAAIwB,MAAJ,EAAY;AACR,YAAI,MAAMC,IAAN,CAAWD,MAAX,CAAJ,EAAwB;AACpB;AACAD,UAAAA,IAAI,GAAGA,IAAI,GAAG,GAAd;AACH,SAHD,MAGO,IAAI,MAAME,IAAN,CAAWD,MAAX,CAAJ,EAAwB;AAC3B;AACAD,UAAAA,IAAI,GAAG,CAACA,IAAR;AACH;AACJ,OARD,MAQO,IAAIA,IAAI,GAAG,GAAX,EAAe;AAElBA,QAAAA,IAAI,GAAGA,IAAI,GAAG,IAAd;AACH;AACJ;;AAED,QAAGA,IAAH,EAAQ;AACJZ,MAAAA,MAAM,CAACe,KAAP,CAAaC,MAAb,CAAoB,KAApB,EAA2BT,GAA3B;AACAP,MAAAA,MAAM,CAACe,KAAP,CAAaC,MAAb,CAAoB,OAApB,EAA6BZ,KAA7B;AACAJ,MAAAA,MAAM,CAACe,KAAP,CAAaC,MAAb,CAAoB,MAApB,EAA4BJ,IAA5B;AACH,KAJD,MAIO;AAEH;AACA,UAAIK,SAAS,GAAG9C,MAAM,CAAC0B,GAAD,CAAtB;AACAoB,MAAAA,SAAS,CAACb,KAAV,CAAgBA,KAAK,GAAG,CAAxB;AACAa,MAAAA,SAAS,CAACC,IAAV,CAAeX,GAAf;AAEA,UAAIY,QAAQ,GAAGF,SAAS,CAACG,KAAV,GAAkBC,GAAlB,CAAsB,CAAtB,EAAyB,GAAzB,CAAf;AACA,UAAIC,QAAQ,GAAGL,SAAS,CAACG,KAAV,GAAkBC,GAAlB,CAAsB,CAAC,CAAvB,EAA0B,GAA1B,CAAf;;AACA,UAAIE,IAAI,CAACC,GAAL,CAASL,QAAQ,CAACM,IAAT,CAActD,MAAM,CAAC0B,GAAD,CAApB,CAAT,IAAuC0B,IAAI,CAACC,GAAL,CAASP,SAAS,CAACQ,IAAV,CAAetD,MAAM,CAAC0B,GAAD,CAArB,CAAT,CAA3C,EAAkF;AAC9EoB,QAAAA,SAAS,GAAGE,QAAZ;AACH,OAFD,MAGK,IAAII,IAAI,CAACC,GAAL,CAASF,QAAQ,CAACG,IAAT,CAActD,MAAM,CAAC0B,GAAD,CAApB,CAAT,IAAuC0B,IAAI,CAACC,GAAL,CAASP,SAAS,CAACQ,IAAV,CAAetD,MAAM,CAAC0B,GAAD,CAArB,CAAT,CAA3C,EAAkF;AACnFoB,QAAAA,SAAS,GAAGK,QAAZ;AACH;;AAEDtB,MAAAA,MAAM,CAACe,KAAP,CAAaC,MAAb,CAAoB,KAApB,EAA2BT,GAA3B;AACAP,MAAAA,MAAM,CAACe,KAAP,CAAaC,MAAb,CAAoB,OAApB,EAA6BZ,KAA7B;AACAJ,MAAAA,MAAM,CAACe,KAAP,CAAaW,KAAb,CAAmB,MAAnB,EAA2BT,SAAS,CAACL,IAAV,EAA3B;AACH,KA1DyC,CA4D1C;;;AACA,QAAId,KAAK,CAAClB,aAAD,CAAT,EAA0B;AACtB,UAAI+C,OAAO,GAAG7B,KAAK,CAAClB,aAAD,CAAnB;AACA+C,MAAAA,OAAO,GAAGpD,IAAI,CAACqD,cAAL,CAAoBD,OAAO,CAACrB,WAAR,EAApB,CAAV;AACAN,MAAAA,MAAM,CAACe,KAAP,CAAaC,MAAb,CAAoB,SAApB,EAA+BW,OAA/B;AACH,KAjEyC,CAmE1C;;;AACA,QAAI7B,KAAK,CAACd,aAAD,CAAT,EAA0B;AACtB,UAAI6C,OAAO,GAAG/B,KAAK,CAACb,iBAAD,CAAL,GACV4C,OAAO,GAAGrB,QAAQ,CAACV,KAAK,CAACb,iBAAD,CAAN,CADR,GAEVV,IAAI,CAACkC,aAAL,CAAmBX,KAAK,CAACd,aAAD,CAAL,CAAqB2B,OAArB,CAA6B,GAA7B,EAAkC,GAAlC,EAAuCD,IAAvC,GAA8CJ,WAA9C,EAAnB,CAFJ;AAIAN,MAAAA,MAAM,CAAC8B,GAAP,GAAa9B,MAAM,CAACe,KAAP,CAAaK,KAAb,EAAb;AACApB,MAAAA,MAAM,CAAC8B,GAAP,CAAWd,MAAX,CAAkB,KAAlB,EAAyBa,OAAzB;AACH;;AAED7B,IAAAA,MAAM,CAAC+B,IAAP,CAAY,+BAAZ,IAA+C,IAA/C;AACA,WAAO/B,MAAP;AACH,GA/ED;AAgFH,CArFD",
    "sourcesContent": [
      "/*\n\n    The parser for parsing US's date format that begin with month's name.\n\n    EX.\n        - January 13\n        - January 13, 2012\n        - January 13 - 15, 2012\n        - Tuesday, January 13, 2012\n\n    Watch out for:\n        - January 12:00\n        - January 12.44\n        - January 1222344\n*/\n\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\nvar util  = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' +\n    '(?:' +\n        '(?:on\\\\s*?)?' +\n        '(Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sun\\\\.?|Mon\\\\.?|Tue\\\\.?|Wed\\\\.?|Thu\\\\.?|Fri\\\\.?|Sat\\\\.?)' +\n    '\\\\s*,?\\\\s*)?' +\n    '(' + util.MONTH_PATTERN + ')' +\n    '(?:-|\\/|\\\\s*,?\\\\s*)' +\n    '(([0-9]{1,2})(?:st|nd|rd|th)?|' + util.ORDINAL_WORDS_PATTERN +')(?!\\\\s*(?:am|pm))\\\\s*' + '' + \n    '(?:' +\n        '(?:to|\\\\-)\\\\s*' +\n        '(([0-9]{1,2})(?:st|nd|rd|th)?| ' + util.ORDINAL_WORDS_PATTERN + ')\\\\s*' +\n    ')?' +\n    '(?:' +\n        '(?:-|\\/|\\\\s*,?\\\\s*)' +\n        '(?:([0-9]{4})\\\\s*(BE|AD|BC)?|([0-9]{1,4})\\\\s*(AD|BC))\\\\s*' +\n    ')?' +\n    '(?=\\\\W|$)(?!\\\\:\\\\d)', 'i');\n\nvar WEEKDAY_GROUP = 2;\nvar MONTH_NAME_GROUP = 3;\nvar DATE_GROUP = 4;\nvar DATE_NUM_GROUP = 5;\nvar DATE_TO_GROUP = 6;\nvar DATE_TO_NUM_GROUP = 7;\nvar YEAR_GROUP = 8;\nvar YEAR_BE_GROUP = 9;\nvar YEAR_GROUP2 = 10;\nvar YEAR_BE_GROUP2 = 11;\n\nexports.Parser = function ENMonthNameMiddleEndianParser(){\n    Parser.apply(this, arguments);\n\n    this.pattern = function() { return PATTERN; }\n\n    this.extract = function(text, ref, match, opt){\n\n        var result = new ParsedResult({\n            text: match[0].substr(match[1].length, match[0].length - match[1].length),\n            index: match.index + match[1].length,\n            ref: ref,\n        });\n\n\n        var month = match[MONTH_NAME_GROUP];\n        month = util.MONTH_OFFSET[month.toLowerCase()];\n        var day = match[DATE_NUM_GROUP] ?\n            parseInt(match[DATE_NUM_GROUP]) :\n            util.ORDINAL_WORDS[match[DATE_GROUP].trim().replace('-', ' ').toLowerCase()];\n\n        var year = null;\n        if (match[YEAR_GROUP] || match[YEAR_GROUP2]) {\n            year = match[YEAR_GROUP] || match[YEAR_GROUP2];\n            year = parseInt(year);\n\n            var yearBE = match[YEAR_BE_GROUP] || match[YEAR_BE_GROUP2];\n            if (yearBE) {\n                if (/BE/i.test(yearBE)) {\n                    // Buddhist Era\n                    year = year - 543;\n                } else if (/BC/i.test(yearBE)) {\n                    // Before Christ\n                    year = -year;\n                }\n            } else if (year < 100){\n\n                year = year + 2000;\n            }\n        }\n\n        if(year){\n            result.start.assign('day', day);\n            result.start.assign('month', month);\n            result.start.assign('year', year);\n        } else {\n\n            //Find the most appropriated year\n            var refMoment = moment(ref);\n            refMoment.month(month - 1);\n            refMoment.date(day);\n\n            var nextYear = refMoment.clone().add(1, 'y');\n            var lastYear = refMoment.clone().add(-1, 'y');\n            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){\n                refMoment = nextYear;\n            }\n            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){\n                refMoment = lastYear;\n            }\n\n            result.start.assign('day', day);\n            result.start.assign('month', month);\n            result.start.imply('year', refMoment.year());\n        }\n\n        // Weekday component\n        if (match[WEEKDAY_GROUP]) {\n            var weekday = match[WEEKDAY_GROUP];\n            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]\n            result.start.assign('weekday', weekday);\n        }\n\n        // Text can be 'range' value. Such as 'January 12 - 13, 2012'\n        if (match[DATE_TO_GROUP]) {\n            var endDate = match[DATE_TO_NUM_GROUP] ?\n                endDate = parseInt(match[DATE_TO_NUM_GROUP]) :\n                util.ORDINAL_WORDS[match[DATE_TO_GROUP].replace('-', ' ').trim().toLowerCase()];\n\n            result.end = result.start.clone();\n            result.end.assign('day', endDate);\n        }\n\n        result.tags['ENMonthNameMiddleEndianParser'] = true;\n        return result;\n    }\n};"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

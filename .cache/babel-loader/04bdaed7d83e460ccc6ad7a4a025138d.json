{
  "ast": null,
  "code": "/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\nvar moment = require('moment');\n\nvar Refiner = require('./refiner').Refiner;\n\nexports.Refiner = function ForwardDateRefiner() {\n  Refiner.call(this);\n\n  this.refine = function (text, results, opt) {\n    if (!opt['forwardDate']) {\n      return results;\n    }\n\n    results.forEach(function (result) {\n      var refMoment = moment(result.ref);\n\n      if (result.start.isCertain('day') && result.start.isCertain('month') && !result.start.isCertain('year') && refMoment.isAfter(result.start.moment())) {\n        // Adjust year into the future\n        for (var i = 0; i < 3 && refMoment.isAfter(result.start.moment()); i++) {\n          result.start.imply('year', result.start.get('year') + 1);\n\n          if (result.end && !result.end.isCertain('year')) {\n            result.end.imply('year', result.end.get('year') + 1);\n          }\n        }\n\n        result.tags['ExtractTimezoneOffsetRefiner'] = true;\n      }\n\n      if (!result.start.isCertain('day') && !result.start.isCertain('month') && !result.start.isCertain('year') && result.start.isCertain('weekday') && refMoment.isAfter(result.start.moment())) {\n        // Adjust date to the coming week\n        if (refMoment.day() > result.start.get('weekday')) {\n          refMoment.day(result.start.get('weekday') + 7);\n        } else {\n          refMoment.day(result.start.get('weekday'));\n        }\n\n        result.start.imply('day', refMoment.date());\n        result.start.imply('month', refMoment.month() + 1);\n        result.start.imply('year', refMoment.year());\n        result.tags['ExtractTimezoneOffsetRefiner'] = true;\n      }\n    });\n    return results;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/refiners/ForwardDateRefiner.js"
    ],
    "names": [
      "moment",
      "require",
      "Refiner",
      "exports",
      "ForwardDateRefiner",
      "call",
      "refine",
      "text",
      "results",
      "opt",
      "forEach",
      "result",
      "refMoment",
      "ref",
      "start",
      "isCertain",
      "isAfter",
      "i",
      "imply",
      "get",
      "end",
      "tags",
      "day",
      "date",
      "month",
      "year"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\nvar moment = require('moment');\nvar Refiner = require('./refiner').Refiner;\n\nexports.Refiner = function ForwardDateRefiner() {\n    Refiner.call(this);\n\n    this.refine = function(text, results, opt) {\n\n        if (!opt['forwardDate']) {\n            return results;\n        }\n\n        results.forEach(function(result) {\n\n            var refMoment = moment(result.ref);\n\n            if (result.start.isCertain('day') && result.start.isCertain('month') &&\n                !result.start.isCertain('year') &&\n                refMoment.isAfter(result.start.moment())\n            ) {\n                // Adjust year into the future\n                for (var i=0; i < 3 && refMoment.isAfter(result.start.moment()); i++) {\n                    result.start.imply('year', result.start.get('year') + 1);\n\n                    if (result.end && !result.end.isCertain('year')) {\n                        result.end.imply('year', result.end.get('year') + 1);\n                    }\n                }\n\n                result.tags['ExtractTimezoneOffsetRefiner'] = true;\n            }\n\n            if (!result.start.isCertain('day') && !result.start.isCertain('month') && !result.start.isCertain('year') &&\n                result.start.isCertain('weekday') &&\n                refMoment.isAfter(result.start.moment())\n            ) {\n                // Adjust date to the coming week\n                if (refMoment.day() > result.start.get('weekday')) {\n                    refMoment.day(result.start.get('weekday') + 7);\n                } else {\n                    refMoment.day(result.start.get('weekday'));\n                }\n\n                result.start.imply('day', refMoment.date());\n                result.start.imply('month', refMoment.month() + 1);\n                result.start.imply('year', refMoment.year());\n                result.tags['ExtractTimezoneOffsetRefiner'] = true;\n            }\n        });\n\n        return results;\n    }\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import ImmutablePropTypes from 'react-immutable-proptypes';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport partial from 'lodash-es/partial';\nimport { Notification as NotificationRecord } from '../records';\nimport NotificationContainer from './NotificationContainer';\nimport { GenericNotification, GistImportError, SnapshotNotification, ProjectExportNotification } from './notifications';\nvar NOTIFICATION_COMPONENTS = {\n  'gist-import-error': GistImportError,\n  'snapshot-created': SnapshotNotification,\n  'project-export-complete': ProjectExportNotification\n};\n\nfunction chooseNotificationComponent(notification) {\n  if (notification.type in NOTIFICATION_COMPONENTS) {\n    return NOTIFICATION_COMPONENTS[notification.type];\n  }\n\n  return GenericNotification;\n}\n\nexport default function NotificationList(_ref) {\n  var notifications = _ref.notifications,\n      onNotificationDismissed = _ref.onNotificationDismissed,\n      onUpdateNotificationMetadata = _ref.onUpdateNotificationMetadata;\n\n  if (notifications.isEmpty()) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"notification-list\"\n  }, notifications.map(function (notification) {\n    var Notification = chooseNotificationComponent(notification);\n    return React.createElement(NotificationContainer, {\n      key: notification.type,\n      severity: notification.severity,\n      onDismissed: partial(onNotificationDismissed, notification)\n    }, React.createElement(Notification, {\n      metadata: notification.metadata,\n      type: notification.type,\n      onUpdateMetadata: partial(onUpdateNotificationMetadata, notification)\n    }));\n  }));\n}\nNotificationList.propTypes = {\n  notifications: ImmutablePropTypes.iterableOf(NotificationRecord).isRequired,\n  onNotificationDismissed: PropTypes.func.isRequired,\n  onUpdateNotificationMetadata: PropTypes.func.isRequired\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/components/NotificationList.jsx"
    ],
    "names": [
      "ImmutablePropTypes",
      "React",
      "PropTypes",
      "partial",
      "Notification",
      "NotificationRecord",
      "NotificationContainer",
      "GenericNotification",
      "GistImportError",
      "SnapshotNotification",
      "ProjectExportNotification",
      "NOTIFICATION_COMPONENTS",
      "chooseNotificationComponent",
      "notification",
      "type",
      "NotificationList",
      "notifications",
      "onNotificationDismissed",
      "onUpdateNotificationMetadata",
      "isEmpty",
      "map",
      "severity",
      "metadata",
      "propTypes",
      "iterableOf",
      "isRequired",
      "func"
    ],
    "mappings": "AAAA,OAAOA,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,SAAQC,YAAY,IAAIC,kBAAxB,QAAiD,YAAjD;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SACEC,mBADF,EAEEC,eAFF,EAGEC,oBAHF,EAIEC,yBAJF,QAKO,iBALP;AAOA,IAAMC,uBAAuB,GAAG;AAC9B,uBAAqBH,eADS;AAE9B,sBAAoBC,oBAFU;AAG9B,6BAA2BC;AAHG,CAAhC;;AAMA,SAASE,2BAAT,CAAqCC,YAArC,EAAmD;AACjD,MAAIA,YAAY,CAACC,IAAb,IAAqBH,uBAAzB,EAAkD;AAChD,WAAOA,uBAAuB,CAACE,YAAY,CAACC,IAAd,CAA9B;AACD;;AACD,SAAOP,mBAAP;AACD;;AAED,eAAe,SAASQ,gBAAT,OAIZ;AAAA,MAHDC,aAGC,QAHDA,aAGC;AAAA,MAFDC,uBAEC,QAFDA,uBAEC;AAAA,MADDC,4BACC,QADDA,4BACC;;AACD,MAAIF,aAAa,CAACG,OAAd,EAAJ,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGH,aAAa,CAACI,GAAd,CAAkB,UAAAP,YAAY,EAAI;AACjC,QAAMT,YAAY,GAAGQ,2BAA2B,CAACC,YAAD,CAAhD;AAEA,WACE,oBAAC,qBAAD;AACE,MAAA,GAAG,EAAEA,YAAY,CAACC,IADpB;AAEE,MAAA,QAAQ,EAAED,YAAY,CAACQ,QAFzB;AAGE,MAAA,WAAW,EAAElB,OAAO,CAACc,uBAAD,EAA0BJ,YAA1B;AAHtB,OAKE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEA,YAAY,CAACS,QADzB;AAEE,MAAA,IAAI,EAAET,YAAY,CAACC,IAFrB;AAGE,MAAA,gBAAgB,EAAEX,OAAO,CACvBe,4BADuB,EAEvBL,YAFuB;AAH3B,MALF,CADF;AAgBD,GAnBA,CADH,CADF;AAwBD;AAEDE,gBAAgB,CAACQ,SAAjB,GAA6B;AAC3BP,EAAAA,aAAa,EAAEhB,kBAAkB,CAACwB,UAAnB,CAA8BnB,kBAA9B,EAAkDoB,UADtC;AAE3BR,EAAAA,uBAAuB,EAAEf,SAAS,CAACwB,IAAV,CAAeD,UAFb;AAG3BP,EAAAA,4BAA4B,EAAEhB,SAAS,CAACwB,IAAV,CAAeD;AAHlB,CAA7B",
    "sourcesContent": [
      "import ImmutablePropTypes from 'react-immutable-proptypes';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport partial from 'lodash-es/partial';\n\nimport {Notification as NotificationRecord} from '../records';\n\nimport NotificationContainer from './NotificationContainer';\nimport {\n  GenericNotification,\n  GistImportError,\n  SnapshotNotification,\n  ProjectExportNotification,\n} from './notifications';\n\nconst NOTIFICATION_COMPONENTS = {\n  'gist-import-error': GistImportError,\n  'snapshot-created': SnapshotNotification,\n  'project-export-complete': ProjectExportNotification,\n};\n\nfunction chooseNotificationComponent(notification) {\n  if (notification.type in NOTIFICATION_COMPONENTS) {\n    return NOTIFICATION_COMPONENTS[notification.type];\n  }\n  return GenericNotification;\n}\n\nexport default function NotificationList({\n  notifications,\n  onNotificationDismissed,\n  onUpdateNotificationMetadata,\n}) {\n  if (notifications.isEmpty()) {\n    return null;\n  }\n\n  return (\n    <div className=\"notification-list\">\n      {notifications.map(notification => {\n        const Notification = chooseNotificationComponent(notification);\n\n        return (\n          <NotificationContainer\n            key={notification.type}\n            severity={notification.severity}\n            onDismissed={partial(onNotificationDismissed, notification)}\n          >\n            <Notification\n              metadata={notification.metadata}\n              type={notification.type}\n              onUpdateMetadata={partial(\n                onUpdateNotificationMetadata,\n                notification,\n              )}\n            />\n          </NotificationContainer>\n        );\n      })}\n    </div>\n  );\n}\n\nNotificationList.propTypes = {\n  notifications: ImmutablePropTypes.iterableOf(NotificationRecord).isRequired,\n  onNotificationDismissed: PropTypes.func.isRequired,\n  onUpdateNotificationMetadata: PropTypes.func.isRequired,\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

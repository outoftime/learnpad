{
  "ast": null,
  "code": "/*\r\n\r\n\r\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar ParsedComponents = require('../../result').ParsedComponents;\n\nvar FIRST_REG_PATTERN = new RegExp(\"(^|\\\\s|T)\" + \"(?:(?:[àa])\\\\s*)?\" + \"(\\\\d{1,2}(?:h)?|midi|minuit)\" + \"(?:\" + \"(?:\\\\.|\\\\:|\\\\：|h)(\\\\d{1,2})(?:m)?\" + \"(?:\" + \"(?:\\\\:|\\\\：|m)(\\\\d{0,2})(?:s)?\" + \")?\" + \")?\" + \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" + \"(?=\\\\W|$)\", 'i');\nvar SECOND_REG_PATTERN = new RegExp(\"^\\\\s*\" + \"(\\\\-|\\\\–|\\\\~|\\\\〜|[àa]|\\\\?)\\\\s*\" + \"(\\\\d{1,2}(?:h)?)\" + \"(?:\" + \"(?:\\\\.|\\\\:|\\\\：|h)(\\\\d{1,2})(?:m)?\" + \"(?:\" + \"(?:\\\\.|\\\\:|\\\\：|m)(\\\\d{1,2})(?:s)?\" + \")?\" + \")?\" + \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" + \"(?=\\\\W|$)\", 'i');\nvar HOUR_GROUP = 2;\nvar MINUTE_GROUP = 3;\nvar SECOND_GROUP = 4;\nvar AM_PM_HOUR_GROUP = 5;\n\nexports.Parser = function FRTimeExpressionParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return FIRST_REG_PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    // This pattern can be overlaped Ex. [12] AM, 1[2] AM\n    if (match.index > 0 && text[match.index - 1].match(/\\w/)) return null;\n    var refMoment = moment(ref);\n    var result = new ParsedResult();\n    result.ref = ref;\n    result.index = match.index + match[1].length;\n    result.text = match[0].substring(match[1].length);\n    result.tags['FRTimeExpressionParser'] = true;\n    result.start.imply('day', refMoment.date());\n    result.start.imply('month', refMoment.month() + 1);\n    result.start.imply('year', refMoment.year());\n    var hour = 0;\n    var minute = 0;\n    var meridiem = -1; // ----- Second\n\n    if (match[SECOND_GROUP] != null) {\n      var second = parseInt(match[SECOND_GROUP]);\n      if (second >= 60) return null;\n      result.start.assign('second', second);\n    } // ----- Hours\n\n\n    if (match[HOUR_GROUP].toLowerCase() == \"midi\") {\n      meridiem = 1;\n      hour = 12;\n    } else if (match[HOUR_GROUP].toLowerCase() == \"minuit\") {\n      meridiem = 0;\n      hour = 0;\n    } else {\n      hour = parseInt(match[HOUR_GROUP]);\n    } // ----- Minutes\n\n\n    if (match[MINUTE_GROUP] != null) {\n      minute = parseInt(match[MINUTE_GROUP]);\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = parseInt(hour / 100);\n    }\n\n    if (minute >= 60) {\n      return null;\n    }\n\n    if (hour > 24) {\n      return null;\n    }\n\n    if (hour >= 12) {\n      meridiem = 1;\n    } // ----- AM & PM\n\n\n    if (match[AM_PM_HOUR_GROUP] != null) {\n      if (hour > 12) return null;\n      var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n\n      if (ampm == \"a\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      }\n\n      if (ampm == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    }\n\n    result.start.assign('hour', hour);\n    result.start.assign('minute', minute);\n\n    if (meridiem >= 0) {\n      result.start.assign('meridiem', meridiem);\n    } // ==============================================================\n    //                  Extracting the 'to' chunk\n    // ==============================================================\n\n\n    match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));\n\n    if (!match) {\n      // Not accept number only result\n      if (result.text.match(/^\\d+$/)) {\n        return null;\n      }\n\n      return result;\n    } // Pattern \"YY.YY -XXXX\" is more like timezone offset\n\n\n    if (match[0].match(/^\\s*(\\+|\\-)\\s*\\d{3,4}$/)) {\n      return result;\n    }\n\n    if (result.end == null) {\n      result.end = new ParsedComponents(null, result.start.date());\n    }\n\n    var hour = 0;\n    var minute = 0;\n    var meridiem = -1; // ----- Second\n\n    if (match[SECOND_GROUP] != null) {\n      var second = parseInt(match[SECOND_GROUP]);\n      if (second >= 60) return null;\n      result.end.assign('second', second);\n    }\n\n    hour = parseInt(match[2]); // ----- Minute\n\n    if (match[MINUTE_GROUP] != null) {\n      minute = parseInt(match[MINUTE_GROUP]);\n      if (minute >= 60) return result;\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = parseInt(hour / 100);\n    }\n\n    if (minute >= 60) {\n      return null;\n    }\n\n    if (hour > 24) {\n      return null;\n    }\n\n    if (hour >= 12) {\n      meridiem = 1;\n    } // ----- AM & PM\n\n\n    if (match[AM_PM_HOUR_GROUP] != null) {\n      if (hour > 12) return null;\n\n      if (match[AM_PM_HOUR_GROUP][0].toLowerCase() == \"a\") {\n        meridiem = 0;\n\n        if (hour == 12) {\n          hour = 0;\n\n          if (!result.end.isCertain('day')) {\n            result.end.imply('day', result.end.get('day') + 1);\n          }\n        }\n      }\n\n      if (match[AM_PM_HOUR_GROUP][0].toLowerCase() == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n\n      if (!result.start.isCertain('meridiem')) {\n        if (meridiem == 0) {\n          result.start.imply('meridiem', 0);\n\n          if (result.start.get('hour') == 12) {\n            result.start.assign('hour', 0);\n          }\n        } else {\n          result.start.imply('meridiem', 1);\n\n          if (result.start.get('hour') != 12) {\n            result.start.assign('hour', result.start.get('hour') + 12);\n          }\n        }\n      }\n    } else if (hour >= 12) {\n      meridiem = 1;\n    }\n\n    result.text = result.text + match[0];\n    result.end.assign('hour', hour);\n    result.end.assign('minute', minute);\n\n    if (meridiem >= 0) {\n      result.end.assign('meridiem', meridiem);\n    }\n\n    if (result.end.date().getTime() < result.start.date().getTime()) {\n      result.end.imply('day', result.end.get('day') + 1);\n    }\n\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/fr/FRTimeExpressionParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "ParsedComponents",
      "FIRST_REG_PATTERN",
      "RegExp",
      "SECOND_REG_PATTERN",
      "HOUR_GROUP",
      "MINUTE_GROUP",
      "SECOND_GROUP",
      "AM_PM_HOUR_GROUP",
      "exports",
      "FRTimeExpressionParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "refMoment",
      "result",
      "length",
      "substring",
      "tags",
      "start",
      "imply",
      "date",
      "month",
      "year",
      "hour",
      "minute",
      "meridiem",
      "second",
      "parseInt",
      "assign",
      "toLowerCase",
      "ampm",
      "exec",
      "end",
      "isCertain",
      "get",
      "getTime"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\r\n\r\n\r\n*/\r\n\r\nvar moment = require('moment');\r\nvar Parser = require('../parser').Parser;\r\nvar ParsedResult = require('../../result').ParsedResult;\r\nvar ParsedComponents = require('../../result').ParsedComponents;\r\n\r\nvar FIRST_REG_PATTERN  = new RegExp(\"(^|\\\\s|T)\" +\r\n    \"(?:(?:[àa])\\\\s*)?\" +\r\n    \"(\\\\d{1,2}(?:h)?|midi|minuit)\" +\r\n    \"(?:\" +\r\n        \"(?:\\\\.|\\\\:|\\\\：|h)(\\\\d{1,2})(?:m)?\" +\r\n        \"(?:\" +\r\n            \"(?:\\\\:|\\\\：|m)(\\\\d{0,2})(?:s)?\" +\r\n        \")?\" +\r\n    \")?\" +\r\n    \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" +\r\n    \"(?=\\\\W|$)\", 'i');\r\n\r\n\r\nvar SECOND_REG_PATTERN = new RegExp(\"^\\\\s*\" +\r\n    \"(\\\\-|\\\\–|\\\\~|\\\\〜|[àa]|\\\\?)\\\\s*\" +\r\n    \"(\\\\d{1,2}(?:h)?)\" +\r\n    \"(?:\" +\r\n        \"(?:\\\\.|\\\\:|\\\\：|h)(\\\\d{1,2})(?:m)?\" +\r\n        \"(?:\" +\r\n            \"(?:\\\\.|\\\\:|\\\\：|m)(\\\\d{1,2})(?:s)?\" +\r\n        \")?\" +\r\n    \")?\" +\r\n    \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" +\r\n    \"(?=\\\\W|$)\", 'i');\r\n\r\nvar HOUR_GROUP    = 2;\r\nvar MINUTE_GROUP  = 3;\r\nvar SECOND_GROUP  = 4;\r\nvar AM_PM_HOUR_GROUP = 5;\r\n\r\nexports.Parser = function FRTimeExpressionParser(){\r\n    Parser.apply(this, arguments);\r\n\r\n    this.pattern = function() { return FIRST_REG_PATTERN; }\r\n\r\n    this.extract = function(text, ref, match, opt){\r\n\r\n        // This pattern can be overlaped Ex. [12] AM, 1[2] AM\r\n        if (match.index > 0 && text[match.index-1].match(/\\w/)) return null;\r\n        var refMoment = moment(ref);\r\n        var result = new ParsedResult();\r\n        result.ref = ref;\r\n        result.index = match.index + match[1].length;\r\n        result.text  = match[0].substring(match[1].length);\r\n        result.tags['FRTimeExpressionParser'] = true;\r\n\r\n        result.start.imply('day',   refMoment.date());\r\n        result.start.imply('month', refMoment.month()+1);\r\n        result.start.imply('year',  refMoment.year());\r\n\r\n        var hour = 0;\r\n        var minute = 0;\r\n        var meridiem = -1;\r\n\r\n        // ----- Second\r\n        if(match[SECOND_GROUP] != null){\r\n            var second = parseInt(match[SECOND_GROUP]);\r\n            if(second >= 60) return null;\r\n\r\n            result.start.assign('second', second);\r\n        }\r\n\r\n        // ----- Hours\r\n        if (match[HOUR_GROUP].toLowerCase() == \"midi\"){\r\n            meridiem = 1;\r\n            hour = 12;\r\n        } else if (match[HOUR_GROUP].toLowerCase() == \"minuit\") {\r\n            meridiem = 0;\r\n            hour = 0;\r\n        } else {\r\n            hour = parseInt(match[HOUR_GROUP]);\r\n        }\r\n\r\n        // ----- Minutes\r\n        if(match[MINUTE_GROUP] != null){\r\n            minute = parseInt(match[MINUTE_GROUP]);\r\n        } else if(hour > 100) {\r\n            minute = hour%100;\r\n            hour   = parseInt(hour/100);\r\n        }\r\n\r\n        if(minute >= 60) {\r\n            return null;\r\n        }\r\n\r\n        if(hour > 24) {\r\n            return null;\r\n        }\r\n        if (hour >= 12) {\r\n            meridiem = 1;\r\n        }\r\n\r\n        // ----- AM & PM\r\n        if(match[AM_PM_HOUR_GROUP] != null) {\r\n            if(hour > 12) return null;\r\n            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\r\n            if(ampm == \"a\"){\r\n                meridiem = 0;\r\n                if(hour == 12) hour = 0;\r\n            }\r\n\r\n            if(ampm == \"p\"){\r\n                meridiem = 1;\r\n                if(hour != 12) hour += 12;\r\n            }\r\n        }\r\n        result.start.assign('hour', hour);\r\n        result.start.assign('minute', minute);\r\n        if (meridiem >= 0) {\r\n            result.start.assign('meridiem', meridiem);\r\n        }\r\n\r\n        // ==============================================================\r\n        //                  Extracting the 'to' chunk\r\n        // ==============================================================\r\n        match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));\r\n        if (!match) {\r\n            // Not accept number only result\r\n            if (result.text.match(/^\\d+$/)) {\r\n                return null;\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n\r\n        // Pattern \"YY.YY -XXXX\" is more like timezone offset\r\n        if (match[0].match(/^\\s*(\\+|\\-)\\s*\\d{3,4}$/)) {\r\n            return result;\r\n        }\r\n\r\n        if(result.end == null){\r\n            result.end = new ParsedComponents(null, result.start.date());\r\n        }\r\n\r\n        var hour = 0;\r\n        var minute = 0;\r\n        var meridiem = -1;\r\n\r\n        // ----- Second\r\n        if(match[SECOND_GROUP] != null){\r\n            var second = parseInt(match[SECOND_GROUP]);\r\n            if(second >= 60) return null;\r\n\r\n            result.end.assign('second', second);\r\n        }\r\n\r\n        hour = parseInt(match[2]);\r\n\r\n        // ----- Minute\r\n        if (match[MINUTE_GROUP]!= null) {\r\n\r\n            minute = parseInt(match[MINUTE_GROUP]);\r\n            if(minute >= 60) return result;\r\n\r\n        } else if (hour > 100) {\r\n\r\n            minute = hour%100;\r\n            hour   = parseInt(hour/100);\r\n        }\r\n\r\n        if(minute >= 60) {\r\n            return null;\r\n        }\r\n\r\n        if(hour > 24) {\r\n            return null;\r\n        }\r\n        if (hour >= 12) {\r\n            meridiem = 1;\r\n        }\r\n\r\n        // ----- AM & PM\r\n        if (match[AM_PM_HOUR_GROUP] != null){\r\n\r\n            if (hour > 12) return null;\r\n\r\n            if(match[AM_PM_HOUR_GROUP][0].toLowerCase() == \"a\"){\r\n                meridiem = 0;\r\n                if(hour == 12) {\r\n                    hour = 0;\r\n                    if (!result.end.isCertain('day')) {\r\n                        result.end.imply('day', result.end.get('day') + 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(match[AM_PM_HOUR_GROUP][0].toLowerCase() == \"p\"){\r\n                meridiem = 1;\r\n                if(hour != 12) hour += 12;\r\n            }\r\n\r\n            if (!result.start.isCertain('meridiem')) {\r\n                if (meridiem == 0) {\r\n\r\n                    result.start.imply('meridiem', 0);\r\n\r\n                    if (result.start.get('hour') == 12) {\r\n                        result.start.assign('hour', 0);\r\n                    }\r\n\r\n                } else {\r\n\r\n                    result.start.imply('meridiem', 1);\r\n\r\n                    if (result.start.get('hour') != 12) {\r\n                        result.start.assign('hour', result.start.get('hour') + 12);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else if(hour >= 12) {\r\n            meridiem = 1;\r\n        }\r\n\r\n        result.text = result.text + match[0];\r\n        result.end.assign('hour', hour);\r\n        result.end.assign('minute', minute);\r\n        if (meridiem >= 0) {\r\n            result.end.assign('meridiem', meridiem);\r\n        }\r\n\r\n        if (result.end.date().getTime() < result.start.date().getTime()) {\r\n            result.end.imply('day', result.end.get('day') + 1)\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

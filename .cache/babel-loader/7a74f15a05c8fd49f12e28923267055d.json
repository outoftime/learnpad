{
  "ast": null,
  "code": "import Immutable from 'immutable';\nvar defaultState = new Immutable.Map({\n  firebase: new Immutable.Map({\n    exportingSnapshot: false\n  }),\n  projectExports: new Immutable.Map(),\n  exportingAssignment: false,\n  gapi: new Immutable.Map({\n    ready: false\n  })\n});\nexport default function clients(stateIn, action) {\n  var state = stateIn;\n\n  if (state === undefined) {\n    state = defaultState;\n  }\n\n  switch (action.type) {\n    case 'CREATE_SNAPSHOT':\n      return state.setIn(['firebase', 'exportingSnapshot'], true);\n\n    case 'SNAPSHOT_CREATED':\n      return state.setIn(['firebase', 'exportingSnapshot'], false);\n\n    case 'SNAPSHOT_EXPORT_ERROR':\n      return state.setIn(['firebase', 'exportingSnapshot'], false);\n\n    case 'EXPORT_PROJECT':\n      return state.setIn(['projectExports', action.payload.exportType], new Immutable.Map({\n        status: 'waiting'\n      }));\n\n    case 'PROJECT_EXPORTED':\n      return state.setIn(['projectExports', action.payload.exportType], new Immutable.Map({\n        status: 'ready',\n        url: action.payload.url\n      }));\n\n    case 'PROJECT_EXPORT_ERROR':\n      return state.setIn(['projectExports', action.payload.exportType], new Immutable.Map({\n        status: 'error'\n      }));\n\n    case 'GAPI_CLIENT_READY':\n      return state.setIn(['gapi', 'ready'], true);\n\n    case 'CREATE_ASSIGNMENT':\n      return state.setIn(['exportingAssignment'], true);\n\n    case 'ASSIGNMENT_CREATED':\n    case 'ASSIGNMENT_NOT_CREATED':\n      return state.setIn(['exportingAssignment'], false);\n  }\n\n  return state;\n}",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/reducers/clients.js"],
    "names": [
      "Immutable",
      "defaultState",
      "Map",
      "firebase",
      "exportingSnapshot",
      "projectExports",
      "exportingAssignment",
      "gapi",
      "ready",
      "clients",
      "stateIn",
      "action",
      "state",
      "undefined",
      "type",
      "setIn",
      "payload",
      "exportType",
      "status",
      "url"
    ],
    "mappings": "AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,IAAMC,YAAY,GAAG,IAAID,SAAS,CAACE,GAAd,CAAkB;AACrCC,EAAAA,QAAQ,EAAE,IAAIH,SAAS,CAACE,GAAd,CAAkB;AAACE,IAAAA,iBAAiB,EAAE;AAApB,GAAlB,CAD2B;AAErCC,EAAAA,cAAc,EAAE,IAAIL,SAAS,CAACE,GAAd,EAFqB;AAGrCI,EAAAA,mBAAmB,EAAE,KAHgB;AAIrCC,EAAAA,IAAI,EAAE,IAAIP,SAAS,CAACE,GAAd,CAAkB;AAACM,IAAAA,KAAK,EAAE;AAAR,GAAlB;AAJ+B,CAAlB,CAArB;AAOA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,MAA1B,EAAkC;AAC/C,MAAIC,KAAK,GAAGF,OAAZ;;AACA,MAAIE,KAAK,KAAKC,SAAd,EAAyB;AACvBD,IAAAA,KAAK,GAAGX,YAAR;AACD;;AAED,UAAQU,MAAM,CAACG,IAAf;AACE,SAAK,iBAAL;AACE,aAAOF,KAAK,CAACG,KAAN,CAAY,CAAC,UAAD,EAAa,mBAAb,CAAZ,EAA+C,IAA/C,CAAP;;AAEF,SAAK,kBAAL;AACE,aAAOH,KAAK,CAACG,KAAN,CAAY,CAAC,UAAD,EAAa,mBAAb,CAAZ,EAA+C,KAA/C,CAAP;;AAEF,SAAK,uBAAL;AACE,aAAOH,KAAK,CAACG,KAAN,CAAY,CAAC,UAAD,EAAa,mBAAb,CAAZ,EAA+C,KAA/C,CAAP;;AAEF,SAAK,gBAAL;AACE,aAAOH,KAAK,CAACG,KAAN,CACL,CAAC,gBAAD,EAAmBJ,MAAM,CAACK,OAAP,CAAeC,UAAlC,CADK,EAEL,IAAIjB,SAAS,CAACE,GAAd,CAAkB;AAACgB,QAAAA,MAAM,EAAE;AAAT,OAAlB,CAFK,CAAP;;AAKF,SAAK,kBAAL;AACE,aAAON,KAAK,CAACG,KAAN,CACL,CAAC,gBAAD,EAAmBJ,MAAM,CAACK,OAAP,CAAeC,UAAlC,CADK,EAEL,IAAIjB,SAAS,CAACE,GAAd,CAAkB;AAACgB,QAAAA,MAAM,EAAE,OAAT;AAAkBC,QAAAA,GAAG,EAAER,MAAM,CAACK,OAAP,CAAeG;AAAtC,OAAlB,CAFK,CAAP;;AAKF,SAAK,sBAAL;AACE,aAAOP,KAAK,CAACG,KAAN,CACL,CAAC,gBAAD,EAAmBJ,MAAM,CAACK,OAAP,CAAeC,UAAlC,CADK,EAEL,IAAIjB,SAAS,CAACE,GAAd,CAAkB;AAACgB,QAAAA,MAAM,EAAE;AAAT,OAAlB,CAFK,CAAP;;AAKF,SAAK,mBAAL;AACE,aAAON,KAAK,CAACG,KAAN,CAAY,CAAC,MAAD,EAAS,OAAT,CAAZ,EAA+B,IAA/B,CAAP;;AAEF,SAAK,mBAAL;AACE,aAAOH,KAAK,CAACG,KAAN,CAAY,CAAC,qBAAD,CAAZ,EAAqC,IAArC,CAAP;;AAEF,SAAK,oBAAL;AACA,SAAK,wBAAL;AACE,aAAOH,KAAK,CAACG,KAAN,CAAY,CAAC,qBAAD,CAAZ,EAAqC,KAArC,CAAP;AApCJ;;AAuCA,SAAOH,KAAP;AACD",
    "sourcesContent": [
      "import Immutable from 'immutable';\n\nconst defaultState = new Immutable.Map({\n  firebase: new Immutable.Map({exportingSnapshot: false}),\n  projectExports: new Immutable.Map(),\n  exportingAssignment: false,\n  gapi: new Immutable.Map({ready: false}),\n});\n\nexport default function clients(stateIn, action) {\n  let state = stateIn;\n  if (state === undefined) {\n    state = defaultState;\n  }\n\n  switch (action.type) {\n    case 'CREATE_SNAPSHOT':\n      return state.setIn(['firebase', 'exportingSnapshot'], true);\n\n    case 'SNAPSHOT_CREATED':\n      return state.setIn(['firebase', 'exportingSnapshot'], false);\n\n    case 'SNAPSHOT_EXPORT_ERROR':\n      return state.setIn(['firebase', 'exportingSnapshot'], false);\n\n    case 'EXPORT_PROJECT':\n      return state.setIn(\n        ['projectExports', action.payload.exportType],\n        new Immutable.Map({status: 'waiting'}),\n      );\n\n    case 'PROJECT_EXPORTED':\n      return state.setIn(\n        ['projectExports', action.payload.exportType],\n        new Immutable.Map({status: 'ready', url: action.payload.url}),\n      );\n\n    case 'PROJECT_EXPORT_ERROR':\n      return state.setIn(\n        ['projectExports', action.payload.exportType],\n        new Immutable.Map({status: 'error'}),\n      );\n\n    case 'GAPI_CLIENT_READY':\n      return state.setIn(['gapi', 'ready'], true);\n\n    case 'CREATE_ASSIGNMENT':\n      return state.setIn(['exportingAssignment'], true);\n\n    case 'ASSIGNMENT_CREATED':\n    case 'ASSIGNMENT_NOT_CREATED':\n      return state.setIn(['exportingAssignment'], false);\n  }\n\n  return state;\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

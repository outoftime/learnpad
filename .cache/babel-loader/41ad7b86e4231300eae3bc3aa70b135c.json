{
  "ast": null,
  "code": "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport bindAll from 'lodash-es/bindAll';\nimport constant from 'lodash-es/constant';\nimport get from 'lodash-es/get';\nimport throttle from 'lodash-es/throttle';\nimport noop from 'lodash-es/noop';\nimport { EditorLocation } from '../records';\nimport { createAceEditor, createAceSessionWithoutWorker } from '../util/ace';\nimport 'brace/ext/searchbox';\nimport 'brace/mode/html';\nimport 'brace/mode/css';\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\nvar RESIZE_THROTTLE = 250;\nvar NORMAL_FONTSIZE = 14;\nvar LARGE_FONTSIZE = 20;\n\nvar Editor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Editor, _React$Component);\n\n  function Editor() {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Editor).call(this));\n    _this._handleWindowResize = throttle(function () {\n      if (_this._editor) {\n        _this._resizeEditor();\n      }\n    }, RESIZE_THROTTLE);\n    bindAll(_assertThisInitialized(_this), '_handleWindowResize', '_resizeEditor', '_setupEditor');\n    _this.render = constant(React.createElement(\"div\", {\n      className: \"editors__editor\",\n      ref: _this._setupEditor\n    }));\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._focusRequestedLine(this.props.requestedFocusedLine);\n\n      this._applyFontSize(this.props.textSizeIsLarge);\n\n      window.addEventListener('resize', this._handleWindowResize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevPercentageOfHeight = _ref.percentageOfHeight,\n          prevProjectKey = _ref.projectKey,\n          prevSource = _ref.source;\n      var _this$props = this.props,\n          errors = _this$props.errors,\n          percentageOfHeight = _this$props.percentageOfHeight,\n          projectKey = _this$props.projectKey,\n          requestedFocusedLine = _this$props.requestedFocusedLine,\n          source = _this$props.source,\n          textSizeIsLarge = _this$props.textSizeIsLarge;\n\n      if (projectKey !== prevProjectKey) {\n        this._startNewSession(source);\n      } else if (source !== prevSource && source !== this._editor.getValue()) {\n        this._editor.setValue(source, 1);\n      }\n\n      this._focusRequestedLine(requestedFocusedLine);\n\n      this._applyFontSize(textSizeIsLarge);\n\n      if (percentageOfHeight !== prevPercentageOfHeight) {\n        requestAnimationFrame(this._resizeEditor);\n      }\n\n      this._editor.getSession().setAnnotations(errors);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._editor.destroy();\n\n      window.removeEventListener('resize', this._handleWindowResize);\n    }\n  }, {\n    key: \"_focusRequestedLine\",\n    value: function _focusRequestedLine(requestedFocusedLine) {\n      if (get(requestedFocusedLine, 'component') !== \"editor.\".concat(this.props.language)) {\n        return;\n      }\n\n      this._editor.moveCursorTo(requestedFocusedLine.line, requestedFocusedLine.column);\n\n      this._scrollToLine(requestedFocusedLine.line);\n\n      this._editor.focus();\n\n      this.props.onRequestedLineFocused();\n    }\n  }, {\n    key: \"_resizeEditor\",\n    value: function _resizeEditor() {\n      this._editor.resize();\n    }\n  }, {\n    key: \"_scrollToLine\",\n    value: function _scrollToLine(lineNumber) {\n      var shouldCenterVertically = true;\n      var shouldAnimate = true;\n\n      this._editor.scrollToLine(lineNumber, shouldCenterVertically, shouldAnimate, noop);\n    }\n  }, {\n    key: \"_setupEditor\",\n    value: function _setupEditor(containerElement) {\n      var _this2 = this;\n\n      if (containerElement) {\n        this._editor = createAceEditor(containerElement);\n\n        this._startNewSession(this.props.source);\n\n        this._resizeEditor();\n\n        this._editor.on('focus', this._resizeEditor);\n\n        this._editor.commands.addCommand({\n          name: 'autoFormat',\n          bindKey: {\n            win: 'Ctrl-i',\n            mac: 'Command-i'\n          },\n          exec: function exec() {\n            _this2.props.onAutoFormat();\n          }\n        });\n      } else {\n        this._editor.destroy();\n      }\n    }\n  }, {\n    key: \"_applyFontSize\",\n    value: function _applyFontSize(textSizeIsLarge) {\n      if (textSizeIsLarge) {\n        this._editor.setFontSize(LARGE_FONTSIZE);\n      } else {\n        this._editor.setFontSize(NORMAL_FONTSIZE);\n      }\n    }\n  }, {\n    key: \"_startNewSession\",\n    value: function _startNewSession(source) {\n      var _this3 = this;\n\n      var session = createAceSessionWithoutWorker(this.props.language, source);\n      session.on('change', function () {\n        _this3.props.onInput(_this3._editor.getValue());\n      });\n      session.setAnnotations(this.props.errors);\n\n      this._editor.setSession(session);\n\n      this._editor.moveCursorTo(0, 0);\n\n      this._resizeEditor();\n    }\n  }]);\n\n  return Editor;\n}(React.Component);\n\nEditor.propTypes = {\n  errors: PropTypes.array.isRequired,\n  language: PropTypes.string.isRequired,\n  percentageOfHeight: PropTypes.number.isRequired,\n  projectKey: PropTypes.string.isRequired,\n  requestedFocusedLine: PropTypes.instanceOf(EditorLocation),\n  source: PropTypes.string.isRequired,\n  textSizeIsLarge: PropTypes.bool.isRequired,\n  onAutoFormat: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onRequestedLineFocused: PropTypes.func.isRequired\n};\nEditor.defaultProps = {\n  requestedFocusedLine: null,\n  textSizeIsLarge: false\n};\nexport default Editor;",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/components/Editor.jsx"],
    "names": [
      "React",
      "PropTypes",
      "bindAll",
      "constant",
      "get",
      "throttle",
      "noop",
      "EditorLocation",
      "createAceEditor",
      "createAceSessionWithoutWorker",
      "RESIZE_THROTTLE",
      "NORMAL_FONTSIZE",
      "LARGE_FONTSIZE",
      "Editor",
      "_handleWindowResize",
      "_editor",
      "_resizeEditor",
      "render",
      "_setupEditor",
      "_focusRequestedLine",
      "props",
      "requestedFocusedLine",
      "_applyFontSize",
      "textSizeIsLarge",
      "window",
      "addEventListener",
      "prevPercentageOfHeight",
      "percentageOfHeight",
      "prevProjectKey",
      "projectKey",
      "prevSource",
      "source",
      "errors",
      "_startNewSession",
      "getValue",
      "setValue",
      "requestAnimationFrame",
      "getSession",
      "setAnnotations",
      "destroy",
      "removeEventListener",
      "language",
      "moveCursorTo",
      "line",
      "column",
      "_scrollToLine",
      "focus",
      "onRequestedLineFocused",
      "resize",
      "lineNumber",
      "shouldCenterVertically",
      "shouldAnimate",
      "scrollToLine",
      "containerElement",
      "on",
      "commands",
      "addCommand",
      "name",
      "bindKey",
      "win",
      "mac",
      "exec",
      "onAutoFormat",
      "setFontSize",
      "session",
      "onInput",
      "setSession",
      "Component",
      "propTypes",
      "array",
      "isRequired",
      "string",
      "number",
      "instanceOf",
      "bool",
      "func",
      "defaultProps"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport bindAll from 'lodash-es/bindAll';\nimport constant from 'lodash-es/constant';\nimport get from 'lodash-es/get';\nimport throttle from 'lodash-es/throttle';\nimport noop from 'lodash-es/noop';\n\nimport {EditorLocation} from '../records';\nimport {createAceEditor, createAceSessionWithoutWorker} from '../util/ace';\n\nimport 'brace/ext/searchbox';\nimport 'brace/mode/html';\nimport 'brace/mode/css';\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\n\nconst RESIZE_THROTTLE = 250;\nconst NORMAL_FONTSIZE = 14;\nconst LARGE_FONTSIZE = 20;\n\nclass Editor extends React.Component {\n  constructor() {\n    super();\n\n    this._handleWindowResize = throttle(() => {\n      if (this._editor) {\n        this._resizeEditor();\n      }\n    }, RESIZE_THROTTLE);\n\n    bindAll(this, '_handleWindowResize', '_resizeEditor', '_setupEditor');\n\n    this.render = constant(\n      <div className=\"editors__editor\" ref={this._setupEditor} />,\n    );\n  }\n\n  componentDidMount() {\n    this._focusRequestedLine(this.props.requestedFocusedLine);\n    this._applyFontSize(this.props.textSizeIsLarge);\n    window.addEventListener('resize', this._handleWindowResize);\n  }\n\n  componentDidUpdate({\n    percentageOfHeight: prevPercentageOfHeight,\n    projectKey: prevProjectKey,\n    source: prevSource,\n  }) {\n    const {\n      errors,\n      percentageOfHeight,\n      projectKey,\n      requestedFocusedLine,\n      source,\n      textSizeIsLarge,\n    } = this.props;\n\n    if (projectKey !== prevProjectKey) {\n      this._startNewSession(source);\n    } else if (source !== prevSource && source !== this._editor.getValue()) {\n      this._editor.setValue(source, 1);\n    }\n\n    this._focusRequestedLine(requestedFocusedLine);\n    this._applyFontSize(textSizeIsLarge);\n\n    if (percentageOfHeight !== prevPercentageOfHeight) {\n      requestAnimationFrame(this._resizeEditor);\n    }\n\n    this._editor.getSession().setAnnotations(errors);\n  }\n\n  componentWillUnmount() {\n    this._editor.destroy();\n    window.removeEventListener('resize', this._handleWindowResize);\n  }\n\n  _focusRequestedLine(requestedFocusedLine) {\n    if (\n      get(requestedFocusedLine, 'component') !== `editor.${this.props.language}`\n    ) {\n      return;\n    }\n\n    this._editor.moveCursorTo(\n      requestedFocusedLine.line,\n      requestedFocusedLine.column,\n    );\n\n    this._scrollToLine(requestedFocusedLine.line);\n    this._editor.focus();\n    this.props.onRequestedLineFocused();\n  }\n\n  _resizeEditor() {\n    this._editor.resize();\n  }\n\n  _scrollToLine(lineNumber) {\n    const shouldCenterVertically = true;\n    const shouldAnimate = true;\n    this._editor.scrollToLine(\n      lineNumber,\n      shouldCenterVertically,\n      shouldAnimate,\n      noop,\n    );\n  }\n\n  _setupEditor(containerElement) {\n    if (containerElement) {\n      this._editor = createAceEditor(containerElement);\n      this._startNewSession(this.props.source);\n      this._resizeEditor();\n      this._editor.on('focus', this._resizeEditor);\n      this._editor.commands.addCommand({\n        name: 'autoFormat',\n        bindKey: {win: 'Ctrl-i', mac: 'Command-i'},\n        exec: () => {\n          this.props.onAutoFormat();\n        },\n      });\n    } else {\n      this._editor.destroy();\n    }\n  }\n\n  _applyFontSize(textSizeIsLarge) {\n    if (textSizeIsLarge) {\n      this._editor.setFontSize(LARGE_FONTSIZE);\n    } else {\n      this._editor.setFontSize(NORMAL_FONTSIZE);\n    }\n  }\n\n  _startNewSession(source) {\n    const session = createAceSessionWithoutWorker(this.props.language, source);\n    session.on('change', () => {\n      this.props.onInput(this._editor.getValue());\n    });\n    session.setAnnotations(this.props.errors);\n    this._editor.setSession(session);\n    this._editor.moveCursorTo(0, 0);\n    this._resizeEditor();\n  }\n}\n\nEditor.propTypes = {\n  errors: PropTypes.array.isRequired,\n  language: PropTypes.string.isRequired,\n  percentageOfHeight: PropTypes.number.isRequired,\n  projectKey: PropTypes.string.isRequired,\n  requestedFocusedLine: PropTypes.instanceOf(EditorLocation),\n  source: PropTypes.string.isRequired,\n  textSizeIsLarge: PropTypes.bool.isRequired,\n  onAutoFormat: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onRequestedLineFocused: PropTypes.func.isRequired,\n};\n\nEditor.defaultProps = {\n  requestedFocusedLine: null,\n  textSizeIsLarge: false,\n};\n\nexport default Editor;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

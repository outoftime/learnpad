{
  "ast": null,
  "code": "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { createLogic } from 'redux-logic';\nimport { linkGithub, saveCredentialForCurrentUser } from '../clients/firebase';\nimport { accountMigrationNeeded, identityLinked, linkIdentityFailed } from '../actions/user';\nimport { getProfileForAuthenticatedUser } from '../clients/github';\nimport { bugsnagClient } from '../util/bugsnag';\nexport default createLogic({\n  type: 'LINK_GITHUB_IDENTITY',\n  process: function () {\n    var _process = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var _ref, userData, credential, _ref2, githubProfile;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return linkGithub();\n\n            case 3:\n              _ref = _context.sent;\n              userData = _ref.user;\n              credential = _ref.credential;\n              _context.next = 8;\n              return saveCredentialForCurrentUser(credential);\n\n            case 8:\n              return _context.abrupt(\"return\", identityLinked(userData, credential));\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!(_context.t0.code === 'auth/credential-already-in-use')) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 16;\n              return getProfileForAuthenticatedUser(_context.t0.credential.accessToken);\n\n            case 16:\n              _ref2 = _context.sent;\n              githubProfile = _ref2.data;\n              return _context.abrupt(\"return\", accountMigrationNeeded(githubProfile, _context.t0.credential));\n\n            case 19:\n              _context.next = 21;\n              return bugsnagClient.notify(_context.t0);\n\n            case 21:\n              return _context.abrupt(\"return\", linkIdentityFailed(_context.t0));\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    function process() {\n      return _process.apply(this, arguments);\n    }\n\n    return process;\n  }()\n});",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/logic/linkGithubIdentity.js"
    ],
    "names": [
      "createLogic",
      "linkGithub",
      "saveCredentialForCurrentUser",
      "accountMigrationNeeded",
      "identityLinked",
      "linkIdentityFailed",
      "getProfileForAuthenticatedUser",
      "bugsnagClient",
      "type",
      "process",
      "userData",
      "user",
      "credential",
      "code",
      "accessToken",
      "githubProfile",
      "data",
      "notify"
    ],
    "mappings": ";;;;AAAA,SAAQA,WAAR,QAA0B,aAA1B;AAEA,SAAQC,UAAR,EAAoBC,4BAApB,QAAuD,qBAAvD;AACA,SACEC,sBADF,EAEEC,cAFF,EAGEC,kBAHF,QAIO,iBAJP;AAKA,SAAQC,8BAAR,QAA6C,mBAA7C;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AAEA,eAAeP,WAAW,CAAC;AACzBQ,EAAAA,IAAI,EAAE,sBADmB;AAEnBC,EAAAA,OAFmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIsBR,UAAU,EAJhC;;AAAA;AAAA;AAIRS,cAAAA,QAJQ,QAIdC,IAJc;AAIEC,cAAAA,UAJF,QAIEA,UAJF;AAAA;AAAA,qBAKfV,4BAA4B,CAACU,UAAD,CALb;;AAAA;AAAA,+CAMdR,cAAc,CAACM,QAAD,EAAWE,UAAX,CANA;;AAAA;AAAA;AAAA;;AAAA,oBAQjB,YAAEC,IAAF,KAAW,gCARM;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASiBP,8BAA8B,CAChE,YAAEM,UAAF,CAAaE,WADmD,CAT/C;;AAAA;AAAA;AASNC,cAAAA,aATM,SASZC,IATY;AAAA,+CAYZb,sBAAsB,CAACY,aAAD,EAAgB,YAAEH,UAAlB,CAZV;;AAAA;AAAA;AAAA,qBAcfL,aAAa,CAACU,MAAd,aAde;;AAAA;AAAA,+CAedZ,kBAAkB,aAfJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAD,CAA1B",
    "sourcesContent": [
      "import {createLogic} from 'redux-logic';\n\nimport {linkGithub, saveCredentialForCurrentUser} from '../clients/firebase';\nimport {\n  accountMigrationNeeded,\n  identityLinked,\n  linkIdentityFailed,\n} from '../actions/user';\nimport {getProfileForAuthenticatedUser} from '../clients/github';\nimport {bugsnagClient} from '../util/bugsnag';\n\nexport default createLogic({\n  type: 'LINK_GITHUB_IDENTITY',\n  async process() {\n    try {\n      const {user: userData, credential} = await linkGithub();\n      await saveCredentialForCurrentUser(credential);\n      return identityLinked(userData, credential);\n    } catch (e) {\n      if (e.code === 'auth/credential-already-in-use') {\n        const {data: githubProfile} = await getProfileForAuthenticatedUser(\n          e.credential.accessToken,\n        );\n        return accountMigrationNeeded(githubProfile, e.credential);\n      }\n      await bugsnagClient.notify(e);\n      return linkIdentityFailed(e);\n    }\n  },\n});\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

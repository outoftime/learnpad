{
  "ast": null,
  "code": "/*\r\n\r\n\r\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar updateParsedComponent = require('../en/ENWeekdayParser').updateParsedComponent;\n\nvar DAYS_OFFSET = {\n  'dimanche': 0,\n  'dim': 0,\n  'lundi': 1,\n  'lun': 1,\n  'mardi': 2,\n  'mar': 2,\n  'mercredi': 3,\n  'mer': 3,\n  'jeudi': 4,\n  'jeu': 4,\n  'vendredi': 5,\n  'ven': 5,\n  'samedi': 6,\n  'sam': 6\n};\nvar PATTERN = new RegExp('(\\\\s|^)' + '(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?' + '(?:(ce)\\\\s*)?' + '(' + Object.keys(DAYS_OFFSET).join('|') + ')' + '(?:\\\\s*(?:\\\\,|\\\\)|\\\\）))?' + '(?:\\\\s*(dernier|prochain)\\\\s*)?' + '(?=\\\\W|$)', 'i');\nvar PREFIX_GROUP = 2;\nvar WEEKDAY_GROUP = 3;\nvar POSTFIX_GROUP = 4;\n\nexports.Parser = function FRWeekdayParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[1].length;\n    var text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n    var offset = DAYS_OFFSET[dayOfWeek];\n    if (offset === undefined) return null;\n    var modifier = null;\n    var prefix = match[PREFIX_GROUP];\n    var postfix = match[POSTFIX_GROUP];\n\n    if (prefix || postfix) {\n      var norm = prefix || postfix;\n      norm = norm.toLowerCase();\n\n      if (norm == 'dernier') {\n        modifier = 'last';\n      } else if (norm == 'prochain') {\n        modifier = 'next';\n      } else if (norm == 'ce') {\n        modifier = 'this';\n      }\n    }\n\n    updateParsedComponent(result, ref, offset, modifier);\n    result.tags['FRWeekdayParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/fr/FRWeekdayParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "updateParsedComponent",
      "DAYS_OFFSET",
      "PATTERN",
      "RegExp",
      "Object",
      "keys",
      "join",
      "PREFIX_GROUP",
      "WEEKDAY_GROUP",
      "POSTFIX_GROUP",
      "exports",
      "FRWeekdayParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "length",
      "substr",
      "result",
      "dayOfWeek",
      "toLowerCase",
      "offset",
      "undefined",
      "modifier",
      "prefix",
      "postfix",
      "norm",
      "tags"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\r\n\r\n\r\n*/\r\nvar moment = require('moment');\r\nvar Parser = require('../parser').Parser;\r\nvar ParsedResult = require('../../result').ParsedResult;\r\nvar updateParsedComponent = require('../en/ENWeekdayParser').updateParsedComponent;\r\n\r\nvar DAYS_OFFSET = { 'dimanche': 0, 'dim': 0, 'lundi': 1, 'lun': 1,'mardi': 2, 'mar':2, 'mercredi': 3, 'mer': 3,\r\n    'jeudi': 4, 'jeu':4, 'vendredi': 5, 'ven': 5,'samedi': 6, 'sam': 6};\r\n\r\nvar PATTERN = new RegExp('(\\\\s|^)' +\r\n    '(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?' +\r\n    '(?:(ce)\\\\s*)?' +\r\n    '(' + Object.keys(DAYS_OFFSET).join('|') + ')' +\r\n    '(?:\\\\s*(?:\\\\,|\\\\)|\\\\）))?' +\r\n    '(?:\\\\s*(dernier|prochain)\\\\s*)?' +\r\n    '(?=\\\\W|$)', 'i');\r\n\r\nvar PREFIX_GROUP = 2;\r\nvar WEEKDAY_GROUP = 3;\r\nvar POSTFIX_GROUP = 4;\r\n\r\nexports.Parser = function FRWeekdayParser() {\r\n    Parser.apply(this, arguments);\r\n\r\n    this.pattern = function() { return PATTERN; };\r\n\r\n    this.extract = function(text, ref, match, opt){\r\n        var index = match.index + match[1].length;\r\n        var text = match[0].substr(match[1].length, match[0].length - match[1].length);\r\n        var result = new ParsedResult({\r\n            index: index,\r\n            text: text,\r\n            ref: ref\r\n        });\r\n\r\n        var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\r\n        var offset = DAYS_OFFSET[dayOfWeek];\r\n        if(offset === undefined) return null;\r\n\r\n        var modifier = null;\r\n        var prefix = match[PREFIX_GROUP];\r\n        var postfix = match[POSTFIX_GROUP];\r\n        if (prefix || postfix) {\r\n            var norm = prefix || postfix;\r\n            norm = norm.toLowerCase();\r\n\r\n            if(norm == 'dernier') {\r\n                modifier = 'last';\r\n            } else if(norm == 'prochain') {\r\n                modifier = 'next';\r\n            } else if(norm== 'ce') {\r\n                modifier = 'this';\r\n            }\r\n        }\r\n\r\n        updateParsedComponent(result, ref, offset, modifier);\r\n        result.tags['FRWeekdayParser'] = true;\r\n        return result;\r\n    }\r\n};\r\n\r\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import assign from 'lodash-es/assign';\nimport promiseRetry from 'promise-retry';\nexport default function performWithRetries(perform) {\n  var shouldRetryFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n    return false;\n  };\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return promiseRetry(function (retry) {\n    return perform().catch(function (error) {\n      if (shouldRetryFn(error.message)) {\n        return retry(error);\n      }\n\n      return Promise.reject(error);\n    });\n  }, assign({\n    retries: 5,\n    factor: 2,\n    minTimeout: 1000,\n    maxTimeout: 10000\n  }, options));\n}",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/util/performWithRetries.js"
    ],
    "names": [
      "assign",
      "promiseRetry",
      "performWithRetries",
      "perform",
      "shouldRetryFn",
      "options",
      "retry",
      "catch",
      "error",
      "message",
      "Promise",
      "reject",
      "retries",
      "factor",
      "minTimeout",
      "maxTimeout"
    ],
    "mappings": "AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,eAAe,SAASC,kBAAT,CACbC,OADa,EAIb;AAAA,MAFAC,aAEA,uEAFgB;AAAA,WAAM,KAAN;AAAA,GAEhB;AAAA,MADAC,OACA,uEADU,EACV;AACA,SAAOJ,YAAY,CACjB,UAAAK,KAAK;AAAA,WACHH,OAAO,GAAGI,KAAV,CAAgB,UAAAC,KAAK,EAAI;AACvB,UAAIJ,aAAa,CAACI,KAAK,CAACC,OAAP,CAAjB,EAAkC;AAChC,eAAOH,KAAK,CAACE,KAAD,CAAZ;AACD;;AACD,aAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,KALD,CADG;AAAA,GADY,EAQjBR,MAAM,CACJ;AACEY,IAAAA,OAAO,EAAE,CADX;AAEEC,IAAAA,MAAM,EAAE,CAFV;AAGEC,IAAAA,UAAU,EAAE,IAHd;AAIEC,IAAAA,UAAU,EAAE;AAJd,GADI,EAOJV,OAPI,CARW,CAAnB;AAkBD",
    "sourcesContent": [
      "import assign from 'lodash-es/assign';\nimport promiseRetry from 'promise-retry';\n\nexport default function performWithRetries(\n  perform,\n  shouldRetryFn = () => false,\n  options = {},\n) {\n  return promiseRetry(\n    retry =>\n      perform().catch(error => {\n        if (shouldRetryFn(error.message)) {\n          return retry(error);\n        }\n        return Promise.reject(error);\n      }),\n    assign(\n      {\n        retries: 5,\n        factor: 2,\n        minTimeout: 1000,\n        maxTimeout: 10000,\n      },\n      options,\n    ),\n  );\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

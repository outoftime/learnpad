{
  "ast": null,
  "code": "/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/ZH-Hant.js');\n\nvar PATTERN = new RegExp('(\\\\d{2,4}|[' + Object.keys(util.NUMBER).join('') + ']{2,4})?' + '(?:\\\\s*)' + '(?:年)?' + '(?:[\\\\s|,|，]*)' + '(\\\\d{1,2}|[' + Object.keys(util.NUMBER).join('') + ']{1,2})' + '(?:\\\\s*)' + '(?:月)' + '(?:\\\\s*)' + '(\\\\d{1,2}|[' + Object.keys(util.NUMBER).join('') + ']{1,2})?' + '(?:\\\\s*)' + '(?:日|號)?');\nvar YEAR_GROUP = 1;\nvar MONTH_GROUP = 2;\nvar DAY_GROUP = 3;\n\nexports.Parser = function ZHHantDateParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var startMoment = moment(ref);\n    var result = new ParsedResult({\n      text: match[0],\n      index: match.index,\n      ref: ref\n    }); //Month\n\n    var month = parseInt(match[MONTH_GROUP]);\n    if (isNaN(month)) month = util.zhStringToNumber(match[MONTH_GROUP]);\n    result.start.assign('month', month); //Day\n\n    if (match[DAY_GROUP]) {\n      var day = parseInt(match[DAY_GROUP]);\n      if (isNaN(day)) day = util.zhStringToNumber(match[DAY_GROUP]);\n      result.start.assign('day', day);\n    } else {\n      result.start.imply('day', startMoment.date());\n    } //Year\n\n\n    if (match[YEAR_GROUP]) {\n      var year = parseInt(match[YEAR_GROUP]);\n      if (isNaN(year)) year = util.zhStringToYear(match[YEAR_GROUP]);\n      result.start.assign('year', year);\n    } else {\n      result.start.imply('year', startMoment.year());\n    }\n\n    result.tags.ZHHantDateParser = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/zh-Hant/ZHHantDateParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "util",
      "PATTERN",
      "RegExp",
      "Object",
      "keys",
      "NUMBER",
      "join",
      "YEAR_GROUP",
      "MONTH_GROUP",
      "DAY_GROUP",
      "exports",
      "ZHHantDateParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "startMoment",
      "result",
      "index",
      "month",
      "parseInt",
      "isNaN",
      "zhStringToNumber",
      "start",
      "assign",
      "day",
      "imply",
      "date",
      "year",
      "zhStringToYear",
      "tags"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n\n\n*/\n\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/ZH-Hant.js');\n\nvar PATTERN = new RegExp(\n    '(\\\\d{2,4}|[' + Object.keys(util.NUMBER).join('') + ']{2,4})?' +\n    '(?:\\\\s*)' +\n    '(?:年)?' +\n    '(?:[\\\\s|,|，]*)' +\n    '(\\\\d{1,2}|[' + Object.keys(util.NUMBER).join('') + ']{1,2})' +\n    '(?:\\\\s*)' +\n    '(?:月)' +\n    '(?:\\\\s*)' +\n    '(\\\\d{1,2}|[' + Object.keys(util.NUMBER).join('') + ']{1,2})?' +\n    '(?:\\\\s*)' +\n    '(?:日|號)?'\n);\n\nvar YEAR_GROUP = 1;\nvar MONTH_GROUP = 2;\nvar DAY_GROUP = 3;\n\nexports.Parser = function ZHHantDateParser() {\n\n    Parser.apply(this, arguments);\n\n    this.pattern = function() {\n        return PATTERN;\n    };\n\n    this.extract = function(text, ref, match, opt) {\n        var startMoment = moment(ref);\n        var result = new ParsedResult({\n            text: match[0],\n            index: match.index,\n            ref: ref,\n        });\n\n        //Month\n        var month = parseInt(match[MONTH_GROUP]);\n        if (isNaN(month)) month = util.zhStringToNumber(match[MONTH_GROUP]);\n        result.start.assign('month', month);\n\n        //Day\n        if (match[DAY_GROUP]) {\n            var day = parseInt(match[DAY_GROUP]);\n            if (isNaN(day)) day = util.zhStringToNumber(match[DAY_GROUP]);\n            result.start.assign('day', day);\n        } else {\n            result.start.imply('day', startMoment.date());\n        }\n\n        //Year\n        if (match[YEAR_GROUP]) {\n            var year = parseInt(match[YEAR_GROUP]);\n            if (isNaN(year)) year = util.zhStringToYear(match[YEAR_GROUP]);\n            result.start.assign('year', year);\n        } else {\n            result.start.imply('year', startMoment.year());\n        }\n\n        result.tags.ZHHantDateParser = true;\n        return result;\n    };\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "import { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport isNull from 'lodash-es/isNull';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { t } from 'i18next';\nimport { AccountMigration as AccountMigrationRecord, UserAccount as UserAccountRecord } from '../records';\nimport { AccountMigrationState } from '../enums';\nimport AccountMigrationComplete from './AccountMigrationComplete';\nimport AccountMigrationInProgress from './AccountMigrationInProgress';\nimport AccountMigrationUndoGracePeriod from './AccountMigrationUndoGracePeriod';\nimport Modal from './Modal';\nimport ProposedAccountMigration from './ProposedAccountMigration';\nimport AccountMigrationError from './AccountMigrationError';\nexport default function AccountMigration(_ref) {\n  var currentUserAccount = _ref.currentUserAccount,\n      migration = _ref.migration,\n      onDismiss = _ref.onDismiss,\n      onMigrate = _ref.onMigrate;\n\n  if (isNull(currentUserAccount) || isNull(migration)) {\n    return null;\n  }\n\n  return React.createElement(Modal, null, React.createElement(\"div\", {\n    className: \"account-migration\"\n  }, React.createElement(\"h1\", {\n    className: \"account-migration__header\"\n  }, t(\"account-migration.header.\".concat(migration.state.key.toLowerCase().replace(/_/g, '-')))), React.createElement(\"div\", {\n    className: \"account-migration__accounts\"\n  }, React.createElement(\"div\", {\n    className: \"account-migration__account\"\n  }, React.createElement(\"p\", {\n    className: \"account-migration__account-label\"\n  }, t('account-migration.your-account')), React.createElement(\"img\", {\n    className: \"account-migration__avatar\",\n    src: currentUserAccount.avatarUrl\n  }), React.createElement(\"div\", {\n    className: \"account-migration__user-name\"\n  }, currentUserAccount.displayName)), React.createElement(\"div\", {\n    className: \"account-migration__merge-icon\"\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faExchangeAlt\n  })), React.createElement(\"div\", {\n    className: \"account-migration__account\"\n  }, React.createElement(\"p\", {\n    className: \"account-migration__account-label\"\n  }, t('account-migration.account-to-merge')), React.createElement(\"img\", {\n    className: \"account-migration__avatar\",\n    src: migration.userAccountToMerge.avatarUrl\n  }), React.createElement(\"div\", {\n    className: \"account-migration__user-name\"\n  }, migration.userAccountToMerge.displayName))), function () {\n    switch (migration.state) {\n      case AccountMigrationState.PROPOSED:\n        return React.createElement(ProposedAccountMigration, {\n          onDismiss: onDismiss,\n          onMigrate: onMigrate\n        });\n\n      case AccountMigrationState.UNDO_GRACE_PERIOD:\n        return React.createElement(AccountMigrationUndoGracePeriod, {\n          onDismiss: onDismiss\n        });\n\n      case AccountMigrationState.IN_PROGRESS:\n        return React.createElement(AccountMigrationInProgress, null);\n\n      case AccountMigrationState.COMPLETE:\n        return React.createElement(AccountMigrationComplete, {\n          onDismiss: onDismiss\n        });\n\n      case AccountMigrationState.ERROR:\n        return React.createElement(AccountMigrationError, {\n          onDismiss: onDismiss\n        });\n    }\n\n    return null;\n  }()));\n}\nAccountMigration.propTypes = {\n  currentUserAccount: PropTypes.instanceOf(UserAccountRecord),\n  migration: PropTypes.instanceOf(AccountMigrationRecord),\n  onDismiss: PropTypes.func.isRequired,\n  onMigrate: PropTypes.func.isRequired\n};\nAccountMigration.defaultProps = {\n  currentUserAccount: null,\n  migration: null\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/components/AccountMigration.jsx"
    ],
    "names": [
      "faExchangeAlt",
      "FontAwesomeIcon",
      "isNull",
      "PropTypes",
      "React",
      "t",
      "AccountMigration",
      "AccountMigrationRecord",
      "UserAccount",
      "UserAccountRecord",
      "AccountMigrationState",
      "AccountMigrationComplete",
      "AccountMigrationInProgress",
      "AccountMigrationUndoGracePeriod",
      "Modal",
      "ProposedAccountMigration",
      "AccountMigrationError",
      "currentUserAccount",
      "migration",
      "onDismiss",
      "onMigrate",
      "state",
      "key",
      "toLowerCase",
      "replace",
      "avatarUrl",
      "displayName",
      "userAccountToMerge",
      "PROPOSED",
      "UNDO_GRACE_PERIOD",
      "IN_PROGRESS",
      "COMPLETE",
      "ERROR",
      "propTypes",
      "instanceOf",
      "func",
      "isRequired",
      "defaultProps"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import {faExchangeAlt} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport isNull from 'lodash-es/isNull';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {t} from 'i18next';\n\nimport {\n  AccountMigration as AccountMigrationRecord,\n  UserAccount as UserAccountRecord,\n} from '../records';\nimport {AccountMigrationState} from '../enums';\n\nimport AccountMigrationComplete from './AccountMigrationComplete';\nimport AccountMigrationInProgress from './AccountMigrationInProgress';\nimport AccountMigrationUndoGracePeriod from './AccountMigrationUndoGracePeriod';\nimport Modal from './Modal';\nimport ProposedAccountMigration from './ProposedAccountMigration';\nimport AccountMigrationError from './AccountMigrationError';\n\nexport default function AccountMigration({\n  currentUserAccount,\n  migration,\n  onDismiss,\n  onMigrate,\n}) {\n  if (isNull(currentUserAccount) || isNull(migration)) {\n    return null;\n  }\n\n  return (\n    <Modal>\n      <div className=\"account-migration\">\n        <h1 className=\"account-migration__header\">\n          {t(\n            `account-migration.header.${migration.state.key\n              .toLowerCase()\n              .replace(/_/gu, '-')}`,\n          )}\n        </h1>\n        <div className=\"account-migration__accounts\">\n          <div className=\"account-migration__account\">\n            <p className=\"account-migration__account-label\">\n              {t('account-migration.your-account')}\n            </p>\n            <img\n              className=\"account-migration__avatar\"\n              src={currentUserAccount.avatarUrl}\n            />\n            <div className=\"account-migration__user-name\">\n              {currentUserAccount.displayName}\n            </div>\n          </div>\n          <div className=\"account-migration__merge-icon\">\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </div>\n          <div className=\"account-migration__account\">\n            <p className=\"account-migration__account-label\">\n              {t('account-migration.account-to-merge')}\n            </p>\n            <img\n              className=\"account-migration__avatar\"\n              src={migration.userAccountToMerge.avatarUrl}\n            />\n            <div className=\"account-migration__user-name\">\n              {migration.userAccountToMerge.displayName}\n            </div>\n          </div>\n        </div>\n        {(() => {\n          switch (migration.state) {\n            case AccountMigrationState.PROPOSED:\n              return (\n                <ProposedAccountMigration\n                  onDismiss={onDismiss}\n                  onMigrate={onMigrate}\n                />\n              );\n            case AccountMigrationState.UNDO_GRACE_PERIOD:\n              return <AccountMigrationUndoGracePeriod onDismiss={onDismiss} />;\n            case AccountMigrationState.IN_PROGRESS:\n              return <AccountMigrationInProgress />;\n            case AccountMigrationState.COMPLETE:\n              return <AccountMigrationComplete onDismiss={onDismiss} />;\n            case AccountMigrationState.ERROR:\n              return <AccountMigrationError onDismiss={onDismiss} />;\n          }\n          return null;\n        })()}\n      </div>\n    </Modal>\n  );\n}\n\nAccountMigration.propTypes = {\n  currentUserAccount: PropTypes.instanceOf(UserAccountRecord),\n  migration: PropTypes.instanceOf(AccountMigrationRecord),\n  onDismiss: PropTypes.func.isRequired,\n  onMigrate: PropTypes.func.isRequired,\n};\n\nAccountMigration.defaultProps = {\n  currentUserAccount: null,\n  migration: null,\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

{
  "ast": null,
  "code": "/*\n    Month/Year date format with slash \"/\" (also \"-\" and \".\") between numbers \n    - 11/05\n    - 06/2005\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp('(^|[^\\\\d/]\\\\s+|[^\\\\w\\\\s])' + '([0-9]|0[1-9]|1[012])/([0-9]{4})' + '([^\\\\d/]|$)', 'i');\nvar OPENNING_GROUP = 1;\nvar ENDING_GROUP = 4;\nvar MONTH_GROUP = 2;\nvar YEAR_GROUP = 3;\n\nexports.Parser = function ENSlashMonthFormatParser(argument) {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[OPENNING_GROUP].length;\n    var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - (1 + match[ENDING_GROUP].length)).trim();\n    var result = new ParsedResult({\n      text: text,\n      index: index,\n      ref: ref\n    });\n    var date = null;\n    var year = match[YEAR_GROUP];\n    var month = match[MONTH_GROUP];\n    var day = 1;\n    month = parseInt(month);\n    year = parseInt(year);\n    result.start.imply('day', day);\n    result.start.assign('month', month);\n    result.start.assign('year', year);\n    result.tags['ENSlashMonthFormatParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/en/ENSlashMonthFormatParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "PATTERN",
      "RegExp",
      "OPENNING_GROUP",
      "ENDING_GROUP",
      "MONTH_GROUP",
      "YEAR_GROUP",
      "exports",
      "ENSlashMonthFormatParser",
      "argument",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "length",
      "substr",
      "trim",
      "result",
      "date",
      "year",
      "month",
      "day",
      "parseInt",
      "start",
      "imply",
      "assign",
      "tags"
    ],
    "mappings": "AAAA;;;;;AAKA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAAlC;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,YAA3C;;AAEA,IAAIC,OAAO,GAAG,IAAIC,MAAJ,CAAW,8BACrB,kCADqB,GAErB,aAFU,EAEK,GAFL,CAAd;AAIA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,YAAY,GAAG,CAAnB;AAEA,IAAIC,WAAW,GAAG,CAAlB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AAEAC,OAAO,CAACR,MAAR,GAAiB,SAASS,wBAAT,CAAkCC,QAAlC,EAA4C;AACzDV,EAAAA,MAAM,CAACW,KAAP,CAAa,IAAb,EAAmBC,SAAnB;;AAEA,OAAKC,OAAL,GAAe,YAAY;AAAE,WAAOX,OAAP;AAAiB,GAA9C;;AACA,OAAKY,OAAL,GAAe,UAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,GAA3B,EAA+B;AAE1C,QAAIC,KAAK,GAAGF,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACb,cAAD,CAAL,CAAsBgB,MAAhD;AACA,QAAIL,IAAI,GAAGE,KAAK,CAAC,CAAD,CAAL,CAASI,MAAT,CAAgBJ,KAAK,CAACb,cAAD,CAAL,CAAsBgB,MAAtC,EAA8CH,KAAK,CAAC,CAAD,CAAL,CAASG,MAAT,IAAmB,IAAIH,KAAK,CAACZ,YAAD,CAAL,CAAoBe,MAA3C,CAA9C,EAAkGE,IAAlG,EAAX;AAEA,QAAIC,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC1Bc,MAAAA,IAAI,EAAEA,IADoB;AAE1BI,MAAAA,KAAK,EAAEA,KAFmB;AAG1BH,MAAAA,GAAG,EAAEA;AAHqB,KAAjB,CAAb;AAMA,QAAIQ,IAAI,GAAG,IAAX;AACA,QAAIC,IAAI,GAAGR,KAAK,CAACV,UAAD,CAAhB;AACA,QAAImB,KAAK,GAAGT,KAAK,CAACX,WAAD,CAAjB;AACA,QAAIqB,GAAG,GAAK,CAAZ;AAEAD,IAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,CAAhB;AACAD,IAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAD,CAAf;AAEAF,IAAAA,MAAM,CAACM,KAAP,CAAaC,KAAb,CAAmB,KAAnB,EAA0BH,GAA1B;AACAJ,IAAAA,MAAM,CAACM,KAAP,CAAaE,MAAb,CAAoB,OAApB,EAA6BL,KAA7B;AACAH,IAAAA,MAAM,CAACM,KAAP,CAAaE,MAAb,CAAoB,MAApB,EAA4BN,IAA5B;AAEAF,IAAAA,MAAM,CAACS,IAAP,CAAY,0BAAZ,IAA0C,IAA1C;AACA,WAAOT,MAAP;AACH,GAzBD;AA0BH,CA9BD",
    "sourcesContent": [
      "/*\n    Month/Year date format with slash \"/\" (also \"-\" and \".\") between numbers \n    - 11/05\n    - 06/2005\n*/\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp('(^|[^\\\\d/]\\\\s+|[^\\\\w\\\\s])' +\n    '([0-9]|0[1-9]|1[012])/([0-9]{4})' + \n    '([^\\\\d/]|$)', 'i');\n\nvar OPENNING_GROUP = 1;\nvar ENDING_GROUP = 4;\n\nvar MONTH_GROUP = 2;\nvar YEAR_GROUP = 3;\n\nexports.Parser = function ENSlashMonthFormatParser(argument) {\n    Parser.apply(this, arguments);\n\n    this.pattern = function () { return PATTERN; };\n    this.extract = function(text, ref, match, opt){\n        \n        var index = match.index + match[OPENNING_GROUP].length;\n        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - (1 + match[ENDING_GROUP].length)).trim();\n\n        var result = new ParsedResult({\n            text: text,\n            index: index,\n            ref: ref,\n        });\n\n        var date = null;\n        var year = match[YEAR_GROUP] ;\n        var month = match[MONTH_GROUP];\n        var day   = 1;\n        \n        month = parseInt(month);\n        year = parseInt(year);\n\n        result.start.imply('day', day);\n        result.start.assign('month', month);\n        result.start.assign('year', year);\n\n        result.tags['ENSlashMonthFormatParser'] = true;\n        return result;\n    };\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

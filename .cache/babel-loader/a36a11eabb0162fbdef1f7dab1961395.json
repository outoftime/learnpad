{
  "ast": null,
  "code": "import classnames from 'classnames';\nimport { faBan, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport partial from 'lodash-es/partial';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { t } from 'i18next';\nimport { EditorLocation } from '../records';\nimport ConsoleEntry from './ConsoleEntry';\nimport ConsoleInput from './ConsoleInput';\nexport default function Console(_ref) {\n  var currentCompiledProjectKey = _ref.currentCompiledProjectKey,\n      currentInputValue = _ref.currentInputValue,\n      currentProjectKey = _ref.currentProjectKey,\n      history = _ref.history,\n      isHidden = _ref.isHidden,\n      isOpen = _ref.isOpen,\n      isTextSizeLarge = _ref.isTextSizeLarge,\n      onChange = _ref.onChange,\n      onClearConsoleEntries = _ref.onClearConsoleEntries,\n      onConsoleClicked = _ref.onConsoleClicked,\n      onInput = _ref.onInput,\n      onNextConsoleHistory = _ref.onNextConsoleHistory,\n      onPreviousConsoleHistory = _ref.onPreviousConsoleHistory,\n      onRequestedLineFocused = _ref.onRequestedLineFocused,\n      onToggleVisible = _ref.onToggleVisible,\n      requestedFocusedLine = _ref.requestedFocusedLine;\n\n  if (!isOpen) {\n    return null;\n  }\n\n  var console = React.createElement(\"div\", {\n    className: \"console__scroll-container output__item\",\n    onClick: onConsoleClicked\n  }, React.createElement(\"div\", {\n    className: classnames('console__repl', {\n      console__repl_zoomed: isTextSizeLarge\n    })\n  }, React.createElement(ConsoleInput, {\n    currentInputValue: currentInputValue,\n    isTextSizeLarge: isTextSizeLarge,\n    requestedFocusedLine: requestedFocusedLine,\n    onChange: onChange,\n    onInput: onInput,\n    onNextConsoleHistory: onNextConsoleHistory,\n    onPreviousConsoleHistory: onPreviousConsoleHistory,\n    onRequestedLineFocused: onRequestedLineFocused\n  }), history.map(function (entry, key) {\n    var isActive = currentCompiledProjectKey === entry.evaluatedByCompiledProjectKey;\n    return React.createElement(ConsoleEntry, {\n      entry: entry,\n      isActive: isActive,\n      key: key\n    });\n  }).valueSeq().reverse()));\n  return React.createElement(\"div\", {\n    className: classnames('console', {\n      u__hidden: isHidden\n    })\n  }, React.createElement(\"div\", {\n    className: \"label console__label\",\n    onClick: partial(onToggleVisible, currentProjectKey)\n  }, React.createElement(\"div\", null, t('workspace.components.console'), ' ', React.createElement(FontAwesomeIcon, {\n    icon: faChevronDown\n  })), React.createElement(\"div\", {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      onClearConsoleEntries();\n    }\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faBan\n  }))), console);\n}\nConsole.propTypes = {\n  currentCompiledProjectKey: PropTypes.number,\n  currentInputValue: PropTypes.string.isRequired,\n  currentProjectKey: PropTypes.string.isRequired,\n  history: ImmutablePropTypes.iterable.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isTextSizeLarge: PropTypes.bool,\n  requestedFocusedLine: PropTypes.instanceOf(EditorLocation),\n  onChange: PropTypes.func.isRequired,\n  onClearConsoleEntries: PropTypes.func.isRequired,\n  onConsoleClicked: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onNextConsoleHistory: PropTypes.func.isRequired,\n  onPreviousConsoleHistory: PropTypes.func.isRequired,\n  onRequestedLineFocused: PropTypes.func.isRequired,\n  onToggleVisible: PropTypes.func.isRequired\n};\nConsole.defaultProps = {\n  currentCompiledProjectKey: null,\n  requestedFocusedLine: null,\n  isTextSizeLarge: false\n};",
  "map": {
    "version": 3,
    "sources": ["/Users/peter/Desktop/code/popcode/src/components/Console.jsx"],
    "names": [
      "classnames",
      "faBan",
      "faChevronDown",
      "FontAwesomeIcon",
      "partial",
      "React",
      "PropTypes",
      "ImmutablePropTypes",
      "t",
      "EditorLocation",
      "ConsoleEntry",
      "ConsoleInput",
      "Console",
      "currentCompiledProjectKey",
      "currentInputValue",
      "currentProjectKey",
      "history",
      "isHidden",
      "isOpen",
      "isTextSizeLarge",
      "onChange",
      "onClearConsoleEntries",
      "onConsoleClicked",
      "onInput",
      "onNextConsoleHistory",
      "onPreviousConsoleHistory",
      "onRequestedLineFocused",
      "onToggleVisible",
      "requestedFocusedLine",
      "console",
      "console__repl_zoomed",
      "map",
      "entry",
      "key",
      "isActive",
      "evaluatedByCompiledProjectKey",
      "valueSeq",
      "reverse",
      "u__hidden",
      "e",
      "stopPropagation",
      "propTypes",
      "number",
      "string",
      "isRequired",
      "iterable",
      "bool",
      "instanceOf",
      "func",
      "defaultProps"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import classnames from 'classnames';\nimport {faBan, faChevronDown} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport partial from 'lodash-es/partial';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport {t} from 'i18next';\n\nimport {EditorLocation} from '../records';\n\nimport ConsoleEntry from './ConsoleEntry';\nimport ConsoleInput from './ConsoleInput';\n\nexport default function Console({\n  currentCompiledProjectKey,\n  currentInputValue,\n  currentProjectKey,\n  history,\n  isHidden,\n  isOpen,\n  isTextSizeLarge,\n  onChange,\n  onClearConsoleEntries,\n  onConsoleClicked,\n  onInput,\n  onNextConsoleHistory,\n  onPreviousConsoleHistory,\n  onRequestedLineFocused,\n  onToggleVisible,\n  requestedFocusedLine,\n}) {\n  if (!isOpen) {\n    return null;\n  }\n\n  const console = (\n    <div\n      className=\"console__scroll-container output__item\"\n      onClick={onConsoleClicked}\n    >\n      <div\n        className={classnames('console__repl', {\n          console__repl_zoomed: isTextSizeLarge,\n        })}\n      >\n        <ConsoleInput\n          currentInputValue={currentInputValue}\n          isTextSizeLarge={isTextSizeLarge}\n          requestedFocusedLine={requestedFocusedLine}\n          onChange={onChange}\n          onInput={onInput}\n          onNextConsoleHistory={onNextConsoleHistory}\n          onPreviousConsoleHistory={onPreviousConsoleHistory}\n          onRequestedLineFocused={onRequestedLineFocused}\n        />\n        {history\n          .map((entry, key) => {\n            const isActive =\n              currentCompiledProjectKey === entry.evaluatedByCompiledProjectKey;\n            return <ConsoleEntry entry={entry} isActive={isActive} key={key} />;\n          })\n          .valueSeq()\n          .reverse()}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={classnames('console', {u__hidden: isHidden})}>\n      <div\n        className=\"label console__label\"\n        onClick={partial(onToggleVisible, currentProjectKey)}\n      >\n        <div>\n          {t('workspace.components.console')}{' '}\n          <FontAwesomeIcon icon={faChevronDown} />\n        </div>\n        <div\n          onClick={e => {\n            e.stopPropagation();\n            onClearConsoleEntries();\n          }}\n        >\n          <FontAwesomeIcon icon={faBan} />\n        </div>\n      </div>\n      {console}\n    </div>\n  );\n}\n\nConsole.propTypes = {\n  currentCompiledProjectKey: PropTypes.number,\n  currentInputValue: PropTypes.string.isRequired,\n  currentProjectKey: PropTypes.string.isRequired,\n  history: ImmutablePropTypes.iterable.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isTextSizeLarge: PropTypes.bool,\n  requestedFocusedLine: PropTypes.instanceOf(EditorLocation),\n  onChange: PropTypes.func.isRequired,\n  onClearConsoleEntries: PropTypes.func.isRequired,\n  onConsoleClicked: PropTypes.func.isRequired,\n  onInput: PropTypes.func.isRequired,\n  onNextConsoleHistory: PropTypes.func.isRequired,\n  onPreviousConsoleHistory: PropTypes.func.isRequired,\n  onRequestedLineFocused: PropTypes.func.isRequired,\n  onToggleVisible: PropTypes.func.isRequired,\n};\n\nConsole.defaultProps = {\n  currentCompiledProjectKey: null,\n  requestedFocusedLine: null,\n  isTextSizeLarge: false,\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

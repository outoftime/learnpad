{
  "ast": null,
  "code": "var parser = require('./parsers/parser');\n\nvar refiner = require('./refiners/refiner');\n\nexports.mergeOptions = function (options) {\n  var addedTypes = {};\n  var mergedOption = {\n    parsers: [],\n    refiners: []\n  };\n  options.forEach(function (option) {\n    if (option.call) {\n      option = option.call();\n    }\n\n    if (option.parsers) {\n      option.parsers.forEach(function (p) {\n        if (!addedTypes[p.constructor]) {\n          mergedOption.parsers.push(p);\n          addedTypes[p.constructor] = true;\n        }\n      });\n    }\n\n    if (option.refiners) {\n      option.refiners.forEach(function (r) {\n        if (!addedTypes[r.constructor]) {\n          mergedOption.refiners.push(r);\n          addedTypes[r.constructor] = true;\n        }\n      });\n    }\n  });\n  return mergedOption;\n};\n\nexports.commonPostProcessing = function () {\n  return {\n    refiners: [// These should be after all other refiners\n    new refiner.ExtractTimezoneOffsetRefiner(), new refiner.ExtractTimezoneAbbrRefiner(), new refiner.UnlikelyFormatFilter()]\n  };\n}; // -------------------------------------------------------------\n\n\nexports.strictOption = function () {\n  var strictConfig = {\n    strict: true\n  };\n  return exports.mergeOptions([exports.en(strictConfig), exports.de(strictConfig), exports.es(strictConfig), exports.fr(strictConfig), exports.ja(strictConfig), exports.zh, exports.commonPostProcessing]);\n};\n\nexports.casualOption = function () {\n  return exports.mergeOptions([exports.en.casual, // Some German abbriviate overlap with common English\n  exports.de({\n    strict: true\n  }), exports.es.casual, exports.fr.casual, exports.ja.casual, exports.zh, exports.commonPostProcessing]);\n}; // -------------------------------------------------------------\n\n\nexports.de = function (config) {\n  return {\n    parsers: [new parser.DEDeadlineFormatParser(config), new parser.DEMonthNameLittleEndianParser(config), new parser.DEMonthNameParser(config), new parser.DESlashDateFormatParser(config), new parser.DETimeAgoFormatParser(config), new parser.DETimeExpressionParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), new refiner.DEMergeDateTimeRefiner(), new refiner.DEMergeDateRangeRefiner()]\n  };\n};\n\nexports.de.casual = function () {\n  var option = exports.de({\n    strict: false\n  });\n  option.parsers.unshift(new parser.DECasualDateParser());\n  option.parsers.unshift(new parser.DEWeekdayParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.en = function (config) {\n  return {\n    parsers: [new parser.ENISOFormatParser(config), new parser.ENDeadlineFormatParser(config), new parser.ENMonthNameLittleEndianParser(config), new parser.ENMonthNameMiddleEndianParser(config), new parser.ENMonthNameParser(config), new parser.ENSlashDateFormatParser(config), new parser.ENSlashDateFormatStartWithYearParser(config), new parser.ENSlashMonthFormatParser(config), new parser.ENTimeAgoFormatParser(config), new parser.ENTimeLaterFormatParser(config), new parser.ENTimeExpressionParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), // English\n    new refiner.ENMergeDateTimeRefiner(), new refiner.ENMergeDateRangeRefiner(), new refiner.ENPrioritizeSpecificDateRefiner()]\n  };\n};\n\nexports.en.casual = function (config) {\n  config = config || {};\n  config.strict = false;\n  var option = exports.en(config); // en\n\n  option.parsers.unshift(new parser.ENCasualDateParser());\n  option.parsers.unshift(new parser.ENCasualTimeParser());\n  option.parsers.unshift(new parser.ENWeekdayParser());\n  option.parsers.unshift(new parser.ENRelativeDateFormatParser());\n  return option;\n};\n\nexports.en_GB = function (config) {\n  config = config || {};\n  config.littleEndian = true;\n  return exports.en(config);\n};\n\nexports.en_GB.casual = function (config) {\n  config = config || {};\n  config.littleEndian = true;\n  return exports.en.casual(config);\n}; // -------------------------------------------------------------\n\n\nexports.ja = function () {\n  return {\n    parsers: [new parser.JPStandardParser()],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), new refiner.JPMergeDateRangeRefiner()]\n  };\n};\n\nexports.ja.casual = function () {\n  var option = exports.ja();\n  option.parsers.unshift(new parser.JPCasualDateParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.es = function (config) {\n  return {\n    parsers: [new parser.ESTimeAgoFormatParser(config), new parser.ESDeadlineFormatParser(config), new parser.ESTimeExpressionParser(config), new parser.ESMonthNameLittleEndianParser(config), new parser.ESSlashDateFormatParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner()]\n  };\n};\n\nexports.es.casual = function () {\n  var option = exports.es({\n    strict: false\n  });\n  option.parsers.unshift(new parser.ESCasualDateParser());\n  option.parsers.unshift(new parser.ESWeekdayParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.fr = function (config) {\n  return {\n    parsers: [new parser.FRDeadlineFormatParser(config), new parser.FRMonthNameLittleEndianParser(config), new parser.FRSlashDateFormatParser(config), new parser.FRTimeAgoFormatParser(config), new parser.FRTimeExpressionParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), new refiner.FRMergeDateRangeRefiner(), new refiner.FRMergeDateTimeRefiner()]\n  };\n};\n\nexports.fr.casual = function () {\n  var option = exports.fr({\n    strict: false\n  });\n  option.parsers.unshift(new parser.FRCasualDateParser());\n  option.parsers.unshift(new parser.FRWeekdayParser());\n  option.parsers.unshift(new parser.FRRelativeDateFormatParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.zh = function () {\n  return {\n    parsers: [new parser.ZHHantDateParser(), new parser.ZHHantWeekdayParser(), new parser.ZHHantTimeExpressionParser(), new parser.ZHHantCasualDateParser(), new parser.ZHHantDeadlineFormatParser()],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner()]\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/options.js"
    ],
    "names": [
      "parser",
      "require",
      "refiner",
      "exports",
      "mergeOptions",
      "options",
      "addedTypes",
      "mergedOption",
      "parsers",
      "refiners",
      "forEach",
      "option",
      "call",
      "p",
      "constructor",
      "push",
      "r",
      "commonPostProcessing",
      "ExtractTimezoneOffsetRefiner",
      "ExtractTimezoneAbbrRefiner",
      "UnlikelyFormatFilter",
      "strictOption",
      "strictConfig",
      "strict",
      "en",
      "de",
      "es",
      "fr",
      "ja",
      "zh",
      "casualOption",
      "casual",
      "config",
      "DEDeadlineFormatParser",
      "DEMonthNameLittleEndianParser",
      "DEMonthNameParser",
      "DESlashDateFormatParser",
      "DETimeAgoFormatParser",
      "DETimeExpressionParser",
      "OverlapRemovalRefiner",
      "ForwardDateRefiner",
      "DEMergeDateTimeRefiner",
      "DEMergeDateRangeRefiner",
      "unshift",
      "DECasualDateParser",
      "DEWeekdayParser",
      "ENISOFormatParser",
      "ENDeadlineFormatParser",
      "ENMonthNameLittleEndianParser",
      "ENMonthNameMiddleEndianParser",
      "ENMonthNameParser",
      "ENSlashDateFormatParser",
      "ENSlashDateFormatStartWithYearParser",
      "ENSlashMonthFormatParser",
      "ENTimeAgoFormatParser",
      "ENTimeLaterFormatParser",
      "ENTimeExpressionParser",
      "ENMergeDateTimeRefiner",
      "ENMergeDateRangeRefiner",
      "ENPrioritizeSpecificDateRefiner",
      "ENCasualDateParser",
      "ENCasualTimeParser",
      "ENWeekdayParser",
      "ENRelativeDateFormatParser",
      "en_GB",
      "littleEndian",
      "JPStandardParser",
      "JPMergeDateRangeRefiner",
      "JPCasualDateParser",
      "ESTimeAgoFormatParser",
      "ESDeadlineFormatParser",
      "ESTimeExpressionParser",
      "ESMonthNameLittleEndianParser",
      "ESSlashDateFormatParser",
      "ESCasualDateParser",
      "ESWeekdayParser",
      "FRDeadlineFormatParser",
      "FRMonthNameLittleEndianParser",
      "FRSlashDateFormatParser",
      "FRTimeAgoFormatParser",
      "FRTimeExpressionParser",
      "FRMergeDateRangeRefiner",
      "FRMergeDateTimeRefiner",
      "FRCasualDateParser",
      "FRWeekdayParser",
      "FRRelativeDateFormatParser",
      "ZHHantDateParser",
      "ZHHantWeekdayParser",
      "ZHHantTimeExpressionParser",
      "ZHHantCasualDateParser",
      "ZHHantDeadlineFormatParser"
    ],
    "mappings": "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",
    "sourcesContent": [
      "var parser = require('./parsers/parser');\nvar refiner = require('./refiners/refiner');\n\n\nexports.mergeOptions = function(options) {\n\n    var addedTypes = {};\n    var mergedOption = {\n        parsers: [],\n        refiners: []\n    };\n\n    options.forEach(function (option) {\n\n        if (option.call) {\n            option = option.call();\n        }\n\n        if (option.parsers) {\n            option.parsers.forEach(function (p) {\n                if (!addedTypes[p.constructor]) {\n                    mergedOption.parsers.push(p);\n                    addedTypes[p.constructor] = true;\n                }\n            });\n        }\n\n        if (option.refiners) {\n            option.refiners.forEach(function (r) {\n                if (!addedTypes[r.constructor]) {\n                    mergedOption.refiners.push(r);\n                    addedTypes[r.constructor] = true;\n                }\n            });\n        }\n    });\n\n    return mergedOption;\n};\n\n\nexports.commonPostProcessing = function() {\n    return {\n        refiners: [\n            // These should be after all other refiners\n            new refiner.ExtractTimezoneOffsetRefiner(),\n            new refiner.ExtractTimezoneAbbrRefiner(),\n            new refiner.UnlikelyFormatFilter()\n        ]\n    }\n};\n\n\n// -------------------------------------------------------------\n\nexports.strictOption = function () {\n    var strictConfig = {\n        strict: true\n    };\n\n    return exports.mergeOptions([\n        exports.en(strictConfig),\n        exports.de(strictConfig),\n        exports.es(strictConfig),\n        exports.fr(strictConfig),\n        exports.ja(strictConfig),\n        exports.zh,\n        exports.commonPostProcessing\n    ]);\n};\n\nexports.casualOption = function () {\n    return exports.mergeOptions([\n        exports.en.casual,\n        // Some German abbriviate overlap with common English\n        exports.de({ strict: true }), \n        exports.es.casual,\n        exports.fr.casual,\n        exports.ja.casual,\n        exports.zh,\n        exports.commonPostProcessing\n    ]);\n};\n\n// -------------------------------------------------------------\n\nexports.de = function(config) {\n    return {\n        parsers: [\n            new parser.DEDeadlineFormatParser(config),\n            new parser.DEMonthNameLittleEndianParser(config),\n            new parser.DEMonthNameParser(config),\n            new parser.DESlashDateFormatParser(config),\n            new parser.DETimeAgoFormatParser(config),\n            new parser.DETimeExpressionParser(config)\n        ],\n        refiners: [\n            new refiner.OverlapRemovalRefiner(),\n            new refiner.ForwardDateRefiner(),\n            new refiner.DEMergeDateTimeRefiner(),\n            new refiner.DEMergeDateRangeRefiner()\n        ]\n    }\n};\n\nexports.de.casual = function() {\n    var option = exports.de({\n        strict: false\n    });\n    option.parsers.unshift(new parser.DECasualDateParser());\n    option.parsers.unshift(new parser.DEWeekdayParser());\n    return option;\n};\n\n\n\n// -------------------------------------------------------------\n\n\nexports.en = function(config) {\n    return {\n        parsers: [\n            new parser.ENISOFormatParser(config),\n            new parser.ENDeadlineFormatParser(config),\n            new parser.ENMonthNameLittleEndianParser(config),\n            new parser.ENMonthNameMiddleEndianParser(config),\n            new parser.ENMonthNameParser(config),\n            new parser.ENSlashDateFormatParser(config),\n            new parser.ENSlashDateFormatStartWithYearParser(config),\n            new parser.ENSlashMonthFormatParser(config),\n            new parser.ENTimeAgoFormatParser(config),\n            new parser.ENTimeLaterFormatParser(config),\n            new parser.ENTimeExpressionParser(config)\n        ],\n        refiners: [\n            new refiner.OverlapRemovalRefiner(),\n            new refiner.ForwardDateRefiner(),\n\n            // English\n            new refiner.ENMergeDateTimeRefiner(),\n            new refiner.ENMergeDateRangeRefiner(),\n            new refiner.ENPrioritizeSpecificDateRefiner()\n        ]\n    }\n};\n\nexports.en.casual = function(config) {\n    config = config || {};\n    config.strict = false;\n    var option = exports.en(config);\n\n    // en\n    option.parsers.unshift(new parser.ENCasualDateParser());\n    option.parsers.unshift(new parser.ENCasualTimeParser());\n    option.parsers.unshift(new parser.ENWeekdayParser());\n    option.parsers.unshift(new parser.ENRelativeDateFormatParser());\n    return option;\n};\n\n\nexports.en_GB = function(config) {\n    config = config || {};\n    config.littleEndian = true;\n    return exports.en(config);\n}\n\nexports.en_GB.casual = function(config) {\n    config = config || {};\n    config.littleEndian = true;\n    return exports.en.casual(config);\n}\n\n// -------------------------------------------------------------\n\nexports.ja = function() {\n    return {\n        parsers: [\n            new parser.JPStandardParser()\n        ],\n        refiners: [\n            new refiner.OverlapRemovalRefiner(),\n            new refiner.ForwardDateRefiner(),\n            new refiner.JPMergeDateRangeRefiner()\n        ]\n    }\n};\n\nexports.ja.casual = function() {\n    var option = exports.ja();\n    option.parsers.unshift(new parser.JPCasualDateParser());\n    return option;\n};\n\n\n// -------------------------------------------------------------\n\n\nexports.es = function(config) {\n    return {\n        parsers: [\n            new parser.ESTimeAgoFormatParser(config),\n            new parser.ESDeadlineFormatParser(config),\n            new parser.ESTimeExpressionParser(config),\n            new parser.ESMonthNameLittleEndianParser(config),\n            new parser.ESSlashDateFormatParser(config)\n        ],\n        refiners: [\n            new refiner.OverlapRemovalRefiner(),\n            new refiner.ForwardDateRefiner()\n        ]\n    }\n};\n\nexports.es.casual = function() {\n    var option = exports.es({ \n        strict: false \n    });\n\n    option.parsers.unshift(new parser.ESCasualDateParser());\n    option.parsers.unshift(new parser.ESWeekdayParser());\n    return option;\n};\n\n\n// -------------------------------------------------------------\n\nexports.fr = function(config) {\n    return {\n        parsers: [\n            new parser.FRDeadlineFormatParser(config),\n            new parser.FRMonthNameLittleEndianParser(config),\n            new parser.FRSlashDateFormatParser(config),\n            new parser.FRTimeAgoFormatParser(config),\n            new parser.FRTimeExpressionParser(config)\n        ],\n        refiners: [\n            new refiner.OverlapRemovalRefiner(),\n            new refiner.ForwardDateRefiner(),\n            new refiner.FRMergeDateRangeRefiner(),\n            new refiner.FRMergeDateTimeRefiner()\n        ]\n    }\n};\n\nexports.fr.casual = function() {\n    var option = exports.fr({\n        strict: false\n    });\n\n    option.parsers.unshift(new parser.FRCasualDateParser());\n    option.parsers.unshift(new parser.FRWeekdayParser());\n    option.parsers.unshift(new parser.FRRelativeDateFormatParser());\n    return option;\n};\n\n\n// -------------------------------------------------------------\n\nexports.zh = function() {\n    return {\n        parsers: [\n            new parser.ZHHantDateParser(),\n            new parser.ZHHantWeekdayParser(),\n            new parser.ZHHantTimeExpressionParser(),\n            new parser.ZHHantCasualDateParser(),\n            new parser.ZHHantDeadlineFormatParser()\n        ],\n        refiners: [\n            new refiner.OverlapRemovalRefiner(),\n            new refiner.ForwardDateRefiner()\n        ]\n    }\n};"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

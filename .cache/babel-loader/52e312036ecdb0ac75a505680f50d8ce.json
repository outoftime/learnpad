{
  "ast": null,
  "code": "/*\n  \n*/\nvar Refiner = require('./refiner').Refiner;\n\nvar TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(GMT|UTC)?(\\\\+|\\\\-)(\\\\d{1,2}):?(\\\\d{2})\", 'i');\nvar TIMEZONE_OFFSET_SIGN_GROUP = 2;\nvar TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 3;\nvar TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 4;\n\nexports.Refiner = function ExtractTimezoneOffsetRefiner() {\n  Refiner.call(this);\n\n  this.refine = function (text, results, opt) {\n    results.forEach(function (result) {\n      if (result.start.isCertain('timezoneOffset')) {\n        return;\n      }\n\n      var match = TIMEZONE_OFFSET_PATTERN.exec(text.substring(result.index + result.text.length));\n\n      if (!match) {\n        return;\n      }\n\n      var hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n      var minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP]);\n      var timezoneOffset = hourOffset * 60 + minuteOffset;\n\n      if (match[TIMEZONE_OFFSET_SIGN_GROUP] === '-') {\n        timezoneOffset = -timezoneOffset;\n      }\n\n      if (result.end != null) {\n        result.end.assign('timezoneOffset', timezoneOffset);\n      }\n\n      result.start.assign('timezoneOffset', timezoneOffset);\n      result.text += match[0];\n      result.tags['ExtractTimezoneOffsetRefiner'] = true;\n    });\n    return results;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/refiners/ExtractTimezoneOffsetRefiner.js"
    ],
    "names": [
      "Refiner",
      "require",
      "TIMEZONE_OFFSET_PATTERN",
      "RegExp",
      "TIMEZONE_OFFSET_SIGN_GROUP",
      "TIMEZONE_OFFSET_HOUR_OFFSET_GROUP",
      "TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP",
      "exports",
      "ExtractTimezoneOffsetRefiner",
      "call",
      "refine",
      "text",
      "results",
      "opt",
      "forEach",
      "result",
      "start",
      "isCertain",
      "match",
      "exec",
      "substring",
      "index",
      "length",
      "hourOffset",
      "parseInt",
      "minuteOffset",
      "timezoneOffset",
      "end",
      "assign",
      "tags"
    ],
    "mappings": "AAAA;;;AAGA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AAGA,IAAIE,uBAAuB,GAAG,IAAIC,MAAJ,CAAW,8CAAX,EAA2D,GAA3D,CAA9B;AACA,IAAIC,0BAA0B,GAAG,CAAjC;AACA,IAAIC,iCAAiC,GAAG,CAAxC;AACA,IAAIC,mCAAmC,GAAG,CAA1C;;AAEAC,OAAO,CAACP,OAAR,GAAkB,SAASQ,4BAAT,GAAwC;AACtDR,EAAAA,OAAO,CAACS,IAAR,CAAa,IAAb;;AAEA,OAAKC,MAAL,GAAc,UAASC,IAAT,EAAeC,OAAf,EAAwBC,GAAxB,EAA6B;AAEvCD,IAAAA,OAAO,CAACE,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAE7B,UAAIA,MAAM,CAACC,KAAP,CAAaC,SAAb,CAAuB,gBAAvB,CAAJ,EAA8C;AAC1C;AACH;;AAED,UAAIC,KAAK,GAAGhB,uBAAuB,CAACiB,IAAxB,CAA6BR,IAAI,CAACS,SAAL,CAAeL,MAAM,CAACM,KAAP,GAAeN,MAAM,CAACJ,IAAP,CAAYW,MAA1C,CAA7B,CAAZ;;AACA,UAAI,CAACJ,KAAL,EAAY;AACR;AACH;;AAED,UAAIK,UAAU,GAAGC,QAAQ,CAACN,KAAK,CAACb,iCAAD,CAAN,CAAzB;AACA,UAAIoB,YAAY,GAAGD,QAAQ,CAACN,KAAK,CAACZ,mCAAD,CAAN,CAA3B;AACA,UAAIoB,cAAc,GAAGH,UAAU,GAAG,EAAb,GAAkBE,YAAvC;;AACA,UAAIP,KAAK,CAACd,0BAAD,CAAL,KAAsC,GAA1C,EAA+C;AAC3CsB,QAAAA,cAAc,GAAG,CAACA,cAAlB;AACH;;AAED,UAAIX,MAAM,CAACY,GAAP,IAAc,IAAlB,EAAwB;AACpBZ,QAAAA,MAAM,CAACY,GAAP,CAAWC,MAAX,CAAkB,gBAAlB,EAAoCF,cAApC;AACH;;AAEDX,MAAAA,MAAM,CAACC,KAAP,CAAaY,MAAb,CAAoB,gBAApB,EAAsCF,cAAtC;AACAX,MAAAA,MAAM,CAACJ,IAAP,IAAeO,KAAK,CAAC,CAAD,CAApB;AACAH,MAAAA,MAAM,CAACc,IAAP,CAAY,8BAAZ,IAA8C,IAA9C;AACH,KAzBD;AA2BA,WAAOjB,OAAP;AACH,GA9BD;AA+BH,CAlCD",
    "sourcesContent": [
      "/*\n  \n*/\nvar Refiner = require('./refiner').Refiner;\n\n\nvar TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(GMT|UTC)?(\\\\+|\\\\-)(\\\\d{1,2}):?(\\\\d{2})\", 'i');\nvar TIMEZONE_OFFSET_SIGN_GROUP = 2;\nvar TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 3;\nvar TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 4;\n\nexports.Refiner = function ExtractTimezoneOffsetRefiner() {\n    Refiner.call(this);\n\n    this.refine = function(text, results, opt) {\n\n        results.forEach(function(result) {\n\n            if (result.start.isCertain('timezoneOffset')) {\n                return;\n            }\n\n            var match = TIMEZONE_OFFSET_PATTERN.exec(text.substring(result.index + result.text.length));\n            if (!match) {\n                return;\n            }\n\n            var hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n            var minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP]);\n            var timezoneOffset = hourOffset * 60 + minuteOffset;\n            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === '-') {\n                timezoneOffset = -timezoneOffset;\n            }\n\n            if (result.end != null) {\n                result.end.assign('timezoneOffset', timezoneOffset);\n            }\n\n            result.start.assign('timezoneOffset', timezoneOffset);\n            result.text += match[0];\n            result.tags['ExtractTimezoneOffsetRefiner'] = true;\n        });\n\n        return results;\n    }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

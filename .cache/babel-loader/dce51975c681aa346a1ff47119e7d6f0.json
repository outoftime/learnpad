{
  "ast": null,
  "code": "var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction isSimplePositionValue(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nvar alignmentValues = ['center', 'end', 'start', 'stretch'];\nvar displayValues = {\n  'inline-grid': ['-ms-inline-grid', 'inline-grid'],\n  grid: ['-ms-grid', 'grid']\n};\nvar propertyConverters = {\n  alignSelf: function alignSelf(value, style) {\n    if (alignmentValues.indexOf(value) > -1) {\n      style.msGridRowAlign = value;\n    }\n  },\n  gridColumn: function gridColumn(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridColumn = value;\n    } else {\n      var _value$split$map = value.split('/').map(function (position) {\n        return +position;\n      }),\n          _value$split$map2 = _slicedToArray(_value$split$map, 2),\n          start = _value$split$map2[0],\n          end = _value$split$map2[1];\n\n      propertyConverters.gridColumnStart(start, style);\n      propertyConverters.gridColumnEnd(end, style);\n    }\n  },\n  gridColumnEnd: function gridColumnEnd(value, style) {\n    var msGridColumn = style.msGridColumn;\n\n    if (isSimplePositionValue(value) && isSimplePositionValue(msGridColumn)) {\n      style.msGridColumnSpan = value - msGridColumn;\n    }\n  },\n  gridColumnStart: function gridColumnStart(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridColumn = value;\n    }\n  },\n  gridRow: function gridRow(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridRow = value;\n    } else {\n      var _value$split$map3 = value.split('/').map(function (position) {\n        return +position;\n      }),\n          _value$split$map4 = _slicedToArray(_value$split$map3, 2),\n          start = _value$split$map4[0],\n          end = _value$split$map4[1];\n\n      propertyConverters.gridRowStart(start, style);\n      propertyConverters.gridRowEnd(end, style);\n    }\n  },\n  gridRowEnd: function gridRowEnd(value, style) {\n    var msGridRow = style.msGridRow;\n\n    if (isSimplePositionValue(value) && isSimplePositionValue(msGridRow)) {\n      style.msGridRowSpan = value - msGridRow;\n    }\n  },\n  gridRowStart: function gridRowStart(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridRow = value;\n    }\n  },\n  gridTemplateColumns: function gridTemplateColumns(value, style) {\n    style.msGridColumns = value;\n  },\n  gridTemplateRows: function gridTemplateRows(value, style) {\n    style.msGridRows = value;\n  },\n  justifySelf: function justifySelf(value, style) {\n    if (alignmentValues.indexOf(value) > -1) {\n      style.msGridColumnAlign = value;\n    }\n  }\n};\nexport default function grid(property, value, style) {\n  if (property === 'display' && value in displayValues) {\n    return displayValues[value];\n  }\n\n  if (property in propertyConverters) {\n    var propertyConverter = propertyConverters[property];\n    propertyConverter(value, style);\n  }\n}",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/inline-style-prefixer/es/plugins/grid.js"
    ],
    "names": [
      "_slicedToArray",
      "sliceIterator",
      "arr",
      "i",
      "_arr",
      "_n",
      "_d",
      "_e",
      "undefined",
      "_i",
      "Symbol",
      "iterator",
      "_s",
      "next",
      "done",
      "push",
      "value",
      "length",
      "err",
      "Array",
      "isArray",
      "Object",
      "TypeError",
      "isSimplePositionValue",
      "isNaN",
      "alignmentValues",
      "displayValues",
      "grid",
      "propertyConverters",
      "alignSelf",
      "style",
      "indexOf",
      "msGridRowAlign",
      "gridColumn",
      "msGridColumn",
      "_value$split$map",
      "split",
      "map",
      "position",
      "_value$split$map2",
      "start",
      "end",
      "gridColumnStart",
      "gridColumnEnd",
      "msGridColumnSpan",
      "gridRow",
      "msGridRow",
      "_value$split$map3",
      "_value$split$map4",
      "gridRowStart",
      "gridRowEnd",
      "msGridRowSpan",
      "gridTemplateColumns",
      "msGridColumns",
      "gridTemplateRows",
      "msGridRows",
      "justifySelf",
      "msGridColumnAlign",
      "property",
      "propertyConverter"
    ],
    "mappings": "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",
    "sourcesContent": [
      "var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction isSimplePositionValue(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nvar alignmentValues = ['center', 'end', 'start', 'stretch'];\n\nvar displayValues = {\n  'inline-grid': ['-ms-inline-grid', 'inline-grid'],\n  grid: ['-ms-grid', 'grid']\n};\n\nvar propertyConverters = {\n  alignSelf: function alignSelf(value, style) {\n    if (alignmentValues.indexOf(value) > -1) {\n      style.msGridRowAlign = value;\n    }\n  },\n\n  gridColumn: function gridColumn(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridColumn = value;\n    } else {\n      var _value$split$map = value.split('/').map(function (position) {\n        return +position;\n      }),\n          _value$split$map2 = _slicedToArray(_value$split$map, 2),\n          start = _value$split$map2[0],\n          end = _value$split$map2[1];\n\n      propertyConverters.gridColumnStart(start, style);\n      propertyConverters.gridColumnEnd(end, style);\n    }\n  },\n\n  gridColumnEnd: function gridColumnEnd(value, style) {\n    var msGridColumn = style.msGridColumn;\n\n    if (isSimplePositionValue(value) && isSimplePositionValue(msGridColumn)) {\n      style.msGridColumnSpan = value - msGridColumn;\n    }\n  },\n\n  gridColumnStart: function gridColumnStart(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridColumn = value;\n    }\n  },\n\n  gridRow: function gridRow(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridRow = value;\n    } else {\n      var _value$split$map3 = value.split('/').map(function (position) {\n        return +position;\n      }),\n          _value$split$map4 = _slicedToArray(_value$split$map3, 2),\n          start = _value$split$map4[0],\n          end = _value$split$map4[1];\n\n      propertyConverters.gridRowStart(start, style);\n      propertyConverters.gridRowEnd(end, style);\n    }\n  },\n\n  gridRowEnd: function gridRowEnd(value, style) {\n    var msGridRow = style.msGridRow;\n\n    if (isSimplePositionValue(value) && isSimplePositionValue(msGridRow)) {\n      style.msGridRowSpan = value - msGridRow;\n    }\n  },\n\n  gridRowStart: function gridRowStart(value, style) {\n    if (isSimplePositionValue(value)) {\n      style.msGridRow = value;\n    }\n  },\n\n  gridTemplateColumns: function gridTemplateColumns(value, style) {\n    style.msGridColumns = value;\n  },\n\n  gridTemplateRows: function gridTemplateRows(value, style) {\n    style.msGridRows = value;\n  },\n\n  justifySelf: function justifySelf(value, style) {\n    if (alignmentValues.indexOf(value) > -1) {\n      style.msGridColumnAlign = value;\n    }\n  }\n};\n\nexport default function grid(property, value, style) {\n  if (property === 'display' && value in displayValues) {\n    return displayValues[value];\n  }\n\n  if (property in propertyConverters) {\n    var propertyConverter = propertyConverters[property];\n    propertyConverter(value, style);\n  }\n}"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

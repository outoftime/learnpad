{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { createLogic } from 'redux-logic';\nimport { openLoginPrompt } from '../actions/ui';\nimport { saveProject } from '../actions/projects';\nimport { isUserAuthenticated } from '../selectors';\nimport { saveCurrentProject } from './shared/saveCurrentProject';\nexport default createLogic({\n  type: saveProject.toString(),\n  process: function () {\n    var _process = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref) {\n      var getState, state, isLoggedIn;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getState = _ref.getState;\n              state = getState();\n              isLoggedIn = isUserAuthenticated(state);\n\n              if (!isLoggedIn) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", saveCurrentProject(state));\n\n            case 5:\n              return _context.abrupt(\"return\", openLoginPrompt());\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function process(_x) {\n      return _process.apply(this, arguments);\n    }\n\n    return process;\n  }()\n});","map":{"version":3,"sources":["/Users/peter/Desktop/code/popcode/src/logic/saveProject.js"],"names":["createLogic","openLoginPrompt","saveProject","isUserAuthenticated","saveCurrentProject","type","toString","process","getState","state","isLoggedIn"],"mappings":";;;;AAAA,SAAQA,WAAR,QAA0B,aAA1B;AAEA,SAAQC,eAAR,QAA8B,eAA9B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,SAAQC,mBAAR,QAAkC,cAAlC;AAEA,SAAQC,kBAAR,QAAiC,6BAAjC;AAEA,eAAeJ,WAAW,CAAC;AACzBK,EAAAA,IAAI,EAAEH,WAAW,CAACI,QAAZ,EADmB;AAEnBC,EAAAA,OAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEVC,cAAAA,QAFU,QAEVA,QAFU;AAGjBC,cAAAA,KAHiB,GAGTD,QAAQ,EAHC;AAIjBE,cAAAA,UAJiB,GAIJP,mBAAmB,CAACM,KAAD,CAJf;;AAAA,mBAKnBC,UALmB;AAAA;AAAA;AAAA;;AAAA,+CAMdN,kBAAkB,CAACK,KAAD,CANJ;;AAAA;AAAA,+CAQhBR,eAAe,EARC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAD,CAA1B","sourcesContent":["import {createLogic} from 'redux-logic';\n\nimport {openLoginPrompt} from '../actions/ui';\nimport {saveProject} from '../actions/projects';\nimport {isUserAuthenticated} from '../selectors';\n\nimport {saveCurrentProject} from './shared/saveCurrentProject';\n\nexport default createLogic({\n  type: saveProject.toString(),\n  async process({getState}) {\n    const state = getState();\n    const isLoggedIn = isUserAuthenticated(state);\n    if (isLoggedIn) {\n      return saveCurrentProject(state);\n    }\n    return openLoginPrompt();\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{
  "ast": null,
  "code": "var _errorMap;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Validator from '../../Validator';\nimport runRules from '../runRules';\nimport Code from './Code';\nimport MismatchedTag from './MismatchedTag';\nimport NodeOutsideBody from './NodeOutsideBody';\nvar errorMap = (_errorMap = {}, _defineProperty(_errorMap, Code.MISPLACED_CLOSE_TAG, function (_ref) {\n  var openTag = _ref.openTag,\n      closeTag = _ref.closeTag;\n  return {\n    reason: 'misplaced-close-tag',\n    payload: {\n      open: openTag.name,\n      close: closeTag.name,\n      mismatch: closeTag.location.row + 1\n    }\n  };\n}), _defineProperty(_errorMap, Code.UNCLOSED_TAG, function (_ref2) {\n  var name = _ref2.openTag.name;\n  return {\n    reason: 'unclosed-tag',\n    payload: {\n      tag: name\n    }\n  };\n}), _defineProperty(_errorMap, Code.UNOPENED_TAG, function (_ref3) {\n  var name = _ref3.closeTag.name;\n  return {\n    reason: 'unexpected-close-tag',\n    payload: {\n      tag: name\n    }\n  };\n}), _defineProperty(_errorMap, Code.INVALID_TEXT_OUTSIDE_BODY, function () {\n  return {\n    reason: 'invalid-text-outside-body',\n    suppresses: ['invalid-tag-parent']\n  };\n}), _defineProperty(_errorMap, Code.INVALID_TAG_OUTSIDE_BODY, function (_ref4) {\n  var tagName = _ref4.tagName;\n  return {\n    reason: 'invalid-tag-outside-body',\n    payload: {\n      tagName: tagName\n    },\n    suppresses: ['invalid-tag-parent']\n  };\n}), _errorMap);\n\nvar RuleValidator =\n/*#__PURE__*/\nfunction (_Validator) {\n  _inherits(RuleValidator, _Validator);\n\n  function RuleValidator(source) {\n    _classCallCheck(this, RuleValidator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RuleValidator).call(this, source, 'html', errorMap));\n  }\n\n  _createClass(RuleValidator, [{\n    key: \"keyForError\",\n    value: function keyForError(_ref5) {\n      var code = _ref5.code;\n      return code;\n    }\n  }, {\n    key: \"getRawErrors\",\n    value: function () {\n      var _getRawErrors = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = Array;\n                _context.next = 3;\n                return runRules([new MismatchedTag(), new NodeOutsideBody()], this.source);\n\n              case 3:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", _context.t0.from.call(_context.t0, _context.t1));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRawErrors() {\n        return _getRawErrors.apply(this, arguments);\n      }\n\n      return getRawErrors;\n    }()\n  }, {\n    key: \"locationForError\",\n    value: function locationForError(error) {\n      switch (error.code) {\n        case Code.MISPLACED_CLOSE_TAG:\n          return error.match;\n\n        case Code.UNOPENED_TAG:\n        case Code.UNCLOSED_TAG:\n          return error.closeTag.location;\n\n        case Code.INVALID_TAG_OUTSIDE_BODY:\n        case Code.INVALID_TEXT_OUTSIDE_BODY:\n          return error.location;\n\n        default:\n          throw new Error(\"Unexpected code in \".concat(JSON.stringify(error)));\n      }\n    }\n  }]);\n\n  return RuleValidator;\n}(Validator);\n\nexport default (function (source) {\n  return new RuleValidator(source).getAnnotations();\n});",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/src/validations/html/rules/index.js"
    ],
    "names": [
      "Validator",
      "runRules",
      "Code",
      "MismatchedTag",
      "NodeOutsideBody",
      "errorMap",
      "MISPLACED_CLOSE_TAG",
      "openTag",
      "closeTag",
      "reason",
      "payload",
      "open",
      "name",
      "close",
      "mismatch",
      "location",
      "row",
      "UNCLOSED_TAG",
      "tag",
      "UNOPENED_TAG",
      "INVALID_TEXT_OUTSIDE_BODY",
      "suppresses",
      "INVALID_TAG_OUTSIDE_BODY",
      "tagName",
      "RuleValidator",
      "source",
      "code",
      "Array",
      "from",
      "error",
      "match",
      "Error",
      "JSON",
      "stringify",
      "getAnnotations"
    ],
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,IAAMC,QAAQ,+CACXH,IAAI,CAACI,mBADM,EACgB;AAAA,MAAEC,OAAF,QAAEA,OAAF;AAAA,MAAWC,QAAX,QAAWA,QAAX;AAAA,SAA0B;AACpDC,IAAAA,MAAM,EAAE,qBAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAEJ,OAAO,CAACK,IADP;AAEPC,MAAAA,KAAK,EAAEL,QAAQ,CAACI,IAFT;AAGPE,MAAAA,QAAQ,EAAEN,QAAQ,CAACO,QAAT,CAAkBC,GAAlB,GAAwB;AAH3B;AAF2C,GAA1B;AAAA,CADhB,8BASXd,IAAI,CAACe,YATM,EASS;AAAA,MAAYL,IAAZ,SAAEL,OAAF,CAAYK,IAAZ;AAAA,SAAwB;AAC3CH,IAAAA,MAAM,EAAE,cADmC;AAE3CC,IAAAA,OAAO,EAAE;AAACQ,MAAAA,GAAG,EAAEN;AAAN;AAFkC,GAAxB;AAAA,CATT,8BAaXV,IAAI,CAACiB,YAbM,EAaS;AAAA,MAAaP,IAAb,SAAEJ,QAAF,CAAaI,IAAb;AAAA,SAAyB;AAC5CH,IAAAA,MAAM,EAAE,sBADoC;AAE5CC,IAAAA,OAAO,EAAE;AAACQ,MAAAA,GAAG,EAAEN;AAAN;AAFmC,GAAzB;AAAA,CAbT,8BAiBXV,IAAI,CAACkB,yBAjBM,EAiBsB;AAAA,SAAO;AACvCX,IAAAA,MAAM,EAAE,2BAD+B;AAEvCY,IAAAA,UAAU,EAAE,CAAC,oBAAD;AAF2B,GAAP;AAAA,CAjBtB,8BAqBXnB,IAAI,CAACoB,wBArBM,EAqBqB;AAAA,MAAEC,OAAF,SAAEA,OAAF;AAAA,SAAgB;AAC/Cd,IAAAA,MAAM,EAAE,0BADuC;AAE/CC,IAAAA,OAAO,EAAE;AAACa,MAAAA,OAAO,EAAPA;AAAD,KAFsC;AAG/CF,IAAAA,UAAU,EAAE,CAAC,oBAAD;AAHmC,GAAhB;AAAA,CArBrB,aAAd;;IA4BMG,a;;;;;AACJ,yBAAYC,MAAZ,EAAoB;AAAA;;AAAA,sFACZA,MADY,EACJ,MADI,EACIpB,QADJ;AAEnB;;;;uCAEmB;AAAA,UAAPqB,IAAO,SAAPA,IAAO;AAClB,aAAOA,IAAP;AACD;;;;;;;;;;;8BAGQC,K;;uBACC1B,QAAQ,CAAC,CAAC,IAAIE,aAAJ,EAAD,EAAsB,IAAIC,eAAJ,EAAtB,CAAD,EAA+C,KAAKqB,MAApD,C;;;;6DADHG,I;;;;;;;;;;;;;;;;;;qCAKEC,K,EAAO;AACtB,cAAQA,KAAK,CAACH,IAAd;AACE,aAAKxB,IAAI,CAACI,mBAAV;AACE,iBAAOuB,KAAK,CAACC,KAAb;;AACF,aAAK5B,IAAI,CAACiB,YAAV;AACA,aAAKjB,IAAI,CAACe,YAAV;AACE,iBAAOY,KAAK,CAACrB,QAAN,CAAeO,QAAtB;;AACF,aAAKb,IAAI,CAACoB,wBAAV;AACA,aAAKpB,IAAI,CAACkB,yBAAV;AACE,iBAAOS,KAAK,CAACd,QAAb;;AACF;AACE,gBAAM,IAAIgB,KAAJ,8BAAgCC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAhC,EAAN;AAVJ;AAYD;;;;EA5ByB7B,S;;AA+B5B,gBAAe,UAAAyB,MAAM;AAAA,SAAI,IAAID,aAAJ,CAAkBC,MAAlB,EAA0BS,cAA1B,EAAJ;AAAA,CAArB",
    "sourcesContent": [
      "import Validator from '../../Validator';\nimport runRules from '../runRules';\n\nimport Code from './Code';\nimport MismatchedTag from './MismatchedTag';\nimport NodeOutsideBody from './NodeOutsideBody';\n\nconst errorMap = {\n  [Code.MISPLACED_CLOSE_TAG]: ({openTag, closeTag}) => ({\n    reason: 'misplaced-close-tag',\n    payload: {\n      open: openTag.name,\n      close: closeTag.name,\n      mismatch: closeTag.location.row + 1,\n    },\n  }),\n  [Code.UNCLOSED_TAG]: ({openTag: {name}}) => ({\n    reason: 'unclosed-tag',\n    payload: {tag: name},\n  }),\n  [Code.UNOPENED_TAG]: ({closeTag: {name}}) => ({\n    reason: 'unexpected-close-tag',\n    payload: {tag: name},\n  }),\n  [Code.INVALID_TEXT_OUTSIDE_BODY]: () => ({\n    reason: 'invalid-text-outside-body',\n    suppresses: ['invalid-tag-parent'],\n  }),\n  [Code.INVALID_TAG_OUTSIDE_BODY]: ({tagName}) => ({\n    reason: 'invalid-tag-outside-body',\n    payload: {tagName},\n    suppresses: ['invalid-tag-parent'],\n  }),\n};\n\nclass RuleValidator extends Validator {\n  constructor(source) {\n    super(source, 'html', errorMap);\n  }\n\n  keyForError({code}) {\n    return code;\n  }\n\n  async getRawErrors() {\n    return Array.from(\n      await runRules([new MismatchedTag(), new NodeOutsideBody()], this.source),\n    );\n  }\n\n  locationForError(error) {\n    switch (error.code) {\n      case Code.MISPLACED_CLOSE_TAG:\n        return error.match;\n      case Code.UNOPENED_TAG:\n      case Code.UNCLOSED_TAG:\n        return error.closeTag.location;\n      case Code.INVALID_TAG_OUTSIDE_BODY:\n      case Code.INVALID_TEXT_OUTSIDE_BODY:\n        return error.location;\n      default:\n        throw new Error(`Unexpected code in ${JSON.stringify(error)}`);\n    }\n  }\n}\n\nexport default source => new RuleValidator(source).getAnnotations();\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

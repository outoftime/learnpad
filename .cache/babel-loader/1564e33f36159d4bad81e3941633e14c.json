{
  "ast": null,
  "code": "/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = /(\\W|^)((this)?\\s*(morning|afternoon|evening|noon|night))/i;\nvar TIME_MATCH = 4;\n\nexports.Parser = function ENCasualTimeParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var text = match[0].substr(match[1].length);\n    var index = match.index + match[1].length;\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    if (!match[TIME_MATCH]) TIME_MATCH = 3;\n\n    switch (match[TIME_MATCH].toLowerCase()) {\n      case 'afternoon':\n        result.start.imply('meridiem', 1);\n        result.start.imply('hour', 15);\n        break;\n\n      case 'evening':\n      case 'night':\n        result.start.imply('meridiem', 1);\n        result.start.imply('hour', 20);\n        break;\n\n      case 'morning':\n        result.start.imply('meridiem', 0);\n        result.start.imply('hour', 6);\n        break;\n\n      case 'noon':\n        result.start.imply('meridiem', 0);\n        result.start.imply('hour', 12);\n        break;\n    }\n\n    result.tags['ENCasualTimeParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/en/ENCasualTimeParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "PATTERN",
      "TIME_MATCH",
      "exports",
      "ENCasualTimeParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "substr",
      "length",
      "index",
      "result",
      "toLowerCase",
      "start",
      "imply",
      "tags"
    ],
    "mappings": "AAAA;;;;AAKA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAAlC;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,YAA3C;;AAEA,IAAIC,OAAO,GAAG,2DAAd;AAEA,IAAIC,UAAU,GAAG,CAAjB;;AAEAC,OAAO,CAACJ,MAAR,GAAiB,SAASK,kBAAT,GAA6B;AAE1CL,EAAAA,MAAM,CAACM,KAAP,CAAa,IAAb,EAAmBC,SAAnB;;AAGA,OAAKC,OAAL,GAAe,YAAW;AAAE,WAAON,OAAP;AAAiB,GAA7C;;AAEA,OAAKO,OAAL,GAAe,UAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,GAA3B,EAA+B;AAE1C,QAAIH,IAAI,GAAGE,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,CAAgBF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAzB,CAAX;AACA,QAAIC,KAAK,GAAGJ,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAAC,CAAD,CAAL,CAASG,MAAnC;AACA,QAAIE,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC1Be,MAAAA,KAAK,EAAEA,KADmB;AAE1BN,MAAAA,IAAI,EAAEA,IAFoB;AAG1BC,MAAAA,GAAG,EAAEA;AAHqB,KAAjB,CAAb;AAMA,QAAG,CAACC,KAAK,CAACT,UAAD,CAAT,EAAuBA,UAAU,GAAG,CAAb;;AAEvB,YAAQS,KAAK,CAACT,UAAD,CAAL,CAAkBe,WAAlB,EAAR;AAEI,WAAK,WAAL;AACID,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,UAAnB,EAA+B,CAA/B;AACAH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,MAAnB,EAA2B,EAA3B;AACA;;AAEJ,WAAK,SAAL;AACA,WAAK,OAAL;AACIH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,UAAnB,EAA+B,CAA/B;AACAH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,MAAnB,EAA2B,EAA3B;AACA;;AAEJ,WAAK,SAAL;AACIH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,UAAnB,EAA+B,CAA/B;AACAH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,MAAnB,EAA2B,CAA3B;AACA;;AAEJ,WAAK,MAAL;AACIH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,UAAnB,EAA+B,CAA/B;AACAH,QAAAA,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,MAAnB,EAA2B,EAA3B;AACA;AArBR;;AAwBAH,IAAAA,MAAM,CAACI,IAAP,CAAY,oBAAZ,IAAoC,IAApC;AACA,WAAOJ,MAAP;AACH,GAtCD;AAuCH,CA9CD",
    "sourcesContent": [
      "/*\n\n\n*/\n\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = /(\\W|^)((this)?\\s*(morning|afternoon|evening|noon|night))/i;\n\nvar TIME_MATCH = 4;\n\nexports.Parser = function ENCasualTimeParser(){\n\n    Parser.apply(this, arguments);\n\n\n    this.pattern = function() { return PATTERN; }\n\n    this.extract = function(text, ref, match, opt){\n\n        var text = match[0].substr(match[1].length);\n        var index = match.index + match[1].length;\n        var result = new ParsedResult({\n            index: index,\n            text: text,\n            ref: ref,\n        });\n\n        if(!match[TIME_MATCH]) TIME_MATCH = 3;\n        \n        switch (match[TIME_MATCH].toLowerCase()) {\n\n            case 'afternoon':\n                result.start.imply('meridiem', 1);\n                result.start.imply('hour', 15);\n                break;\n\n            case 'evening':\n            case 'night':\n                result.start.imply('meridiem', 1);\n                result.start.imply('hour', 20);\n                break;\n\n            case 'morning':\n                result.start.imply('meridiem', 0);\n                result.start.imply('hour', 6);\n                break;\n\n            case 'noon':\n                result.start.imply('meridiem', 0);\n                result.start.imply('hour', 12);\n                break;\n        }\n        \n        result.tags['ENCasualTimeParser'] = true;\n        return result;\n    };\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

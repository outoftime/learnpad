{
  "ast": null,
  "code": "/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp('(而家|立(?:刻|即)|即刻)|' + '(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|' + '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' + '(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)' + '(?:[\\\\s|,|，]*)' + '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?', 'i');\nvar NOW_GROUP = 1;\nvar DAY_GROUP_1 = 2;\nvar TIME_GROUP_1 = 3;\nvar TIME_GROUP_2 = 4;\nvar DAY_GROUP_3 = 5;\nvar TIME_GROUP_3 = 6;\n\nexports.Parser = function ZHHantCasualDateParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    text = match[0];\n    var index = match.index;\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var refMoment = moment(ref);\n    var startMoment = refMoment.clone();\n\n    if (match[NOW_GROUP]) {\n      result.start.imply('hour', refMoment.hour());\n      result.start.imply('minute', refMoment.minute());\n      result.start.imply('second', refMoment.second());\n      result.start.imply('millisecond', refMoment.millisecond());\n    } else if (match[DAY_GROUP_1]) {\n      var day1 = match[DAY_GROUP_1];\n      var time1 = match[TIME_GROUP_1];\n\n      if (day1 == '明' || day1 == '聽') {\n        // Check not \"Tomorrow\" on late night\n        if (refMoment.hour() > 1) {\n          startMoment.add(1, 'day');\n        }\n      } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {\n        startMoment.add(-1, 'day');\n      } else if (day1 == \"前\") {\n        startMoment.add(-2, 'day');\n      } else if (day1 == \"大前\") {\n        startMoment.add(-3, 'day');\n      } else if (day1 == \"後\") {\n        startMoment.add(2, 'day');\n      } else if (day1 == \"大後\") {\n        startMoment.add(3, 'day');\n      }\n\n      if (time1 == '早' || time1 == '朝') {\n        result.start.imply('hour', 6);\n      } else if (time1 == '晚') {\n        result.start.imply('hour', 22);\n        result.start.imply('meridiem', 1);\n      }\n    } else if (match[TIME_GROUP_2]) {\n      var timeString2 = match[TIME_GROUP_2];\n      var time2 = timeString2[0];\n\n      if (time2 == '早' || time2 == '朝' || time2 == '上') {\n        result.start.imply('hour', 6);\n      } else if (time2 == '下' || time2 == '晏') {\n        result.start.imply('hour', 15);\n        result.start.imply('meridiem', 1);\n      } else if (time2 == '中') {\n        result.start.imply('hour', 12);\n        result.start.imply('meridiem', 1);\n      } else if (time2 == '夜' || time2 == '晚') {\n        result.start.imply('hour', 22);\n        result.start.imply('meridiem', 1);\n      } else if (time2 == '凌') {\n        result.start.imply('hour', 0);\n      }\n    } else if (match[DAY_GROUP_3]) {\n      var day3 = match[DAY_GROUP_3];\n\n      if (day3 == '明' || day3 == '聽') {\n        // Check not \"Tomorrow\" on late night\n        if (refMoment.hour() > 1) {\n          startMoment.add(1, 'day');\n        }\n      } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {\n        startMoment.add(-1, 'day');\n      } else if (day3 == \"前\") {\n        startMoment.add(-2, 'day');\n      } else if (day3 == \"大前\") {\n        startMoment.add(-3, 'day');\n      } else if (day3 == \"後\") {\n        startMoment.add(2, 'day');\n      } else if (day3 == \"大後\") {\n        startMoment.add(3, 'day');\n      }\n\n      var timeString3 = match[TIME_GROUP_3];\n\n      if (timeString3) {\n        var time3 = timeString3[0];\n\n        if (time3 == '早' || time3 == '朝' || time3 == '上') {\n          result.start.imply('hour', 6);\n        } else if (time3 == '下' || time3 == '晏') {\n          result.start.imply('hour', 15);\n          result.start.imply('meridiem', 1);\n        } else if (time3 == '中') {\n          result.start.imply('hour', 12);\n          result.start.imply('meridiem', 1);\n        } else if (time3 == '夜' || time3 == '晚') {\n          result.start.imply('hour', 22);\n          result.start.imply('meridiem', 1);\n        } else if (time3 == '凌') {\n          result.start.imply('hour', 0);\n        }\n      }\n    }\n\n    result.start.assign('day', startMoment.date());\n    result.start.assign('month', startMoment.month() + 1);\n    result.start.assign('year', startMoment.year());\n    result.tags.ZHHantCasualDateParser = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/zh-Hant/ZHHantCasualDateParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "PATTERN",
      "RegExp",
      "NOW_GROUP",
      "DAY_GROUP_1",
      "TIME_GROUP_1",
      "TIME_GROUP_2",
      "DAY_GROUP_3",
      "TIME_GROUP_3",
      "exports",
      "ZHHantCasualDateParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "index",
      "result",
      "refMoment",
      "startMoment",
      "clone",
      "start",
      "imply",
      "hour",
      "minute",
      "second",
      "millisecond",
      "day1",
      "time1",
      "add",
      "timeString2",
      "time2",
      "day3",
      "timeString3",
      "time3",
      "assign",
      "date",
      "month",
      "year",
      "tags"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n\n\n*/\n\nvar moment = require('moment');\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp(\n    '(而家|立(?:刻|即)|即刻)|' +\n    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|' +\n    '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' +\n    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)' +\n    '(?:[\\\\s|,|，]*)' +\n    '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?', 'i');\n\nvar NOW_GROUP = 1;\nvar DAY_GROUP_1 = 2;\nvar TIME_GROUP_1 = 3;\nvar TIME_GROUP_2 = 4;\nvar DAY_GROUP_3 = 5;\nvar TIME_GROUP_3 = 6;\n\nexports.Parser = function ZHHantCasualDateParser() {\n\n    Parser.apply(this, arguments);\n\n    this.pattern = function() {\n        return PATTERN;\n    };\n\n    this.extract = function(text, ref, match, opt) {\n        text = match[0];\n        var index = match.index;\n        var result = new ParsedResult({\n            index: index,\n            text: text,\n            ref: ref,\n        });\n\n        var refMoment = moment(ref);\n        var startMoment = refMoment.clone();\n\n        if (match[NOW_GROUP]) {\n            result.start.imply('hour', refMoment.hour());\n            result.start.imply('minute', refMoment.minute());\n            result.start.imply('second', refMoment.second());\n            result.start.imply('millisecond', refMoment.millisecond());\n        } else if (match[DAY_GROUP_1]) {\n            var day1 = match[DAY_GROUP_1];\n            var time1 = match[TIME_GROUP_1];\n\n            if (day1 == '明' || day1 == '聽') {\n              // Check not \"Tomorrow\" on late night\n              if(refMoment.hour() > 1) {\n                  startMoment.add(1, 'day');\n              }\n            } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {\n                startMoment.add(-1, 'day');\n            } else if (day1 == \"前\"){\n                startMoment.add(-2, 'day');\n            } else if (day1 == \"大前\"){\n                startMoment.add(-3, 'day');\n            } else if ( day1 == \"後\"){\n                startMoment.add(2, 'day');\n            } else if (day1 == \"大後\"){\n                startMoment.add(3, 'day');\n            }\n\n            if (time1 == '早' || time1 == '朝') {\n                result.start.imply('hour', 6);\n            } else if (time1 == '晚') {\n                result.start.imply('hour', 22);\n                result.start.imply('meridiem', 1);\n            }\n\n        } else if (match[TIME_GROUP_2]) {\n            var timeString2 = match[TIME_GROUP_2];\n            var time2 = timeString2[0];\n            if (time2 == '早' || time2 == '朝' || time2 == '上') {\n                result.start.imply('hour', 6);\n            } else if (time2 == '下' || time2 == '晏') {\n                result.start.imply('hour', 15);\n                result.start.imply('meridiem', 1);\n            } else if (time2 == '中') {\n                result.start.imply('hour', 12);\n                result.start.imply('meridiem', 1);\n            } else if (time2 == '夜' || time2 == '晚') {\n                result.start.imply('hour', 22);\n                result.start.imply('meridiem', 1);\n            } else if (time2 == '凌') {\n                result.start.imply('hour', 0);\n            }\n\n        } else if (match[DAY_GROUP_3]) {\n            var day3 = match[DAY_GROUP_3];\n\n            if (day3 == '明' || day3 == '聽') {\n              // Check not \"Tomorrow\" on late night\n              if(refMoment.hour() > 1) {\n                  startMoment.add(1, 'day');\n              }\n            } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {\n                startMoment.add(-1, 'day');\n            } else if (day3 == \"前\"){\n                startMoment.add(-2, 'day');\n            } else if (day3 == \"大前\"){\n                startMoment.add(-3, 'day');\n            } else if (day3 == \"後\"){\n                startMoment.add(2, 'day');\n            } else if (day3 == \"大後\"){\n                startMoment.add(3, 'day');\n            }\n\n\n            var timeString3 = match[TIME_GROUP_3];\n            if (timeString3) {\n                var time3 = timeString3[0];\n                if (time3 == '早' || time3 == '朝' || time3 == '上') {\n                    result.start.imply('hour', 6);\n                } else if (time3 == '下' || time3 == '晏') {\n                    result.start.imply('hour', 15);\n                    result.start.imply('meridiem', 1);\n                } else if (time3 == '中') {\n                    result.start.imply('hour', 12);\n                    result.start.imply('meridiem', 1);\n                } else if (time3 == '夜' || time3 == '晚') {\n                    result.start.imply('hour', 22);\n                    result.start.imply('meridiem', 1);\n                } else if (time3 == '凌') {\n                    result.start.imply('hour', 0);\n                }\n            }\n        }\n\n        result.start.assign('day', startMoment.date())\n        result.start.assign('month', startMoment.month() + 1)\n        result.start.assign('year', startMoment.year())\n        result.tags.ZHHantCasualDateParser = true;\n        return result;\n    };\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

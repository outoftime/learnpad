{
  "ast": null,
  "code": "/*\n    \n    The parser for parsing month name and year.\n    \n    EX. \n        - January\n        - January 2012\n        - January, 2012\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(^|\\\\D\\\\s+|[^\\\\w\\\\s])' + '(' + util.MONTH_PATTERN + ')' + '\\\\s*' + '(?:' + '[,-]?\\\\s*([0-9]{4})(\\\\s*BE|AD|BC)?' + ')?' + '(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)', 'i');\nvar MONTH_NAME_GROUP = 2;\nvar YEAR_GROUP = 3;\nvar YEAR_BE_GROUP = 4;\n\nexports.Parser = function ENMonthNameParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var result = new ParsedResult({\n      text: match[0].substr(match[1].length, match[0].length - match[1].length),\n      index: match.index + match[1].length,\n      ref: ref\n    });\n    var month = match[MONTH_NAME_GROUP];\n    month = util.MONTH_OFFSET[month.toLowerCase()];\n    var day = 1;\n    var year = null;\n\n    if (match[YEAR_GROUP]) {\n      year = match[YEAR_GROUP];\n      year = parseInt(year);\n\n      if (match[YEAR_BE_GROUP]) {\n        if (match[YEAR_BE_GROUP].match(/BE/)) {\n          // Buddhist Era\n          year = year - 543;\n        } else if (match[YEAR_BE_GROUP].match(/BC/)) {\n          // Before Christ\n          year = -year;\n        }\n      } else if (year < 100) {\n        year = year + 2000;\n      }\n    }\n\n    if (year) {\n      result.start.imply('day', day);\n      result.start.assign('month', month);\n      result.start.assign('year', year);\n    } else {\n      //Find the most appropriated year\n      var refMoment = moment(ref);\n      refMoment.month(month - 1);\n      refMoment.date(day);\n      var nextYear = refMoment.clone().add(1, 'y');\n      var lastYear = refMoment.clone().add(-1, 'y');\n\n      if (Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = nextYear;\n      } else if (Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = lastYear;\n      }\n\n      result.start.imply('day', day);\n      result.start.assign('month', month);\n      result.start.imply('year', refMoment.year());\n    }\n\n    result.tags['ENMonthNameParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/en/ENMonthNameParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "util",
      "PATTERN",
      "RegExp",
      "MONTH_PATTERN",
      "MONTH_NAME_GROUP",
      "YEAR_GROUP",
      "YEAR_BE_GROUP",
      "exports",
      "ENMonthNameParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "result",
      "substr",
      "length",
      "index",
      "month",
      "MONTH_OFFSET",
      "toLowerCase",
      "day",
      "year",
      "parseInt",
      "start",
      "imply",
      "assign",
      "refMoment",
      "date",
      "nextYear",
      "clone",
      "add",
      "lastYear",
      "Math",
      "abs",
      "diff",
      "tags"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n    \n    The parser for parsing month name and year.\n    \n    EX. \n        - January\n        - January 2012\n        - January, 2012\n*/\n\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\nvar util  = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(^|\\\\D\\\\s+|[^\\\\w\\\\s])' +\n    '('+ util.MONTH_PATTERN +')' + \n    '\\\\s*' +\n    '(?:' +\n        '[,-]?\\\\s*([0-9]{4})(\\\\s*BE|AD|BC)?' +\n    ')?' +\n    '(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)', 'i');\n\nvar MONTH_NAME_GROUP = 2;\nvar YEAR_GROUP = 3;\nvar YEAR_BE_GROUP = 4;\n\nexports.Parser = function ENMonthNameParser(){\n    Parser.apply(this, arguments);\n\n    this.pattern = function() { return PATTERN; }\n    \n    this.extract = function(text, ref, match, opt){\n        var result = new ParsedResult({\n            text: match[0].substr(match[1].length, match[0].length - match[1].length),\n            index: match.index + match[1].length,\n            ref: ref,\n        });\n\n        \n        var month = match[MONTH_NAME_GROUP];\n        month = util.MONTH_OFFSET[month.toLowerCase()];\n\n        var day = 1;\n\n        var year = null;\n        if (match[YEAR_GROUP]) {\n            year = match[YEAR_GROUP];\n            year = parseInt(year);\n\n            if(match[YEAR_BE_GROUP]){\n                if (match[YEAR_BE_GROUP].match(/BE/)) {\n                    // Buddhist Era\n                    year = year - 543;\n                } else if (match[YEAR_BE_GROUP].match(/BC/)) {\n                    // Before Christ\n                    year = -year;\n                }\n\n            } else if (year < 100){ \n\n                year = year + 2000;\n            }\n        }\n\n        if(year){\n            result.start.imply('day', day);\n            result.start.assign('month', month);\n            result.start.assign('year', year);\n        } else {\n            \n            //Find the most appropriated year\n            var refMoment = moment(ref);\n            refMoment.month(month - 1);\n            refMoment.date(day);\n\n            var nextYear = refMoment.clone().add(1, 'y');\n            var lastYear = refMoment.clone().add(-1, 'y');\n            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){  \n                refMoment = nextYear;\n            }\n            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){ \n                refMoment = lastYear;\n            }\n\n            result.start.imply('day', day);\n            result.start.assign('month', month);\n            result.start.imply('year', refMoment.year());\n        }\n\n        result.tags['ENMonthNameParser'] = true;\n        return result;\n    }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}

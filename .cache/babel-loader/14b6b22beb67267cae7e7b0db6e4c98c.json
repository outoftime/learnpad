{
  "ast": null,
  "code": "/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/DE');\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '(?:am\\\\s*?)?' + '(?:(Sonntag|Montag|Dienstag|Mittwoch|Donnerstag|Freitag|Samstag|So|Mo|Di|Mi|Do|Fr|Sa)\\\\s*,?\\\\s*)?' + '(?:den\\\\s*)?' + '([0-9]{1,2})\\\\.' + '(?:\\\\s*(?:bis(?:\\\\s*(?:am|zum))?|\\\\-|\\\\–|\\\\s)\\\\s*([0-9]{1,2})\\\\.)?\\\\s*' + '(Jan(?:uar|\\\\.)?|Feb(?:ruar|\\\\.)?|Mär(?:z|\\\\.)?|Maerz|Mrz\\\\.?|Apr(?:il|\\\\.)?|Mai|Jun(?:i|\\\\.)?|Jul(?:i|\\\\.)?|Aug(?:ust|\\\\.)?|Sep(?:t|t\\\\.|tember|\\\\.)?|Okt(?:ober|\\\\.)?|Nov(?:ember|\\\\.)?|Dez(?:ember|\\\\.)?)' + '(?:' + ',?\\\\s*([0-9]{1,4}(?![^\\\\s]\\\\d))' + '(\\\\s*[vn]\\\\.?\\\\s*C(?:hr)?\\\\.?)?' + ')?' + '(?=\\\\W|$)', 'i');\nvar WEEKDAY_GROUP = 2;\nvar DATE_GROUP = 3;\nvar DATE_TO_GROUP = 4;\nvar MONTH_NAME_GROUP = 5;\nvar YEAR_GROUP = 6;\nvar YEAR_BE_GROUP = 7;\n\nexports.Parser = function DEMonthNameLittleEndianParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var result = new ParsedResult({\n      text: match[0].substr(match[1].length, match[0].length - match[1].length),\n      index: match.index + match[1].length,\n      ref: ref\n    });\n    var month = match[MONTH_NAME_GROUP];\n    month = util.MONTH_OFFSET[month.toLowerCase()];\n    var day = match[DATE_GROUP];\n    day = parseInt(day);\n    var year = null;\n\n    if (match[YEAR_GROUP]) {\n      year = match[YEAR_GROUP];\n      year = parseInt(year);\n\n      if (match[YEAR_BE_GROUP]) {\n        if (/v/i.test(match[YEAR_BE_GROUP])) {\n          // v.Chr.\n          year = -year;\n        }\n      } else if (year < 100) {\n        year = year + 2000;\n      }\n    }\n\n    if (year) {\n      result.start.assign('day', day);\n      result.start.assign('month', month);\n      result.start.assign('year', year);\n    } else {\n      //Find the most appropriated year\n      var refMoment = moment(ref);\n      refMoment.month(month - 1);\n      refMoment.date(day);\n      refMoment.year(moment(ref).year());\n      var nextYear = refMoment.clone().add(1, 'y');\n      var lastYear = refMoment.clone().add(-1, 'y');\n\n      if (Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = nextYear;\n      } else if (Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref)))) {\n        refMoment = lastYear;\n      }\n\n      result.start.assign('day', day);\n      result.start.assign('month', month);\n      result.start.imply('year', refMoment.year());\n    } // Weekday component\n\n\n    if (match[WEEKDAY_GROUP]) {\n      var weekday = match[WEEKDAY_GROUP];\n      weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()];\n      result.start.assign('weekday', weekday);\n    } // Text can be 'range' value. Such as '12 - 13 January 2012'\n\n\n    if (match[DATE_TO_GROUP]) {\n      result.end = result.start.clone();\n      result.end.assign('day', parseInt(match[DATE_TO_GROUP]));\n    }\n\n    result.tags['DEMonthNameLittleEndianParser'] = true;\n    return result;\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/peter/Desktop/code/popcode/node_modules/chrono-node/src/parsers/de/DEMonthNameLittleEndianParser.js"
    ],
    "names": [
      "moment",
      "require",
      "Parser",
      "ParsedResult",
      "util",
      "PATTERN",
      "RegExp",
      "WEEKDAY_GROUP",
      "DATE_GROUP",
      "DATE_TO_GROUP",
      "MONTH_NAME_GROUP",
      "YEAR_GROUP",
      "YEAR_BE_GROUP",
      "exports",
      "DEMonthNameLittleEndianParser",
      "apply",
      "arguments",
      "pattern",
      "extract",
      "text",
      "ref",
      "match",
      "opt",
      "result",
      "substr",
      "length",
      "index",
      "month",
      "MONTH_OFFSET",
      "toLowerCase",
      "day",
      "parseInt",
      "year",
      "test",
      "start",
      "assign",
      "refMoment",
      "date",
      "nextYear",
      "clone",
      "add",
      "lastYear",
      "Math",
      "abs",
      "diff",
      "imply",
      "weekday",
      "WEEKDAY_OFFSET",
      "end",
      "tags"
    ],
    "mappings": "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",
    "sourcesContent": [
      "/*\n\n\n*/\n\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\nvar ParsedResult = require('../../result').ParsedResult;\nvar util  = require('../../utils/DE');\n\nvar PATTERN = new RegExp('(\\\\W|^)' +\n        '(?:am\\\\s*?)?' +\n        '(?:(Sonntag|Montag|Dienstag|Mittwoch|Donnerstag|Freitag|Samstag|So|Mo|Di|Mi|Do|Fr|Sa)\\\\s*,?\\\\s*)?' +\n        '(?:den\\\\s*)?' +\n        '([0-9]{1,2})\\\\.' +\n        '(?:\\\\s*(?:bis(?:\\\\s*(?:am|zum))?|\\\\-|\\\\–|\\\\s)\\\\s*([0-9]{1,2})\\\\.)?\\\\s*' +\n        '(Jan(?:uar|\\\\.)?|Feb(?:ruar|\\\\.)?|Mär(?:z|\\\\.)?|Maerz|Mrz\\\\.?|Apr(?:il|\\\\.)?|Mai|Jun(?:i|\\\\.)?|Jul(?:i|\\\\.)?|Aug(?:ust|\\\\.)?|Sep(?:t|t\\\\.|tember|\\\\.)?|Okt(?:ober|\\\\.)?|Nov(?:ember|\\\\.)?|Dez(?:ember|\\\\.)?)' +\n        '(?:' +\n            ',?\\\\s*([0-9]{1,4}(?![^\\\\s]\\\\d))' +\n            '(\\\\s*[vn]\\\\.?\\\\s*C(?:hr)?\\\\.?)?' +\n        ')?' +\n        '(?=\\\\W|$)', 'i'\n    );\n\nvar WEEKDAY_GROUP = 2;\nvar DATE_GROUP = 3;\nvar DATE_TO_GROUP = 4;\nvar MONTH_NAME_GROUP = 5;\nvar YEAR_GROUP = 6;\nvar YEAR_BE_GROUP = 7;\n\nexports.Parser = function DEMonthNameLittleEndianParser(){\n    Parser.apply(this, arguments);\n\n    this.pattern = function() { return PATTERN; }\n\n    this.extract = function(text, ref, match, opt){\n\n        var result = new ParsedResult({\n            text: match[0].substr(match[1].length, match[0].length - match[1].length),\n            index: match.index + match[1].length,\n            ref: ref,\n        });\n\n        var month = match[MONTH_NAME_GROUP];\n        month = util.MONTH_OFFSET[month.toLowerCase()];\n\n        var day = match[DATE_GROUP];\n        day = parseInt(day);\n\n        var year = null;\n        if (match[YEAR_GROUP]) {\n            year = match[YEAR_GROUP];\n            year = parseInt(year);\n\n            if(match[YEAR_BE_GROUP]){\n                if (/v/i.test(match[YEAR_BE_GROUP])) {\n                    // v.Chr.\n                    year = -year;\n                }\n            } else if (year < 100){\n\n                year = year + 2000;\n            }\n        }\n\n        if(year){\n            result.start.assign('day', day);\n            result.start.assign('month', month);\n            result.start.assign('year', year);\n        } else {\n\n            //Find the most appropriated year\n            var refMoment = moment(ref);\n            refMoment.month(month - 1);\n            refMoment.date(day);\n            refMoment.year(moment(ref).year());\n\n            var nextYear = refMoment.clone().add(1, 'y');\n            var lastYear = refMoment.clone().add(-1, 'y');\n            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){\n                refMoment = nextYear;\n            }\n            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){\n                refMoment = lastYear;\n            }\n\n            result.start.assign('day', day);\n            result.start.assign('month', month);\n            result.start.imply('year', refMoment.year());\n        }\n\n        // Weekday component\n        if (match[WEEKDAY_GROUP]) {\n            var weekday = match[WEEKDAY_GROUP];\n            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]\n            result.start.assign('weekday', weekday);\n        }\n\n        // Text can be 'range' value. Such as '12 - 13 January 2012'\n        if (match[DATE_TO_GROUP]) {\n            result.end = result.start.clone();\n            result.end.assign('day', parseInt(match[DATE_TO_GROUP]));\n        }\n\n        result.tags['DEMonthNameLittleEndianParser'] = true;\n        return result;\n    };\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
